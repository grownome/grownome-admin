["^ ","~:output",["^ ","~:js","goog.provide('re_frisk_shell.filter_matcher');\r\ngoog.require('cljs.core');\r\ngoog.require('clojure.string');\r\nre_frisk_shell.filter_matcher.match_expr = (function re_frisk_shell$filter_matcher$match_expr(f,p){\r\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f,p);\r\n});\r\nre_frisk_shell.filter_matcher.match_string_prefix = (function re_frisk_shell$filter_matcher$match_string_prefix(f,p){\r\nreturn ((typeof p === 'string') && (clojure.string.starts_with_QMARK_(p,f)));\r\n});\r\nre_frisk_shell.filter_matcher.match_free = (function re_frisk_shell$filter_matcher$match_free(f,p){\r\nreturn clojure.string.includes_QMARK_([cljs.core.str.cljs$core$IFn$_invoke$arity$1(p)].join(''),f);\r\n});\r\nre_frisk_shell.filter_matcher.match_value = (function re_frisk_shell$filter_matcher$match_value(f,p){\r\nif(cljs.core.contains_QMARK_(f,new cljs.core.Keyword(null,\"expr\",\"expr\",745722291))){\r\nreturn re_frisk_shell.filter_matcher.match_expr(new cljs.core.Keyword(null,\"expr\",\"expr\",745722291).cljs$core$IFn$_invoke$arity$1(f),p);\r\n} else {\r\nif(cljs.core.contains_QMARK_(f,new cljs.core.Keyword(null,\"string-prefix\",\"string-prefix\",2091851734))){\r\nreturn re_frisk_shell.filter_matcher.match_string_prefix(new cljs.core.Keyword(null,\"string-prefix\",\"string-prefix\",2091851734).cljs$core$IFn$_invoke$arity$1(f),p);\r\n} else {\r\nif(cljs.core.contains_QMARK_(f,new cljs.core.Keyword(null,\"free\",\"free\",801364328))){\r\nreturn re_frisk_shell.filter_matcher.match_free(new cljs.core.Keyword(null,\"free\",\"free\",801364328).cljs$core$IFn$_invoke$arity$1(f),p);\r\n} else {\r\nthrow (new Error([\"Unknown kind of filter-path: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(f)].join('')));\r\n\r\n}\r\n}\r\n}\r\n});\r\nre_frisk_shell.filter_matcher.match = (function re_frisk_shell$filter_matcher$match(filter,path){\r\nwhile(true){\r\nif(cljs.core.empty_QMARK_(filter)){\r\nreturn null;\r\n} else {\r\nif(cljs.core.empty_QMARK_(path)){\r\nreturn null;\r\n} else {\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(filter),(1))){\r\nreturn re_frisk_shell.filter_matcher.match_value(cljs.core.first(filter),cljs.core.last(path));\r\n} else {\r\nif(cljs.core.truth_(re_frisk_shell.filter_matcher.match_value(cljs.core.first(filter),cljs.core.first(path)))){\r\nvar G__19281 = cljs.core.rest(filter);\r\nvar G__19282 = cljs.core.rest(path);\r\nfilter = G__19281;\r\npath = G__19282;\r\ncontinue;\r\n} else {\r\nvar G__19286 = filter;\r\nvar G__19287 = cljs.core.rest(path);\r\nfilter = G__19286;\r\npath = G__19287;\r\ncontinue;\r\n}\r\n\r\n}\r\n}\r\n}\r\nbreak;\r\n}\r\n});\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frisk_shell/filter_matcher.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",34],"~:ns-aliases",["^ ","~$clojure.pprint","~$cljs.pprint","~$clojure.repl","~$cljs.repl","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frisk-shell.filter-matcher","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^M","~$str","^M","~$cljs.core","^O","~$goog","^P"],"~:seen",["^F",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^O","^O"],"~:form",["~#list",["~$ns","^H",["^V",["^R",["^M","~:as","^N"]]]]],"~:flags",["^ ","^R",["^F",[]]],"~:js-deps",["^ "],"~:deps",["^P","^O","^M"]],"^J","^H","~:resource-id",["~:shadow.build.classpath/resource","re_frisk_shell/filter_matcher.cljs"],"~:compiled-at",1533407589592,"~:resource-name","re_frisk_shell/filter_matcher.cljs","~:warnings",[],"~:source","(ns re-frisk-shell.filter-matcher\n  (:require [clojure.string :as str]))\n\n(defn- match-expr [f p]\n  (= f p))\n\n(defn- match-string-prefix [f p]\n  (and (string? p) (str/starts-with? p f)))\n\n(defn- match-free [f p]\n  (str/includes? (str p) f))\n\n(defn- match-value [f p]\n  (cond (contains? f :expr) (match-expr (:expr f) p)\n        (contains? f :string-prefix) (match-string-prefix (:string-prefix f) p)\n        (contains? f :free) (match-free (:free f) p)\n        :else (throw (js/Error. (str \"Unknown kind of filter-path: \" f)))))\n\n(defn match [filter path]\n  (cond (empty? filter) nil\n        (empty? path) nil\n        (= (count filter) 1) (match-value (first filter) (last path))\n        :else (if (match-value (first filter) (first path))\n                (recur (rest filter) (rest path))\n                (recur filter (rest path)))))\n","~:reader-features",["^F",["~:cljs"]],"~:source-map",["^ ","~i3",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",3],["^ ","^19",43,"^1:",3],["^ ","^19",0,"^1:",4]],"~i7",[["^ ","^19",0,"^1:",3,"^G","re-frisk-shell.filter-matcher/match-expr"]],"~i19",[["^ ","^19",94,"^1:",3,"^G","f"]],"~i21",[["^ ","^19",96,"^1:",3,"^G","p"]]],"~i4",["^ ","~i2",[["^ ","^19",0,"^1:",4]],"~i3",[["^ ","^19",7,"^1:",4,"^G","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"~i5",[["^ ","^19",52,"^1:",4,"^G","f"]],"~i7",[["^ ","^19",54,"^1:",4,"^G","p"]]],"~i6",["^ ","~i0",[["^ ","^19",0,"^1:",6],["^ ","^19",52,"^1:",6],["^ ","^19",0,"^1:",7]],"~i7",[["^ ","^19",0,"^1:",6,"^G","re-frisk-shell.filter-matcher/match-string-prefix"]],"~i28",[["^ ","^19",112,"^1:",6,"^G","f"]],"~i30",[["^ ","^19",114,"^1:",6,"^G","p"]]],"~i7",["^ ","~i2",[["^ ","^19",0,"^1:",7]],"~i7",[["^ ","^19",9,"^1:",7]],"~i16",[["^ ","^19",16,"^1:",7,"^G","p"]],"^1;",[["^ ","^19",36,"^1:",7]],"~i20",[["^ ","^19",36,"^1:",7,"^G","clojure.string/starts-with?"]],"~i37",[["^ ","^19",70,"^1:",7,"^G","p"]],"~i39",[["^ ","^19",72,"^1:",7,"^G","f"]]],"~i9",["^ ","~i0",[["^ ","^19",0,"^1:",9],["^ ","^19",43,"^1:",9],["^ ","^19",0,"^1:",10]],"~i7",[["^ ","^19",0,"^1:",9,"^G","re-frisk-shell.filter-matcher/match-free"]],"^1;",[["^ ","^19",94,"^1:",9,"^G","f"]],"^1<",[["^ ","^19",96,"^1:",9,"^G","p"]]],"~i10",["^ ","~i2",[["^ ","^19",0,"^1:",10]],"~i3",[["^ ","^19",7,"^1:",10,"^G","clojure.string/includes?"]],"~i17",[["^ ","^19",38,"^1:",10]],"~i22",[["^ ","^19",83,"^1:",10,"^G","p"]],"~i25",[["^ ","^19",96,"^1:",10,"^G","f"]]],"~i12",["^ ","~i0",[["^ ","^19",0,"^1:",12],["^ ","^19",44,"^1:",12],["^ ","^19",0,"^1:",13]],"~i7",[["^ ","^19",0,"^1:",12,"^G","re-frisk-shell.filter-matcher/match-value"]],"^1@",[["^ ","^19",96,"^1:",12,"^G","f"]],"^1E",[["^ ","^19",98,"^1:",12,"^G","p"]]],"~i13",["^ ","~i2",[["^ ","^19",0,"^1:",13],["^ ","^19",0,"^1:",16],["^ ","^19",0,"^1:",19],["^ ","^19",0,"^1:",22]],"~i8",[["^ ","^19",3,"^1:",13],["^ ","^19",31,"^1:",13]],"~i9",[["^ ","^19",3,"^1:",13,"^G","cljs.core/contains?"]],"^1;",[["^ ","^19",29,"^1:",13,"^G","f"]],"^1=",[["^ ","^19",0,"^1:",14]],"~i29",[["^ ","^19",7,"^1:",14,"^G","re-frisk-shell.filter-matcher/match-expr"]],"~i40",[["^ ","^19",48,"^1:",14],["^ ","^19",48,"^1:",14]],"~i47",[["^ ","^19",130,"^1:",14,"^G","f"]],"~i50",[["^ ","^19",133,"^1:",14,"^G","p"]]],"~i14",["^ ","~i8",[["^ ","^19",3,"^1:",16],["^ ","^19",31,"^1:",16]],"~i9",[["^ ","^19",3,"^1:",16,"^G","cljs.core/contains?"]],"^1;",[["^ ","^19",29,"^1:",16,"^G","f"]],"^1A",[["^ ","^19",0,"^1:",17]],"~i38",[["^ ","^19",7,"^1:",17,"^G","re-frisk-shell.filter-matcher/match-string-prefix"]],"~i58",[["^ ","^19",57,"^1:",17],["^ ","^19",57,"^1:",17]],"~i74",[["^ ","^19",158,"^1:",17,"^G","f"]],"~i77",[["^ ","^19",161,"^1:",17,"^G","p"]]],"~i15",["^ ","~i8",[["^ ","^19",3,"^1:",19],["^ ","^19",31,"^1:",19]],"~i9",[["^ ","^19",3,"^1:",19,"^G","cljs.core/contains?"]],"^1;",[["^ ","^19",29,"^1:",19,"^G","f"]],"^1=",[["^ ","^19",0,"^1:",20]],"^1I",[["^ ","^19",7,"^1:",20,"^G","re-frisk-shell.filter-matcher/match-free"]],"^1J",[["^ ","^19",48,"^1:",20],["^ ","^19",48,"^1:",20]],"^1K",[["^ ","^19",130,"^1:",20,"^G","f"]],"^1L",[["^ ","^19",133,"^1:",20,"^G","p"]]],"^1?",["^ ","^1M",[["^ ","^19",0,"^1:",22]],"^1<",[["^ ","^19",6,"^1:",22],["^ ","^19",11,"^1:",22,"^G","js/Error"]],"~i32",[["^ ","^19",17,"^1:",22],["^ ","^19",18,"^1:",22]],"~i69",[["^ ","^19",94,"^1:",22,"^G","f"]]],"~i18",["^ ","~i0",[["^ ","^19",0,"^1:",28],["^ ","^19",38,"^1:",28],["^ ","^19",0,"^1:",30]],"~i6",[["^ ","^19",0,"^1:",28,"^G","re-frisk-shell.filter-matcher/match"]],"^1H",[["^ ","^19",84,"^1:",28,"^G","filter"]],"^1@",[["^ ","^19",91,"^1:",28,"^G","path"]]],"^1;",["^ ","~i2",[["^ ","^19",0,"^1:",30],["^ ","^19",0,"^1:",31],["^ ","^19",0,"^1:",33],["^ ","^19",0,"^1:",34],["^ ","^19",0,"^1:",36],["^ ","^19",0,"^1:",39]],"~i8",[["^ ","^19",3,"^1:",30]],"~i9",[["^ ","^19",3,"^1:",30,"^G","cljs.core/empty?"]],"^1?",[["^ ","^19",26,"^1:",30,"^G","filter"]]],"^1@",["^ ","~i8",[["^ ","^19",3,"^1:",33]],"~i9",[["^ ","^19",3,"^1:",33,"^G","cljs.core/empty?"]],"^1?",[["^ ","^19",26,"^1:",33,"^G","path"]]],"^1<",["^ ","~i8",[["^ ","^19",3,"^1:",36],["^ ","^19",72,"^1:",36]],"~i9",[["^ ","^19",3,"^1:",36,"^G","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"~i11",[["^ ","^19",48,"^1:",36]],"^1G",[["^ ","^19",48,"^1:",36,"^G","cljs.core/count"]],"^1U",[["^ ","^19",64,"^1:",36,"^G","filter"]],"^1I",[["^ ","^19",0,"^1:",37]],"^1>",[["^ ","^19",7,"^1:",37,"^G","re-frisk-shell.filter-matcher/match-value"]],"~i42",[["^ ","^19",49,"^1:",37]],"~i43",[["^ ","^19",49,"^1:",37,"^G","cljs.core/first"]],"~i49",[["^ ","^19",65,"^1:",37,"^G","filter"]],"~i57",[["^ ","^19",73,"^1:",37]],"^1O",[["^ ","^19",73,"^1:",37,"^G","cljs.core/last"]],"~i63",[["^ ","^19",88,"^1:",37,"^G","path"]]],"^1E",["^ ","^1M",[["^ ","^19",0,"^1:",39]],"^1U",[["^ ","^19",20,"^1:",39]],"^1;",[["^ ","^19",20,"^1:",39,"^G","re-frisk-shell.filter-matcher/match-value"]],"~i31",[["^ ","^19",62,"^1:",39]],"^1S",[["^ ","^19",62,"^1:",39,"^G","cljs.core/first"]],"^1N",[["^ ","^19",78,"^1:",39,"^G","filter"]],"~i46",[["^ ","^19",86,"^1:",39]],"^1K",[["^ ","^19",86,"^1:",39,"^G","cljs.core/first"]],"~i53",[["^ ","^19",102,"^1:",39,"^G","path"]]],"~i23",["^ ","^1?",[["^ ","^19",0,"^1:",40]],"^23",[["^ ","^19",15,"^1:",40]],"~i24",[["^ ","^19",15,"^1:",40,"^G","cljs.core/rest"]],"^1I",[["^ ","^19",30,"^1:",40,"^G","filter"]],"^1A",[["^ ","^19",15,"^1:",41]],"^1N",[["^ ","^19",15,"^1:",41,"^G","cljs.core/rest"]],"^1X",[["^ ","^19",30,"^1:",41,"^G","path"]]],"^24",["^ ","^1?",[["^ ","^19",0,"^1:",46]],"^23",[["^ ","^19",15,"^1:",46,"^G","filter"]],"^1>",[["^ ","^19",15,"^1:",47]],"^20",[["^ ","^19",15,"^1:",47,"^G","cljs.core/rest"]],"~i36",[["^ ","^19",30,"^1:",47,"^G","path"]]]],"~:cljc",false],"~:cache-keys",["~#cmap",[["~:macro","^O"],[1532292597000],["^11","goog/math/math.js"],[1531925801810,"^P","~$goog.array","~$goog.asserts"],["^11","goog/array/array.js"],[1531925801810,"^P","^2;"],["^11","goog/debug/error.js"],[1531925801810,"^P"],["^11","goog/dom/nodetype.js"],[1531925801810,"^P"],["^11","goog/object/object.js"],[1531925801810,"^P"],"~:SHADOW-TIMESTAMP",[1533404981000,1532292597000],["^11","goog/math/long.js"],[1531925801810,"^P","^2;","~$goog.reflect"],["^11","goog/functions/functions.js"],[1531925801810,"^P"],["^11","goog/structs/map.js"],[1531925801810,"^P","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^11","goog/asserts/asserts.js"],[1531925801810,"^P","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"],["^11","goog/uri/uri.js"],[1531925801810,"^P","^2:","^2;","^2C","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^11","goog/base.js"],[1531925801810],["^11","goog/structs/structs.js"],[1531925801810,"^P","^2:","^2@"],["^11","clojure/string.cljs"],[1532292597383,"^P","^O","^2C","~$goog.string.StringBuffer"],["^11","re_frisk_shell/filter_matcher.cljs"],[1531925810190,"^P","^O","^M"],["^11","goog/string/string.js"],[1531925801810,"^P"],["^11","goog/reflect/reflect.js"],[1531925801810,"^P"],["^11","goog/string/stringbuffer.js"],[1531925801810,"^P"],["^11","goog/iter/iter.js"],[1531925801810,"^P","^2:","^2;","~$goog.functions","~$goog.math"],["^11","cljs/core.cljs"],[1532292597383,"~$goog.math.Long","~$goog.math.Integer","^2C","^2@","^2:","~$goog.Uri","^2I"],["^11","goog/math/integer.js"],[1531925801810,"^P"],["^11","goog/uri/utils.js"],[1531925801810,"^P","^2:","^2;","^2C"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frisk_shell/filter_matcher.cljs","^7",1,"^8",5,"^9",1,"^:",34],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C"],"^D",null,"^E",["^F",[]],"^G","^H","^K",null,"^L",["^ ","^M","^M","^N","^M","^O","^O","^P","^P"],"^Q",["^F",["^R"]],"~:shadow/js-access-global",["^F",["Error"]],"^S",null,"~:defs",["^ ","~$match-expr",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frisk_shell/filter_matcher.cljs","^7",4,"^8",8,"^9",4,"^:",18,"~:private",true,"~:arglists",["^V",["~$quote",["^V",[["~$f","~$p"]]]]]],"^2T",true,"^G","~$re-frisk-shell.filter-matcher/match-expr","~:variadic",false,"^6","re_frisk_shell/filter_matcher.cljs","^:",18,"~:method-params",["^V",[["~$f","~$p"]]],"~:protocol-impl",null,"~:arglists-meta",["^V",[null,null]],"^8",1,"^7",4,"^9",4,"~:max-fixed-arity",2,"~:fn-var",true,"^2U",["^V",["^2V",["^V",[["~$f","~$p"]]]]]],"~$match-string-prefix",["^ ","^2S",null,"^5",["^ ","^6","re_frisk_shell/filter_matcher.cljs","^7",7,"^8",8,"^9",7,"^:",27,"^2T",true,"^2U",["^V",["^2V",["^V",[["~$f","~$p"]]]]]],"^2T",true,"^G","~$re-frisk-shell.filter-matcher/match-string-prefix","^2X",false,"^6","re_frisk_shell/filter_matcher.cljs","^:",27,"^2Y",["^V",[["~$f","~$p"]]],"^2Z",null,"^2[",["^V",[null,null]],"^8",1,"^7",7,"^9",7,"^30",2,"^31",true,"^2U",["^V",["^2V",["^V",[["~$f","~$p"]]]]]],"~$match-free",["^ ","^2S",null,"^5",["^ ","^6","re_frisk_shell/filter_matcher.cljs","^7",10,"^8",8,"^9",10,"^:",18,"^2T",true,"^2U",["^V",["^2V",["^V",[["~$f","~$p"]]]]]],"^2T",true,"^G","~$re-frisk-shell.filter-matcher/match-free","^2X",false,"^6","re_frisk_shell/filter_matcher.cljs","^:",18,"^2Y",["^V",[["~$f","~$p"]]],"^2Z",null,"^2[",["^V",[null,null]],"^8",1,"^7",10,"^9",10,"^30",2,"^31",true,"^2U",["^V",["^2V",["^V",[["~$f","~$p"]]]]]],"~$match-value",["^ ","^2S",null,"^5",["^ ","^6","re_frisk_shell/filter_matcher.cljs","^7",13,"^8",8,"^9",13,"^:",19,"^2T",true,"^2U",["^V",["^2V",["^V",[["~$f","~$p"]]]]]],"^2T",true,"^G","~$re-frisk-shell.filter-matcher/match-value","^2X",false,"^6","re_frisk_shell/filter_matcher.cljs","^:",19,"^2Y",["^V",[["~$f","~$p"]]],"^2Z",null,"^2[",["^V",[null,null]],"^8",1,"^7",13,"^9",13,"^30",2,"^31",true,"^2U",["^V",["^2V",["^V",[["~$f","~$p"]]]]]],"~$match",["^ ","^2S",null,"^5",["^ ","^6","re_frisk_shell/filter_matcher.cljs","^7",19,"^8",7,"^9",19,"^:",12,"^2U",["^V",["^2V",["^V",[["~$filter","~$path"]]]]]],"^G","~$re-frisk-shell.filter-matcher/match","^2X",false,"^6","re_frisk_shell/filter_matcher.cljs","^:",12,"^2Y",["^V",[["^39","^3:"]]],"^2Z",null,"^2[",["^V",[null,null]],"^8",1,"^7",19,"^9",19,"^30",2,"^31",true,"^2U",["^V",["^2V",["^V",[["^39","^3:"]]]]]]],"^T",["^ ","^O","^O"],"~:cljs.analyzer/constants",["^ ","^Q",["^F",["~:else","~:free","~:expr","~:string-prefix"]],"~:order",["^3?","^3@","^3>","^3="]],"^Y",["^ ","^R",["^F",[]]],"^Z",["^ "],"^[",["^P","^O","^M"]],"^J","^H","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^28",[["^3D","~:static-fns"],true,["^3D","~:elide-asserts"],false,["^3D","~:optimize-constants"],null,["^3D","~:external-config"],null,["^3D","~:tooling-config"],null,["^3D","~:emit-constants"],null,["^3D","~:infer-externs"],true,["^3D","^16"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^3D","~:fn-invoke-direct"],null,["^3D","^18"],"/dev/null"]]]