["^ ","~:output",["^ ","~:js","goog.provide('re_frame.core');\r\ngoog.require('cljs.core');\r\ngoog.require('re_frame.events');\r\ngoog.require('re_frame.subs');\r\ngoog.require('re_frame.interop');\r\ngoog.require('re_frame.db');\r\ngoog.require('re_frame.fx');\r\ngoog.require('re_frame.cofx');\r\ngoog.require('re_frame.router');\r\ngoog.require('re_frame.loggers');\r\ngoog.require('re_frame.registrar');\r\ngoog.require('re_frame.interceptor');\r\ngoog.require('re_frame.std_interceptors');\r\ngoog.require('clojure.set');\r\nre_frame.core.dispatch = re_frame.router.dispatch;\r\nre_frame.core.dispatch_sync = re_frame.router.dispatch_sync;\r\nre_frame.core.reg_sub = re_frame.subs.reg_sub;\r\nre_frame.core.subscribe = re_frame.subs.subscribe;\r\nre_frame.core.clear_sub = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.subs.kind);\r\nre_frame.core.clear_subscription_cache_BANG_ = re_frame.subs.clear_subscription_cache_BANG_;\r\n/**\r\n * This is a low level, advanced function.  You should probably be\r\n *   using reg-sub instead.\r\n *   Docs in https://github.com/Day8/re-frame/blob/master/docs/SubscriptionFlow.md\r\n */\r\nre_frame.core.reg_sub_raw = (function re_frame$core$reg_sub_raw(query_id,handler_fn){\r\nreturn re_frame.registrar.register_handler(re_frame.subs.kind,query_id,handler_fn);\r\n});\r\nre_frame.core.reg_fx = re_frame.fx.reg_fx;\r\nre_frame.core.clear_fx = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.fx.kind);\r\nre_frame.core.reg_cofx = re_frame.cofx.reg_cofx;\r\nre_frame.core.inject_cofx = re_frame.cofx.inject_cofx;\r\nre_frame.core.clear_cofx = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.cofx.kind);\r\n/**\r\n * Register the given event `handler` (function) for the given `id`. Optionally, provide\r\n *   an `interceptors` chain.\r\n *   `id` is typically a namespaced keyword  (but can be anything)\r\n *   `handler` is a function: (db event) -> db\r\n *   `interceptors` is a collection of interceptors. Will be flattened and nils removed.\r\n *   `handler` is wrapped in its own interceptor and added to the end of the interceptor\r\n * chain, so that, in the end, only a chain is registered.\r\n * Special effects and coeffects interceptors are added to the front of this\r\n * chain.\r\n */\r\nre_frame.core.reg_event_db = (function re_frame$core$reg_event_db(var_args){\r\nvar G__14424 = arguments.length;\r\nswitch (G__14424) {\r\ncase 2:\r\nreturn re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\nre_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2 = (function (id,handler){\r\nreturn re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3(id,null,handler);\r\n});\r\n\r\nre_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3 = (function (id,interceptors,handler){\r\nreturn re_frame.events.register(id,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [re_frame.cofx.inject_db,re_frame.fx.do_fx,interceptors,re_frame.std_interceptors.db_handler__GT_interceptor(handler)], null));\r\n});\r\n\r\nre_frame.core.reg_event_db.cljs$lang$maxFixedArity = 3;\r\n\r\n/**\r\n * Register the given event `handler` (function) for the given `id`. Optionally, provide\r\n *   an `interceptors` chain.\r\n *   `id` is typically a namespaced keyword  (but can be anything)\r\n *   `handler` is a function: (coeffects-map event-vector) -> effects-map\r\n *   `interceptors` is a collection of interceptors. Will be flattened and nils removed.\r\n *   `handler` is wrapped in its own interceptor and added to the end of the interceptor\r\n * chain, so that, in the end, only a chain is registered.\r\n * Special effects and coeffects interceptors are added to the front of the\r\n * interceptor chain.  These interceptors inject the value of app-db into coeffects,\r\n * and, later, action effects.\r\n */\r\nre_frame.core.reg_event_fx = (function re_frame$core$reg_event_fx(var_args){\r\nvar G__14434 = arguments.length;\r\nswitch (G__14434) {\r\ncase 2:\r\nreturn re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\nre_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2 = (function (id,handler){\r\nreturn re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3(id,null,handler);\r\n});\r\n\r\nre_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3 = (function (id,interceptors,handler){\r\nreturn re_frame.events.register(id,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [re_frame.cofx.inject_db,re_frame.fx.do_fx,interceptors,re_frame.std_interceptors.fx_handler__GT_interceptor(handler)], null));\r\n});\r\n\r\nre_frame.core.reg_event_fx.cljs$lang$maxFixedArity = 3;\r\n\r\n/**\r\n * Register the given event `handler` (function) for the given `id`. Optionally, provide\r\n *   an `interceptors` chain.\r\n *   `id` is typically a namespaced keyword  (but can be anything)\r\n *   `handler` is a function: (context-map event-vector) -> context-map\r\n * \r\n *   This form of registration is almost never used. \r\n */\r\nre_frame.core.reg_event_ctx = (function re_frame$core$reg_event_ctx(var_args){\r\nvar G__14451 = arguments.length;\r\nswitch (G__14451) {\r\ncase 2:\r\nreturn re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\nre_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$2 = (function (id,handler){\r\nreturn re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3(id,null,handler);\r\n});\r\n\r\nre_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3 = (function (id,interceptors,handler){\r\nreturn re_frame.events.register(id,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [re_frame.cofx.inject_db,re_frame.fx.do_fx,interceptors,re_frame.std_interceptors.ctx_handler__GT_interceptor(handler)], null));\r\n});\r\n\r\nre_frame.core.reg_event_ctx.cljs$lang$maxFixedArity = 3;\r\n\r\nre_frame.core.clear_event = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.events.kind);\r\nre_frame.core.debug = re_frame.std_interceptors.debug;\r\nre_frame.core.path = re_frame.std_interceptors.path;\r\nre_frame.core.enrich = re_frame.std_interceptors.enrich;\r\nre_frame.core.trim_v = re_frame.std_interceptors.trim_v;\r\nre_frame.core.after = re_frame.std_interceptors.after;\r\nre_frame.core.on_changes = re_frame.std_interceptors.on_changes;\r\nre_frame.core.__GT_interceptor = re_frame.interceptor.__GT_interceptor;\r\nre_frame.core.get_coeffect = re_frame.interceptor.get_coeffect;\r\nre_frame.core.assoc_coeffect = re_frame.interceptor.assoc_coeffect;\r\nre_frame.core.get_effect = re_frame.interceptor.get_effect;\r\nre_frame.core.assoc_effect = re_frame.interceptor.assoc_effect;\r\nre_frame.core.enqueue = re_frame.interceptor.enqueue;\r\nre_frame.core.set_loggers_BANG_ = re_frame.loggers.set_loggers_BANG_;\r\nre_frame.core.console = re_frame.loggers.console;\r\n/**\r\n * Checkpoints the state of re-frame and returns a function which, when\r\n *   later called, will restore re-frame to that checkpointed state.\r\n * \r\n *   Checkpoint includes app-db, all registered handlers and all subscriptions.\r\n *   \r\n */\r\nre_frame.core.make_restore_fn = (function re_frame$core$make_restore_fn(){\r\nvar handlers = cljs.core.deref(re_frame.registrar.kind__GT_id__GT_handler);\r\nvar app_db = cljs.core.deref(re_frame.db.app_db);\r\nvar subs_cache = cljs.core.deref(re_frame.subs.query__GT_reaction);\r\nreturn ((function (handlers,app_db,subs_cache){\r\nreturn (function (){\r\nvar original_subs_14464 = cljs.core.set(cljs.core.vals(subs_cache));\r\nvar current_subs_14465 = cljs.core.set(cljs.core.vals(cljs.core.deref(re_frame.subs.query__GT_reaction)));\r\nvar seq__14460_14466 = cljs.core.seq(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(current_subs_14465,original_subs_14464));\r\nvar chunk__14461_14467 = null;\r\nvar count__14462_14468 = (0);\r\nvar i__14463_14469 = (0);\r\nwhile(true){\r\nif((i__14463_14469 < count__14462_14468)){\r\nvar sub_14470 = chunk__14461_14467.cljs$core$IIndexed$_nth$arity$2(null,i__14463_14469);\r\nre_frame.interop.dispose_BANG_(sub_14470);\r\n\r\n\r\nvar G__14471 = seq__14460_14466;\r\nvar G__14472 = chunk__14461_14467;\r\nvar G__14473 = count__14462_14468;\r\nvar G__14474 = (i__14463_14469 + (1));\r\nseq__14460_14466 = G__14471;\r\nchunk__14461_14467 = G__14472;\r\ncount__14462_14468 = G__14473;\r\ni__14463_14469 = G__14474;\r\ncontinue;\r\n} else {\r\nvar temp__5457__auto___14475 = cljs.core.seq(seq__14460_14466);\r\nif(temp__5457__auto___14475){\r\nvar seq__14460_14476__$1 = temp__5457__auto___14475;\r\nif(cljs.core.chunked_seq_QMARK_(seq__14460_14476__$1)){\r\nvar c__4351__auto___14477 = cljs.core.chunk_first(seq__14460_14476__$1);\r\nvar G__14478 = cljs.core.chunk_rest(seq__14460_14476__$1);\r\nvar G__14479 = c__4351__auto___14477;\r\nvar G__14480 = cljs.core.count(c__4351__auto___14477);\r\nvar G__14481 = (0);\r\nseq__14460_14466 = G__14478;\r\nchunk__14461_14467 = G__14479;\r\ncount__14462_14468 = G__14480;\r\ni__14463_14469 = G__14481;\r\ncontinue;\r\n} else {\r\nvar sub_14482 = cljs.core.first(seq__14460_14476__$1);\r\nre_frame.interop.dispose_BANG_(sub_14482);\r\n\r\n\r\nvar G__14488 = cljs.core.next(seq__14460_14476__$1);\r\nvar G__14489 = null;\r\nvar G__14490 = (0);\r\nvar G__14491 = (0);\r\nseq__14460_14466 = G__14488;\r\nchunk__14461_14467 = G__14489;\r\ncount__14462_14468 = G__14490;\r\ni__14463_14469 = G__14491;\r\ncontinue;\r\n}\r\n} else {\r\n}\r\n}\r\nbreak;\r\n}\r\n\r\ncljs.core.reset_BANG_(re_frame.registrar.kind__GT_id__GT_handler,handlers);\r\n\r\ncljs.core.reset_BANG_(re_frame.db.app_db,app_db);\r\n\r\nreturn null;\r\n});\r\n;})(handlers,app_db,subs_cache))\r\n});\r\n/**\r\n * Remove all events queued for processing\r\n */\r\nre_frame.core.purge_event_queue = (function re_frame$core$purge_event_queue(){\r\nreturn re_frame.router.purge(re_frame.router.event_queue);\r\n});\r\n/**\r\n * Registers a function `f` to be called after each event is processed\r\n * `f` will be called with two arguments:\r\n *  - `event`: a vector. The event just processed.\r\n *  - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\r\n * \r\n * This is useful in advanced cases like:\r\n *   - you are implementing a complex bootstrap pipeline\r\n *   - you want to create your own handling infrastructure, with perhaps multiple\r\n *     handlers for the one event, etc.  Hook in here.\r\n *   - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\r\n * \r\n *   'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\r\n *   be used at \"remove time\" to get rid of the right callback.\r\n *   \r\n */\r\nre_frame.core.add_post_event_callback = (function re_frame$core$add_post_event_callback(var_args){\r\nvar G__14496 = arguments.length;\r\nswitch (G__14496) {\r\ncase 1:\r\nreturn re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\nre_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$1 = (function (f){\r\nreturn re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2(f,f);\r\n});\r\n\r\nre_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2 = (function (id,f){\r\nreturn re_frame.router.add_post_event_callback(re_frame.router.event_queue,id,f);\r\n});\r\n\r\nre_frame.core.add_post_event_callback.cljs$lang$maxFixedArity = 2;\r\n\r\nre_frame.core.remove_post_event_callback = (function re_frame$core$remove_post_event_callback(id){\r\nreturn re_frame.router.remove_post_event_callback(re_frame.router.event_queue,id);\r\n});\r\nre_frame.core.register_handler = (function re_frame$core$register_handler(var_args){\r\nvar args__4534__auto__ = [];\r\nvar len__4531__auto___14509 = arguments.length;\r\nvar i__4532__auto___14510 = (0);\r\nwhile(true){\r\nif((i__4532__auto___14510 < len__4531__auto___14509)){\r\nargs__4534__auto__.push((arguments[i__4532__auto___14510]));\r\n\r\nvar G__14511 = (i__4532__auto___14510 + (1));\r\ni__4532__auto___14510 = G__14511;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4535__auto__ = ((((0) < args__4534__auto__.length))?(new cljs.core.IndexedSeq(args__4534__auto__.slice((0)),(0),null)):null);\r\nreturn re_frame.core.register_handler.cljs$core$IFn$_invoke$arity$variadic(argseq__4535__auto__);\r\n});\r\n\r\nre_frame.core.register_handler.cljs$core$IFn$_invoke$arity$variadic = (function (args){\r\nvar G__14502_14512 = new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552);\r\nvar G__14503_14513 = \"re-frame:  \\\"register-handler\\\" has been renamed \\\"reg-event-db\\\" (look for registration of\";\r\nvar G__14504_14514 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(args))].join('');\r\nvar G__14505_14515 = \")\";\r\n(re_frame.core.console.cljs$core$IFn$_invoke$arity$4 ? re_frame.core.console.cljs$core$IFn$_invoke$arity$4(G__14502_14512,G__14503_14513,G__14504_14514,G__14505_14515) : re_frame.core.console.call(null,G__14502_14512,G__14503_14513,G__14504_14514,G__14505_14515));\r\n\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(re_frame.core.reg_event_db,args);\r\n});\r\n\r\nre_frame.core.register_handler.cljs$lang$maxFixedArity = (0);\r\n\r\n/** @this {Function} */\r\nre_frame.core.register_handler.cljs$lang$applyTo = (function (seq14501){\r\nvar self__4519__auto__ = this;\r\nreturn self__4519__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq14501));\r\n});\r\n\r\nre_frame.core.register_sub = (function re_frame$core$register_sub(var_args){\r\nvar args__4534__auto__ = [];\r\nvar len__4531__auto___14522 = arguments.length;\r\nvar i__4532__auto___14523 = (0);\r\nwhile(true){\r\nif((i__4532__auto___14523 < len__4531__auto___14522)){\r\nargs__4534__auto__.push((arguments[i__4532__auto___14523]));\r\n\r\nvar G__14524 = (i__4532__auto___14523 + (1));\r\ni__4532__auto___14523 = G__14524;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4535__auto__ = ((((0) < args__4534__auto__.length))?(new cljs.core.IndexedSeq(args__4534__auto__.slice((0)),(0),null)):null);\r\nreturn re_frame.core.register_sub.cljs$core$IFn$_invoke$arity$variadic(argseq__4535__auto__);\r\n});\r\n\r\nre_frame.core.register_sub.cljs$core$IFn$_invoke$arity$variadic = (function (args){\r\nvar G__14518_14525 = new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552);\r\nvar G__14519_14526 = \"re-frame:  \\\"register-sub\\\" is deprecated. Use \\\"reg-sub-raw\\\" (look for registration of\";\r\nvar G__14520_14527 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(args))].join('');\r\nvar G__14521_14528 = \")\";\r\n(re_frame.core.console.cljs$core$IFn$_invoke$arity$4 ? re_frame.core.console.cljs$core$IFn$_invoke$arity$4(G__14518_14525,G__14519_14526,G__14520_14527,G__14521_14528) : re_frame.core.console.call(null,G__14518_14525,G__14519_14526,G__14520_14527,G__14521_14528));\r\n\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(re_frame.core.reg_sub_raw,args);\r\n});\r\n\r\nre_frame.core.register_sub.cljs$lang$maxFixedArity = (0);\r\n\r\n/** @this {Function} */\r\nre_frame.core.register_sub.cljs$lang$applyTo = (function (seq14517){\r\nvar self__4519__auto__ = this;\r\nreturn self__4519__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq14517));\r\n});\r\n\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/core.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",18],"~:ns-aliases",["^ ","~$clojure.pprint","~$cljs.pprint","~$clojure.repl","~$cljs.repl","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.core","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.interop","^M","~$subs","~$re-frame.subs","~$set","~$clojure.set","~$cofx","~$re-frame.cofx","~$re-frame.interceptor","^T","~$fx","~$re-frame.fx","~$re-frame.events","^W","~$loggers","~$re-frame.loggers","^V","^V","~$re-frame.registrar","^Z","~$cljs.core","^[","~$interceptor","^T","~$goog","^11","~$router","~$re-frame.router","~$db","~$re-frame.db","~$registrar","^Z","^13","^13","^Q","^Q","~$events","^W","~$re-frame.std-interceptors","^18","^Y","^Y","^O","^O","~$interop","^M","~$std-interceptors","^18","^S","^S","^15","^15"],"~:seen",["^F",["~:require"]],"~:uses",["^ ","~$db-handler->interceptor","^18","~$fx-handler->interceptor","^18","~$ctx-handler->interceptor","^18"],"~:require-macros",["^ ","^[","^["],"~:form",["~#list",["~$ns","^H",["^1C",["^1<",["^W","~:as","^17"],["^O","^1E","^N"],["^M","^1E","^19"],["^15","^1E","^14"],["^V","^1E","^U"],["^S","^1E","^R"],["^13","^1E","^12"],["^Y","^1E","^X"],["^Z","^1E","^16"],["^T","^1E","^10"],["^18","^1E","^1:","~:refer",["^1>","^1?","^1@"]],["^Q","^1E","^P"]]]]],"~:flags",["^ ","^1<",["^F",[]]],"~:js-deps",["^ "],"~:deps",["^11","^[","^W","^O","^M","^15","^V","^S","^13","^Y","^Z","^T","^18","^Q"]],"^J","^H","~:resource-id",["~:shadow.build.classpath/resource","re_frame/core.cljc"],"~:compiled-at",1533407587744,"~:resource-name","re_frame/core.cljc","~:warnings",[],"~:source","(ns re-frame.core\n  (:require\n    [re-frame.events           :as events]\n    [re-frame.subs             :as subs]\n    [re-frame.interop          :as interop]\n    [re-frame.db               :as db]\n    [re-frame.fx               :as fx]\n    [re-frame.cofx             :as cofx]\n    [re-frame.router           :as router]\n    [re-frame.loggers          :as loggers]\n    [re-frame.registrar        :as registrar]\n    [re-frame.interceptor      :as interceptor]\n    [re-frame.std-interceptors :as std-interceptors :refer [db-handler->interceptor\n                                                             fx-handler->interceptor\n                                                             ctx-handler->interceptor]]\n    [clojure.set               :as set]))\n\n\n;; -- API ---------------------------------------------------------------------\n;;\n;; This namespace represents the re-frame API\n;;\n;; Below, you'll see we've used this technique:\n;;   (def  api-name-for-fn    deeper.namespace/where-the-defn-is)\n;;\n;; So, we promote a `defn` in a deeper namespace \"up\" to the API\n;; via a `def` in this namespace.\n;;\n;; Turns out, this approach makes it hard:\n;;   - to auto-generate API docs\n;;   - for IDEs to provide code completion on functions in the API\n;;\n;; Which is annoying. But there are pros and cons and we haven't\n;; yet revisited the decision.  To compensate, we've added more nudity\n;; to the docs.\n;;\n\n\n;; -- dispatch ----------------------------------------------------------------\n(def dispatch       router/dispatch)\n(def dispatch-sync  router/dispatch-sync)\n\n\n;; -- subscriptions -----------------------------------------------------------\n(def reg-sub        subs/reg-sub)\n(def subscribe      subs/subscribe)\n\n(def clear-sub (partial registrar/clear-handlers subs/kind))  ;; think unreg-sub\n(def clear-subscription-cache! subs/clear-subscription-cache!)\n\n(defn reg-sub-raw\n  \"This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/Day8/re-frame/blob/master/docs/SubscriptionFlow.md\"\n  [query-id handler-fn]\n  (registrar/register-handler subs/kind query-id handler-fn))\n\n\n;; -- effects -----------------------------------------------------------------\n(def reg-fx      fx/reg-fx)\n(def clear-fx    (partial registrar/clear-handlers fx/kind))  ;; think unreg-fx\n\n;; -- coeffects ---------------------------------------------------------------\n(def reg-cofx    cofx/reg-cofx)\n(def inject-cofx cofx/inject-cofx)\n(def clear-cofx (partial registrar/clear-handlers cofx/kind)) ;; think unreg-cofx\n\n\n;; -- Events ------------------------------------------------------------------\n\n(defn reg-event-db\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain.\"\n  ([id handler]\n    (reg-event-db id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx interceptors (db-handler->interceptor handler)])))\n\n\n(defn reg-event-fx\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects.\"\n  ([id handler]\n   (reg-event-fx id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx interceptors (fx-handler->interceptor handler)])))\n\n\n(defn reg-event-ctx\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. \"\n  ([id handler]\n   (reg-event-ctx id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx interceptors (ctx-handler->interceptor handler)])))\n\n(def clear-event (partial registrar/clear-handlers events/kind)) ;; think unreg-event-*\n\n;; -- interceptors ------------------------------------------------------------\n\n;; Standard interceptors.\n;; Detailed docs on each in std-interceptors.cljs\n(def debug       std-interceptors/debug)\n(def path        std-interceptors/path)\n(def enrich      std-interceptors/enrich)\n(def trim-v      std-interceptors/trim-v)\n(def after       std-interceptors/after)\n(def on-changes  std-interceptors/on-changes)\n\n\n;; Utility functions for creating your own interceptors\n;;\n;;  (def my-interceptor\n;;     (->interceptor                ;; used to create an interceptor\n;;       :id     :my-interceptor     ;; an id - decorative only\n;;       :before (fn [context]                         ;; you normally want to change :coeffects\n;;                  ... use get-coeffect  and assoc-coeffect\n;;                       )\n;;       :after  (fn [context]                         ;; you normally want to change :effects\n;;                 (let [db (get-effect context :db)]  ;; (get-in context [:effects :db])\n;;                   (assoc-effect context :http-ajax {...}])))))\n;;\n(def ->interceptor   interceptor/->interceptor)\n(def get-coeffect    interceptor/get-coeffect)\n(def assoc-coeffect  interceptor/assoc-coeffect)\n(def get-effect      interceptor/get-effect)\n(def assoc-effect    interceptor/assoc-effect)\n(def enqueue         interceptor/enqueue)\n\n\n;; --  logging ----------------------------------------------------------------\n;; Internally, re-frame uses the logging functions: warn, log, error, group and groupEnd\n;; By default, these functions map directly to the js/console implementations,\n;; but you can override with your own fns (set or subset).\n;; Example Usage:\n;;   (defn my-fn [& args]  (post-it-somewhere (apply str args)))  ;; here is my alternative\n;;   (re-frame.core/set-loggers!  {:warn my-fn :log my-fn})       ;; override the defaults with mine\n(def set-loggers! loggers/set-loggers!)\n\n;; If you are writing an extension to re-frame, like perhaps\n;; an effects handler, you may want to use re-frame logging.\n;;\n;; usage: (console :error \"Oh, dear God, it happened: \" a-var \" and \" another)\n;;        (console :warn \"Possible breach of containment wall at: \" dt)\n(def console loggers/console)\n\n\n;; -- unit testing ------------------------------------------------------------\n\n(defn make-restore-fn\n  \"Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  \"\n  []\n  (let [handlers @registrar/kind->id->handler\n        app-db   @db/app-db\n\t\t\t\tsubs-cache @subs/query->reaction]\n    (fn []\n\t\t\t;; call `dispose!` on all current subscriptions which\n\t\t\t;; didn't originally exist.\n      (let [original-subs (set (vals subs-cache))\n            current-subs  (set (vals @subs/query->reaction))]\n        (doseq [sub (set/difference current-subs original-subs)]\n          (interop/dispose! sub)))\n\n      ;; Reset the atoms\n      ;; We don't need to reset subs/query->reaction, as\n      ;; disposing of the subs removes them from the cache anyway\n      (reset! registrar/kind->id->handler handlers)\n      (reset! db/app-db app-db)\n      nil)))\n\n(defn purge-event-queue\n  \"Remove all events queued for processing\"\n  []\n  (router/purge re-frame.router/event-queue))\n\n;; -- Event Processing Callbacks  ---------------------------------------------\n\n(defn add-post-event-callback\n  \"Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \\\"add time\\\" so it can subsequently\n  be used at \\\"remove time\\\" to get rid of the right callback.\n  \"\n  ([f]\n   (add-post-event-callback f f))   ;; use f as its own identifier\n  ([id f]\n   (router/add-post-event-callback re-frame.router/event-queue id f)))\n\n\n(defn remove-post-event-callback\n  [id]\n  (router/remove-post-event-callback re-frame.router/event-queue id))\n\n\n;; --  Deprecation ------------------------------------------------------------\n;; Assisting the v0.7.x ->  v0.8.x transition.\n(defn register-handler\n  [& args]\n  (console :warn  \"re-frame:  \\\"register-handler\\\" has been renamed \\\"reg-event-db\\\" (look for registration of\" (str (first args)) \")\")\n  (apply reg-event-db args))\n\n(defn register-sub\n  [& args]\n  (console :warn  \"re-frame:  \\\"register-sub\\\" is deprecated. Use \\\"reg-sub-raw\\\" (look for registration of\" (str (first args)) \")\")\n  (apply reg-sub-raw args))\n","~:reader-features",["^F",["~:cljs"]],"~:source-map",["^ ","~i39",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",14]],"~i5",[["^ ","^1T",0,"^1U",14,"^G","re-frame.core/dispatch"]],"~i20",[["^ ","^1T",25,"^1U",14,"^G","re-frame.router/dispatch"]]],"~i40",["^ ","~i0",[["^ ","^1T",0,"^1U",15]],"~i5",[["^ ","^1T",0,"^1U",15,"^G","re-frame.core/dispatch-sync"]],"^1V",[["^ ","^1T",30,"^1U",15,"^G","re-frame.router/dispatch-sync"]]],"~i44",["^ ","~i0",[["^ ","^1T",0,"^1U",16]],"~i5",[["^ ","^1T",0,"^1U",16,"^G","re-frame.core/reg-sub"]],"^1V",[["^ ","^1T",24,"^1U",16,"^G","re-frame.subs/reg-sub"]]],"~i45",["^ ","~i0",[["^ ","^1T",0,"^1U",17]],"~i5",[["^ ","^1T",0,"^1U",17,"^G","re-frame.core/subscribe"]],"^1V",[["^ ","^1T",26,"^1U",17,"^G","re-frame.subs/subscribe"]]],"~i47",["^ ","~i0",[["^ ","^1T",0,"^1U",18]],"~i5",[["^ ","^1T",0,"^1U",18,"^G","re-frame.core/clear-sub"]],"~i15",[["^ ","^1T",26,"^1U",18]],"~i16",[["^ ","^1T",26,"^1U",18,"^G","cljs.core.partial.cljs$core$IFn$_invoke$arity$2"]],"~i24",[["^ ","^1T",74,"^1U",18,"^G","re-frame.registrar/clear-handlers"]],"~i49",[["^ ","^1T",108,"^1U",18,"^G","re-frame.subs/kind"]]],"~i48",["^ ","~i0",[["^ ","^1T",0,"^1U",19]],"~i5",[["^ ","^1T",0,"^1U",19,"^G","re-frame.core/clear-subscription-cache!"]],"~i31",[["^ ","^1T",47,"^1U",19,"^G","re-frame.subs/clear-subscription-cache!"]]],"~i50",["^ ","~i0",[["^ ","^1T",0,"^1U",20],["^ ","^1T",28,"^1U",25],["^ ","^1T",0,"^1U",26]],"~i6",[["^ ","^1T",0,"^1U",25,"^G","re-frame.core/reg-sub-raw"]]],"~i54",["^ ","~i3",[["^ ","^1T",64,"^1U",25,"^G","query-id"]],"~i12",[["^ ","^1T",73,"^1U",25,"^G","handler-fn"]]],"~i55",["^ ","~i2",[["^ ","^1T",0,"^1U",26]],"~i3",[["^ ","^1T",7,"^1U",26,"^G","re-frame.registrar/register-handler"]],"~i30",[["^ ","^1T",43,"^1U",26,"^G","re-frame.subs/kind"]],"^1W",[["^ ","^1T",62,"^1U",26,"^G","query-id"]],"^22",[["^ ","^1T",71,"^1U",26,"^G","handler-fn"]]],"~i59",["^ ","~i0",[["^ ","^1T",0,"^1U",28]],"~i5",[["^ ","^1T",0,"^1U",28,"^G","re-frame.core/reg-fx"]],"~i17",[["^ ","^1T",23,"^1U",28,"^G","re-frame.fx/reg-fx"]]],"~i60",["^ ","~i0",[["^ ","^1T",0,"^1U",29]],"~i5",[["^ ","^1T",0,"^1U",29,"^G","re-frame.core/clear-fx"]],"^2;",[["^ ","^1T",25,"^1U",29]],"~i18",[["^ ","^1T",25,"^1U",29,"^G","cljs.core.partial.cljs$core$IFn$_invoke$arity$2"]],"~i26",[["^ ","^1T",73,"^1U",29,"^G","re-frame.registrar/clear-handlers"]],"~i51",[["^ ","^1T",107,"^1U",29,"^G","re-frame.fx/kind"]]],"~i63",["^ ","~i0",[["^ ","^1T",0,"^1U",30]],"~i5",[["^ ","^1T",0,"^1U",30,"^G","re-frame.core/reg-cofx"]],"^2;",[["^ ","^1T",25,"^1U",30,"^G","re-frame.cofx/reg-cofx"]]],"~i64",["^ ","~i0",[["^ ","^1T",0,"^1U",31]],"~i5",[["^ ","^1T",0,"^1U",31,"^G","re-frame.core/inject-cofx"]],"^2;",[["^ ","^1T",28,"^1U",31,"^G","re-frame.cofx/inject-cofx"]]],"~i65",["^ ","~i0",[["^ ","^1T",0,"^1U",32]],"~i5",[["^ ","^1T",0,"^1U",32,"^G","re-frame.core/clear-cofx"]],"^20",[["^ ","^1T",27,"^1U",32]],"^2;",[["^ ","^1T",27,"^1U",32,"^G","cljs.core.partial.cljs$core$IFn$_invoke$arity$2"]],"~i25",[["^ ","^1T",75,"^1U",32,"^G","re-frame.registrar/clear-handlers"]],"^25",[["^ ","^1T",109,"^1U",32,"^G","re-frame.cofx/kind"]]],"~i70",["^ ","~i0",[["^ ","^1T",0,"^1U",33],["^ ","^1T",0,"^1U",33],["^ ","^1T",29,"^1U",44],["^ ","^1T",66,"^1U",44,"^G","var_args"],["^ ","^1T",0,"^1U",45],["^ ","^1T",0,"^1U",45],["^ ","^1T",4,"^1U",45,"^G","G__14424"],["^ ","^1T",15,"^1U",45],["^ ","^1T",15,"^1U",45],["^ ","^1T",0,"^1U",46],["^ ","^1T",0,"^1U",46],["^ ","^1T",8,"^1U",46,"^G","G__14424"],["^ ","^1T",5,"^1U",47],["^ ","^1T",0,"^1U",48],["^ ","^1T",7,"^1U",48,"^G","re-frame.core/reg-event-db"],["^ ","^1T",64,"^1U",48],["^ ","^1T",65,"^1U",48],["^ ","^1T",75,"^1U",48],["^ ","^1T",81,"^1U",48],["^ ","^1T",82,"^1U",48],["^ ","^1T",92,"^1U",48],["^ ","^1T",5,"^1U",51],["^ ","^1T",0,"^1U",52],["^ ","^1T",7,"^1U",52,"^G","re-frame.core/reg-event-db"],["^ ","^1T",64,"^1U",52],["^ ","^1T",65,"^1U",52],["^ ","^1T",75,"^1U",52],["^ ","^1T",81,"^1U",52],["^ ","^1T",82,"^1U",52],["^ ","^1T",92,"^1U",52],["^ ","^1T",98,"^1U",52],["^ ","^1T",99,"^1U",52],["^ ","^1T",109,"^1U",52],["^ ","^1T",0,"^1U",56],["^ ","^1T",6,"^1U",56],["^ ","^1T",11,"^1U",56,"^G","js/Error"],["^ ","^1T",17,"^1U",56],["^ ","^1T",18,"^1U",56],["^ ","^1T",80,"^1U",56],["^ ","^1T",80,"^1U",56],["^ ","^1T",0,"^1U",61],["^ ","^1T",0,"^1U",61],["^ ","^1T",59,"^1U",61],["^ ","^1T",0,"^1U",62],["^ ","^1T",0,"^1U",65],["^ ","^1T",0,"^1U",65],["^ ","^1T",59,"^1U",65],["^ ","^1T",0,"^1U",66],["^ ","^1T",0,"^1U",69],["^ ","^1T",0,"^1U",69],["^ ","^1T",53,"^1U",69],["^ ","^1T",0,"^1U",71]],"~i6",[["^ ","^1T",0,"^1U",44,"^G","re-frame.core/reg-event-db"],["^ ","^1T",0,"^1U",61,"^G","re-frame.core/reg-event-db"],["^ ","^1T",0,"^1U",65,"^G","re-frame.core/reg-event-db"],["^ ","^1T",0,"^1U",69,"^G","re-frame.core/reg-event-db"]]],"~i80",["^ ","~i4",[["^ ","^1T",70,"^1U",61,"^G","id"]],"~i7",[["^ ","^1T",73,"^1U",61,"^G","handler"]]],"~i81",["^ ","~i4",[["^ ","^1T",0,"^1U",62],["^ ","^1T",67,"^1U",62]],"~i5",[["^ ","^1T",7,"^1U",62,"^G","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3"]],"^2=",[["^ ","^1T",64,"^1U",62,"^G","id"]],"^2C",[["^ ","^1T",72,"^1U",62,"^G","handler"]]],"~i82",["^ ","~i4",[["^ ","^1T",70,"^1U",65,"^G","id"]],"~i7",[["^ ","^1T",73,"^1U",65,"^G","interceptors"]],"^1V",[["^ ","^1T",86,"^1U",65,"^G","handler"]]],"~i83",["^ ","~i3",[["^ ","^1T",0,"^1U",66],["^ ","^1T",35,"^1U",66]],"~i4",[["^ ","^1T",7,"^1U",66,"^G","re-frame.events/register"]],"^1V",[["^ ","^1T",32,"^1U",66,"^G","id"]],"^21",[["^ ","^1T",118,"^1U",66,"^G","re-frame.cofx/inject-db"]],"^1S",[["^ ","^1T",142,"^1U",66,"^G","re-frame.fx/do-fx"]],"^23",[["^ ","^1T",160,"^1U",66,"^G","interceptors"]],"~i61",[["^ ","^1T",173,"^1U",66]],"~i62",[["^ ","^1T",173,"^1U",66,"^G","re-frame.std-interceptors/db-handler->interceptor"]],"~i86",[["^ ","^1T",226,"^1U",66,"^G","handler"]]],"^2K",["^ ","~i0",[["^ ","^1T",0,"^1U",71],["^ ","^1T",0,"^1U",71],["^ ","^1T",29,"^1U",83],["^ ","^1T",66,"^1U",83,"^G","var_args"],["^ ","^1T",0,"^1U",84],["^ ","^1T",0,"^1U",84],["^ ","^1T",4,"^1U",84,"^G","G__14434"],["^ ","^1T",15,"^1U",84],["^ ","^1T",15,"^1U",84],["^ ","^1T",0,"^1U",85],["^ ","^1T",0,"^1U",85],["^ ","^1T",8,"^1U",85,"^G","G__14434"],["^ ","^1T",5,"^1U",86],["^ ","^1T",0,"^1U",87],["^ ","^1T",7,"^1U",87,"^G","re-frame.core/reg-event-fx"],["^ ","^1T",64,"^1U",87],["^ ","^1T",65,"^1U",87],["^ ","^1T",75,"^1U",87],["^ ","^1T",81,"^1U",87],["^ ","^1T",82,"^1U",87],["^ ","^1T",92,"^1U",87],["^ ","^1T",5,"^1U",90],["^ ","^1T",0,"^1U",91],["^ ","^1T",7,"^1U",91,"^G","re-frame.core/reg-event-fx"],["^ ","^1T",64,"^1U",91],["^ ","^1T",65,"^1U",91],["^ ","^1T",75,"^1U",91],["^ ","^1T",81,"^1U",91],["^ ","^1T",82,"^1U",91],["^ ","^1T",92,"^1U",91],["^ ","^1T",98,"^1U",91],["^ ","^1T",99,"^1U",91],["^ ","^1T",109,"^1U",91],["^ ","^1T",0,"^1U",95],["^ ","^1T",6,"^1U",95],["^ ","^1T",11,"^1U",95,"^G","js/Error"],["^ ","^1T",17,"^1U",95],["^ ","^1T",18,"^1U",95],["^ ","^1T",80,"^1U",95],["^ ","^1T",80,"^1U",95],["^ ","^1T",0,"^1U",100],["^ ","^1T",0,"^1U",100],["^ ","^1T",59,"^1U",100],["^ ","^1T",0,"^1U",101],["^ ","^1T",0,"^1U",104],["^ ","^1T",0,"^1U",104],["^ ","^1T",59,"^1U",104],["^ ","^1T",0,"^1U",105],["^ ","^1T",0,"^1U",108],["^ ","^1T",0,"^1U",108],["^ ","^1T",53,"^1U",108],["^ ","^1T",0,"^1U",110]],"~i6",[["^ ","^1T",0,"^1U",83,"^G","re-frame.core/reg-event-fx"],["^ ","^1T",0,"^1U",100,"^G","re-frame.core/reg-event-fx"],["^ ","^1T",0,"^1U",104,"^G","re-frame.core/reg-event-fx"],["^ ","^1T",0,"^1U",108,"^G","re-frame.core/reg-event-fx"]]],"~i97",["^ ","~i4",[["^ ","^1T",70,"^1U",100,"^G","id"]],"~i7",[["^ ","^1T",73,"^1U",100,"^G","handler"]]],"~i98",["^ ","~i3",[["^ ","^1T",0,"^1U",101],["^ ","^1T",67,"^1U",101]],"~i4",[["^ ","^1T",7,"^1U",101,"^G","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3"]],"^2;",[["^ ","^1T",64,"^1U",101,"^G","id"]],"^21",[["^ ","^1T",72,"^1U",101,"^G","handler"]]],"~i99",["^ ","~i4",[["^ ","^1T",70,"^1U",104,"^G","id"]],"~i7",[["^ ","^1T",73,"^1U",104,"^G","interceptors"]],"^1V",[["^ ","^1T",86,"^1U",104,"^G","handler"]]],"~i100",["^ ","~i3",[["^ ","^1T",0,"^1U",105],["^ ","^1T",35,"^1U",105]],"~i4",[["^ ","^1T",7,"^1U",105,"^G","re-frame.events/register"]],"^1V",[["^ ","^1T",32,"^1U",105,"^G","id"]],"^21",[["^ ","^1T",118,"^1U",105,"^G","re-frame.cofx/inject-db"]],"^1S",[["^ ","^1T",142,"^1U",105,"^G","re-frame.fx/do-fx"]],"^23",[["^ ","^1T",160,"^1U",105,"^G","interceptors"]],"^2I",[["^ ","^1T",173,"^1U",105]],"^2J",[["^ ","^1T",173,"^1U",105,"^G","re-frame.std-interceptors/fx-handler->interceptor"]],"^2K",[["^ ","^1T",226,"^1U",105,"^G","handler"]]],"~i103",["^ ","~i0",[["^ ","^1T",0,"^1U",110],["^ ","^1T",0,"^1U",110],["^ ","^1T",30,"^1U",118],["^ ","^1T",68,"^1U",118,"^G","var_args"],["^ ","^1T",0,"^1U",119],["^ ","^1T",0,"^1U",119],["^ ","^1T",4,"^1U",119,"^G","G__14451"],["^ ","^1T",15,"^1U",119],["^ ","^1T",15,"^1U",119],["^ ","^1T",0,"^1U",120],["^ ","^1T",0,"^1U",120],["^ ","^1T",8,"^1U",120,"^G","G__14451"],["^ ","^1T",5,"^1U",121],["^ ","^1T",0,"^1U",122],["^ ","^1T",7,"^1U",122,"^G","re-frame.core/reg-event-ctx"],["^ ","^1T",65,"^1U",122],["^ ","^1T",66,"^1U",122],["^ ","^1T",76,"^1U",122],["^ ","^1T",82,"^1U",122],["^ ","^1T",83,"^1U",122],["^ ","^1T",93,"^1U",122],["^ ","^1T",5,"^1U",125],["^ ","^1T",0,"^1U",126],["^ ","^1T",7,"^1U",126,"^G","re-frame.core/reg-event-ctx"],["^ ","^1T",65,"^1U",126],["^ ","^1T",66,"^1U",126],["^ ","^1T",76,"^1U",126],["^ ","^1T",82,"^1U",126],["^ ","^1T",83,"^1U",126],["^ ","^1T",93,"^1U",126],["^ ","^1T",99,"^1U",126],["^ ","^1T",100,"^1U",126],["^ ","^1T",110,"^1U",126],["^ ","^1T",0,"^1U",130],["^ ","^1T",6,"^1U",130],["^ ","^1T",11,"^1U",130,"^G","js/Error"],["^ ","^1T",17,"^1U",130],["^ ","^1T",18,"^1U",130],["^ ","^1T",80,"^1U",130],["^ ","^1T",80,"^1U",130],["^ ","^1T",0,"^1U",135],["^ ","^1T",0,"^1U",135],["^ ","^1T",60,"^1U",135],["^ ","^1T",0,"^1U",136],["^ ","^1T",0,"^1U",139],["^ ","^1T",0,"^1U",139],["^ ","^1T",60,"^1U",139],["^ ","^1T",0,"^1U",140],["^ ","^1T",0,"^1U",143],["^ ","^1T",0,"^1U",143],["^ ","^1T",54,"^1U",143],["^ ","^1T",0,"^1U",145]],"~i6",[["^ ","^1T",0,"^1U",118,"^G","re-frame.core/reg-event-ctx"],["^ ","^1T",0,"^1U",135,"^G","re-frame.core/reg-event-ctx"],["^ ","^1T",0,"^1U",139,"^G","re-frame.core/reg-event-ctx"],["^ ","^1T",0,"^1U",143,"^G","re-frame.core/reg-event-ctx"]]],"~i110",["^ ","~i4",[["^ ","^1T",71,"^1U",135,"^G","id"]],"~i7",[["^ ","^1T",74,"^1U",135,"^G","handler"]]],"~i111",["^ ","~i3",[["^ ","^1T",0,"^1U",136],["^ ","^1T",68,"^1U",136]],"~i4",[["^ ","^1T",7,"^1U",136,"^G","re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3"]],"^2=",[["^ ","^1T",65,"^1U",136,"^G","id"]],"^2C",[["^ ","^1T",73,"^1U",136,"^G","handler"]]],"~i112",["^ ","~i4",[["^ ","^1T",71,"^1U",139,"^G","id"]],"~i7",[["^ ","^1T",74,"^1U",139,"^G","interceptors"]],"^1V",[["^ ","^1T",87,"^1U",139,"^G","handler"]]],"~i113",["^ ","~i3",[["^ ","^1T",0,"^1U",140],["^ ","^1T",35,"^1U",140]],"~i4",[["^ ","^1T",7,"^1U",140,"^G","re-frame.events/register"]],"^1V",[["^ ","^1T",32,"^1U",140,"^G","id"]],"^21",[["^ ","^1T",118,"^1U",140,"^G","re-frame.cofx/inject-db"]],"^1S",[["^ ","^1T",142,"^1U",140,"^G","re-frame.fx/do-fx"]],"^23",[["^ ","^1T",160,"^1U",140,"^G","interceptors"]],"^2I",[["^ ","^1T",173,"^1U",140]],"^2J",[["^ ","^1T",173,"^1U",140,"^G","re-frame.std-interceptors/ctx-handler->interceptor"]],"~i87",[["^ ","^1T",227,"^1U",140,"^G","handler"]]],"~i115",["^ ","~i0",[["^ ","^1T",0,"^1U",145]],"~i5",[["^ ","^1T",0,"^1U",145,"^G","re-frame.core/clear-event"]],"^2;",[["^ ","^1T",28,"^1U",145]],"^2=",[["^ ","^1T",28,"^1U",145,"^G","cljs.core.partial.cljs$core$IFn$_invoke$arity$2"]],"^2>",[["^ ","^1T",76,"^1U",145,"^G","re-frame.registrar/clear-handlers"]],"^2?",[["^ ","^1T",110,"^1U",145,"^G","re-frame.events/kind"]]],"~i121",["^ ","~i0",[["^ ","^1T",0,"^1U",146]],"~i5",[["^ ","^1T",0,"^1U",146,"^G","re-frame.core/debug"]],"^2;",[["^ ","^1T",22,"^1U",146,"^G","re-frame.std-interceptors/debug"]]],"~i122",["^ ","~i0",[["^ ","^1T",0,"^1U",147]],"~i5",[["^ ","^1T",0,"^1U",147,"^G","re-frame.core/path"]],"^2;",[["^ ","^1T",21,"^1U",147,"^G","re-frame.std-interceptors/path"]]],"~i123",["^ ","~i0",[["^ ","^1T",0,"^1U",148]],"~i5",[["^ ","^1T",0,"^1U",148,"^G","re-frame.core/enrich"]],"^2;",[["^ ","^1T",23,"^1U",148,"^G","re-frame.std-interceptors/enrich"]]],"~i124",["^ ","~i0",[["^ ","^1T",0,"^1U",149]],"~i5",[["^ ","^1T",0,"^1U",149,"^G","re-frame.core/trim-v"]],"^2;",[["^ ","^1T",23,"^1U",149,"^G","re-frame.std-interceptors/trim-v"]]],"~i125",["^ ","~i0",[["^ ","^1T",0,"^1U",150]],"~i5",[["^ ","^1T",0,"^1U",150,"^G","re-frame.core/after"]],"^2;",[["^ ","^1T",22,"^1U",150,"^G","re-frame.std-interceptors/after"]]],"~i126",["^ ","~i0",[["^ ","^1T",0,"^1U",151]],"~i5",[["^ ","^1T",0,"^1U",151,"^G","re-frame.core/on-changes"]],"^2;",[["^ ","^1T",27,"^1U",151,"^G","re-frame.std-interceptors/on-changes"]]],"~i141",["^ ","~i0",[["^ ","^1T",0,"^1U",152]],"~i5",[["^ ","^1T",0,"^1U",152,"^G","re-frame.core/->interceptor"]],"~i21",[["^ ","^1T",33,"^1U",152,"^G","re-frame.interceptor/->interceptor"]]],"~i142",["^ ","~i0",[["^ ","^1T",0,"^1U",153]],"~i5",[["^ ","^1T",0,"^1U",153,"^G","re-frame.core/get-coeffect"]],"^32",[["^ ","^1T",29,"^1U",153,"^G","re-frame.interceptor/get-coeffect"]]],"~i143",["^ ","~i0",[["^ ","^1T",0,"^1U",154]],"~i5",[["^ ","^1T",0,"^1U",154,"^G","re-frame.core/assoc-coeffect"]],"^32",[["^ ","^1T",31,"^1U",154,"^G","re-frame.interceptor/assoc-coeffect"]]],"~i144",["^ ","~i0",[["^ ","^1T",0,"^1U",155]],"~i5",[["^ ","^1T",0,"^1U",155,"^G","re-frame.core/get-effect"]],"^32",[["^ ","^1T",27,"^1U",155,"^G","re-frame.interceptor/get-effect"]]],"~i145",["^ ","~i0",[["^ ","^1T",0,"^1U",156]],"~i5",[["^ ","^1T",0,"^1U",156,"^G","re-frame.core/assoc-effect"]],"^32",[["^ ","^1T",29,"^1U",156,"^G","re-frame.interceptor/assoc-effect"]]],"~i146",["^ ","~i0",[["^ ","^1T",0,"^1U",157]],"~i5",[["^ ","^1T",0,"^1U",157,"^G","re-frame.core/enqueue"]],"^32",[["^ ","^1T",24,"^1U",157,"^G","re-frame.interceptor/enqueue"]]],"~i156",["^ ","~i0",[["^ ","^1T",0,"^1U",158]],"~i5",[["^ ","^1T",0,"^1U",158,"^G","re-frame.core/set-loggers!"]],"^2=",[["^ ","^1T",34,"^1U",158,"^G","re-frame.loggers/set-loggers!"]]],"~i163",["^ ","~i0",[["^ ","^1T",0,"^1U",159]],"~i5",[["^ ","^1T",0,"^1U",159,"^G","re-frame.core/console"]],"~i13",[["^ ","^1T",24,"^1U",159,"^G","re-frame.loggers/console"]]],"~i168",["^ ","~i0",[["^ ","^1T",0,"^1U",160],["^ ","^1T",32,"^1U",167],["^ ","^1T",0,"^1U",168]],"~i6",[["^ ","^1T",0,"^1U",167,"^G","re-frame.core/make-restore-fn"]]],"~i175",["^ ","~i2",[["^ ","^1T",0,"^1U",168],["^ ","^1T",15,"^1U",168],["^ ","^1T",15,"^1U",168,"^G","cljs.core/deref"],["^ ","^1T",13,"^1U",169],["^ ","^1T",13,"^1U",169,"^G","cljs.core/deref"],["^ ","^1T",17,"^1U",170],["^ ","^1T",17,"^1U",170,"^G","cljs.core/deref"],["^ ","^1T",0,"^1U",171]],"~i8",[["^ ","^1T",4,"^1U",168,"^G","handlers"]],"^2=",[["^ ","^1T",31,"^1U",168,"^G","re-frame.registrar/kind->id->handler"]]],"~i176",["^ ","~i8",[["^ ","^1T",4,"^1U",169,"^G","app-db"]],"^2=",[["^ ","^1T",29,"^1U",169,"^G","re-frame.db/app-db"]]],"~i177",["^ ","~i4",[["^ ","^1T",4,"^1U",170,"^G","subs-cache"]],"^20",[["^ ","^1T",33,"^1U",170,"^G","re-frame.subs/query->reaction"]]],"~i178",["^ ","~i4",[["^ ","^1T",0,"^1U",171],["^ ","^1T",0,"^1U",173],["^ ","^1T",0,"^1U",234]]],"~i181",["^ ","~i6",[["^ ","^1T",0,"^1U",173],["^ ","^1T",0,"^1U",175]],"^27",[["^ ","^1T",4,"^1U",173,"^G","original-subs"]],"^2>",[["^ ","^1T",26,"^1U",173]],"~i27",[["^ ","^1T",26,"^1U",173,"^G","cljs.core/set"]],"^24",[["^ ","^1T",40,"^1U",173]],"~i32",[["^ ","^1T",40,"^1U",173,"^G","cljs.core/vals"]],"~i37",[["^ ","^1T",55,"^1U",173,"^G","subs-cache"]]],"~i182",["^ ","^27",[["^ ","^1T",4,"^1U",174,"^G","current-subs"]],"^2>",[["^ ","^1T",25,"^1U",174]],"^3A",[["^ ","^1T",25,"^1U",174,"^G","cljs.core/set"]],"^24",[["^ ","^1T",39,"^1U",174],["^ ","^1T",54,"^1U",174],["^ ","^1T",54,"^1U",174,"^G","cljs.core/deref"]],"^3B",[["^ ","^1T",39,"^1U",174,"^G","cljs.core/vals"]],"~i38",[["^ ","^1T",70,"^1U",174,"^G","re-frame.subs/query->reaction"]]],"~i183",["^ ","~i8",[["^ ","^1T",0,"^1U",175],["^ ","^1T",4,"^1U",175,"^G","seq__14460"],["^ ","^1T",23,"^1U",175],["^ ","^1T",23,"^1U",175,"^G","cljs.core/seq"],["^ ","^1T",4,"^1U",176,"^G","chunk__14461"],["^ ","^1T",25,"^1U",176],["^ ","^1T",4,"^1U",177,"^G","count__14462"],["^ ","^1T",25,"^1U",177],["^ ","^1T",4,"^1U",178,"^G","i__14463"],["^ ","^1T",21,"^1U",178],["^ ","^1T",0,"^1U",180],["^ ","^1T",0,"^1U",180],["^ ","^1T",3,"^1U",180],["^ ","^1T",3,"^1U",180],["^ ","^1T",4,"^1U",180,"^G","i__14463"],["^ ","^1T",21,"^1U",180,"^G","count__14462"],["^ ","^1T",0,"^1U",181],["^ ","^1T",16,"^1U",181],["^ ","^1T",16,"^1U",181,"^G","chunk__14461"],["^ ","^1T",72,"^1U",181,"^G","i__14463"],["^ ","^1T",0,"^1U",182],["^ ","^1T",0,"^1U",182],["^ ","^1T",0,"^1U",184],["^ ","^1T",0,"^1U",185],["^ ","^1T",15,"^1U",185,"^G","seq__14460"],["^ ","^1T",15,"^1U",186,"^G","chunk__14461"],["^ ","^1T",15,"^1U",187,"^G","count__14462"],["^ ","^1T",15,"^1U",188],["^ ","^1T",16,"^1U",188,"^G","i__14463"],["^ ","^1T",33,"^1U",188],["^ ","^1T",0,"^1U",195],["^ ","^1T",4,"^1U",195,"^G","temp__5457__auto__"],["^ ","^1T",31,"^1U",195],["^ ","^1T",31,"^1U",195,"^G","cljs.core/seq"],["^ ","^1T",45,"^1U",195,"^G","seq__14460"],["^ ","^1T",0,"^1U",196],["^ ","^1T",0,"^1U",196],["^ ","^1T",3,"^1U",196,"^G","temp__5457__auto__"],["^ ","^1T",0,"^1U",197],["^ ","^1T",0,"^1U",197],["^ ","^1T",4,"^1U",197,"^G","seq__14460"],["^ ","^1T",27,"^1U",197,"^G","temp__5457__auto__"],["^ ","^1T",0,"^1U",198],["^ ","^1T",0,"^1U",198],["^ ","^1T",3,"^1U",198],["^ ","^1T",3,"^1U",198,"^G","cljs.core/chunked-seq?"],["^ ","^1T",32,"^1U",198,"^G","seq__14460"],["^ ","^1T",0,"^1U",199],["^ ","^1T",4,"^1U",199,"^G","c__4351__auto__"],["^ ","^1T",28,"^1U",199],["^ ","^1T",28,"^1U",199,"^G","cljs.core/chunk-first"],["^ ","^1T",50,"^1U",199,"^G","seq__14460"],["^ ","^1T",0,"^1U",200],["^ ","^1T",0,"^1U",200],["^ ","^1T",15,"^1U",200],["^ ","^1T",15,"^1U",200,"^G","cljs.core/chunk-rest"],["^ ","^1T",36,"^1U",200,"^G","seq__14460"],["^ ","^1T",15,"^1U",201,"^G","c__4351__auto__"],["^ ","^1T",15,"^1U",202],["^ ","^1T",15,"^1U",202,"^G","cljs.core/count"],["^ ","^1T",31,"^1U",202,"^G","c__4351__auto__"],["^ ","^1T",15,"^1U",203],["^ ","^1T",0,"^1U",210],["^ ","^1T",16,"^1U",210],["^ ","^1T",16,"^1U",210,"^G","cljs.core/first"],["^ ","^1T",32,"^1U",210,"^G","seq__14460"],["^ ","^1T",0,"^1U",211],["^ ","^1T",0,"^1U",211],["^ ","^1T",0,"^1U",213],["^ ","^1T",0,"^1U",214],["^ ","^1T",15,"^1U",214],["^ ","^1T",15,"^1U",214,"^G","cljs.core/next"],["^ ","^1T",30,"^1U",214,"^G","seq__14460"],["^ ","^1T",15,"^1U",215],["^ ","^1T",15,"^1U",216],["^ ","^1T",15,"^1U",217],["^ ","^1T",0,"^1U",225]],"^20",[["^ ","^1T",4,"^1U",181,"^G","sub"],["^ ","^1T",4,"^1U",210,"^G","sub"]],"^1V",[["^ ","^1T",37,"^1U",175]],"^32",[["^ ","^1T",37,"^1U",175,"^G","clojure.set.difference.cljs$core$IFn$_invoke$arity$2"]],"~i36",[["^ ","^1T",90,"^1U",175,"^G","current-subs"]],"^22",[["^ ","^1T",109,"^1U",175,"^G","original-subs"]]],"~i184",["^ ","~i10",[["^ ","^1T",0,"^1U",182],["^ ","^1T",0,"^1U",211]],"~i11",[["^ ","^1T",0,"^1U",182,"^G","re-frame.interop/dispose!"],["^ ","^1T",0,"^1U",211,"^G","re-frame.interop/dispose!"]],"~i28",[["^ ","^1T",31,"^1U",182,"^G","sub"],["^ ","^1T",31,"^1U",211,"^G","sub"]]],"~i189",["^ ","~i6",[["^ ","^1T",0,"^1U",230]],"~i7",[["^ ","^1T",0,"^1U",230,"^G","cljs.core/reset!"]],"~i14",[["^ ","^1T",22,"^1U",230,"^G","re-frame.registrar/kind->id->handler"]],"~i42",[["^ ","^1T",65,"^1U",230,"^G","handlers"]]],"~i190",["^ ","~i6",[["^ ","^1T",0,"^1U",232]],"~i7",[["^ ","^1T",0,"^1U",232,"^G","cljs.core/reset!"]],"^3M",[["^ ","^1T",22,"^1U",232,"^G","re-frame.db/app-db"]],"^21",[["^ ","^1T",41,"^1U",232,"^G","app-db"]]],"~i193",["^ ","~i0",[["^ ","^1T",0,"^1U",238],["^ ","^1T",34,"^1U",241],["^ ","^1T",0,"^1U",242]],"~i6",[["^ ","^1T",0,"^1U",241,"^G","re-frame.core/purge-event-queue"]]],"~i196",["^ ","~i2",[["^ ","^1T",0,"^1U",242]],"~i3",[["^ ","^1T",7,"^1U",242,"^G","re-frame.router/purge"]],"^20",[["^ ","^1T",29,"^1U",242,"^G","re-frame.router/event-queue"]]],"~i200",["^ ","~i0",[["^ ","^1T",0,"^1U",244],["^ ","^1T",0,"^1U",244],["^ ","^1T",40,"^1U",260],["^ ","^1T",88,"^1U",260,"^G","var_args"],["^ ","^1T",0,"^1U",261],["^ ","^1T",0,"^1U",261],["^ ","^1T",4,"^1U",261,"^G","G__14496"],["^ ","^1T",15,"^1U",261],["^ ","^1T",15,"^1U",261],["^ ","^1T",0,"^1U",262],["^ ","^1T",0,"^1U",262],["^ ","^1T",8,"^1U",262,"^G","G__14496"],["^ ","^1T",5,"^1U",263],["^ ","^1T",0,"^1U",264],["^ ","^1T",7,"^1U",264,"^G","re-frame.core/add-post-event-callback"],["^ ","^1T",75,"^1U",264],["^ ","^1T",76,"^1U",264],["^ ","^1T",86,"^1U",264],["^ ","^1T",5,"^1U",267],["^ ","^1T",0,"^1U",268],["^ ","^1T",7,"^1U",268,"^G","re-frame.core/add-post-event-callback"],["^ ","^1T",75,"^1U",268],["^ ","^1T",76,"^1U",268],["^ ","^1T",86,"^1U",268],["^ ","^1T",92,"^1U",268],["^ ","^1T",93,"^1U",268],["^ ","^1T",103,"^1U",268],["^ ","^1T",0,"^1U",272],["^ ","^1T",6,"^1U",272],["^ ","^1T",11,"^1U",272,"^G","js/Error"],["^ ","^1T",17,"^1U",272],["^ ","^1T",18,"^1U",272],["^ ","^1T",80,"^1U",272],["^ ","^1T",80,"^1U",272],["^ ","^1T",0,"^1U",277],["^ ","^1T",0,"^1U",277],["^ ","^1T",70,"^1U",277],["^ ","^1T",0,"^1U",278],["^ ","^1T",0,"^1U",281],["^ ","^1T",0,"^1U",281],["^ ","^1T",70,"^1U",281],["^ ","^1T",0,"^1U",282],["^ ","^1T",0,"^1U",285],["^ ","^1T",0,"^1U",285],["^ ","^1T",64,"^1U",285],["^ ","^1T",0,"^1U",287]],"~i6",[["^ ","^1T",0,"^1U",260,"^G","re-frame.core/add-post-event-callback"],["^ ","^1T",0,"^1U",277,"^G","re-frame.core/add-post-event-callback"],["^ ","^1T",0,"^1U",281,"^G","re-frame.core/add-post-event-callback"],["^ ","^1T",0,"^1U",285,"^G","re-frame.core/add-post-event-callback"]]],"~i215",["^ ","~i4",[["^ ","^1T",81,"^1U",277,"^G","f"]]],"~i216",["^ ","~i3",[["^ ","^1T",0,"^1U",278]],"~i4",[["^ ","^1T",7,"^1U",278,"^G","re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2"]],"^3K",[["^ ","^1T",75,"^1U",278,"^G","f"]],"^29",[["^ ","^1T",77,"^1U",278,"^G","f"]]],"~i217",["^ ","~i4",[["^ ","^1T",81,"^1U",281,"^G","id"]],"~i7",[["^ ","^1T",84,"^1U",281,"^G","f"]]],"~i218",["^ ","~i3",[["^ ","^1T",0,"^1U",282]],"~i4",[["^ ","^1T",7,"^1U",282,"^G","re-frame.router/add-post-event-callback"]],"~i35",[["^ ","^1T",47,"^1U",282,"^G","re-frame.router/event-queue"]],"^2@",[["^ ","^1T",75,"^1U",282,"^G","id"]],"~i66",[["^ ","^1T",78,"^1U",282,"^G","f"]]],"~i221",["^ ","~i0",[["^ ","^1T",0,"^1U",287],["^ ","^1T",43,"^1U",287],["^ ","^1T",0,"^1U",288]],"~i6",[["^ ","^1T",0,"^1U",287,"^G","re-frame.core/remove-post-event-callback"]]],"~i222",["^ ","~i3",[["^ ","^1T",94,"^1U",287,"^G","id"]]],"~i223",["^ ","~i2",[["^ ","^1T",0,"^1U",288]],"~i3",[["^ ","^1T",7,"^1U",288,"^G","re-frame.router/remove-post-event-callback"]],"^3C",[["^ ","^1T",50,"^1U",288,"^G","re-frame.router/event-queue"]],"^2B",[["^ ","^1T",78,"^1U",288,"^G","id"]]],"~i228",["^ ","~i0",[["^ ","^1T",0,"^1U",290],["^ ","^1T",0,"^1U",290],["^ ","^1T",33,"^1U",290],["^ ","^1T",74,"^1U",290,"^G","var_args"],["^ ","^1T",0,"^1U",291],["^ ","^1T",0,"^1U",291],["^ ","^1T",4,"^1U",291,"^G","args__4534__auto__"],["^ ","^1T",25,"^1U",291],["^ ","^1T",0,"^1U",292],["^ ","^1T",0,"^1U",292],["^ ","^1T",4,"^1U",292,"^G","len__4531__auto__"],["^ ","^1T",30,"^1U",292],["^ ","^1T",30,"^1U",292],["^ ","^1T",0,"^1U",293],["^ ","^1T",0,"^1U",293],["^ ","^1T",4,"^1U",293,"^G","i__4532__auto__"],["^ ","^1T",28,"^1U",293],["^ ","^1T",0,"^1U",295],["^ ","^1T",0,"^1U",295],["^ ","^1T",3,"^1U",295],["^ ","^1T",4,"^1U",295,"^G","i__4532__auto__"],["^ ","^1T",28,"^1U",295,"^G","len__4531__auto__"],["^ ","^1T",0,"^1U",296],["^ ","^1T",0,"^1U",296],["^ ","^1T",0,"^1U",296,"^G","args__4534__auto__"],["^ ","^1T",24,"^1U",296],["^ ","^1T",25,"^1U",296],["^ ","^1T",35,"^1U",296,"^G","i__4532__auto__"],["^ ","^1T",0,"^1U",298],["^ ","^1T",15,"^1U",298],["^ ","^1T",16,"^1U",298,"^G","i__4532__auto__"],["^ ","^1T",40,"^1U",298],["^ ","^1T",0,"^1U",302],["^ ","^1T",0,"^1U",306],["^ ","^1T",4,"^1U",306,"^G","argseq__4535__auto__"],["^ ","^1T",27,"^1U",306],["^ ","^1T",29,"^1U",306],["^ ","^1T",30,"^1U",306],["^ ","^1T",36,"^1U",306],["^ ","^1T",36,"^1U",306,"^G","args__4534__auto__"],["^ ","^1T",64,"^1U",306],["^ ","^1T",64,"^1U",306],["^ ","^1T",69,"^1U",306,"^G","cljs.core/IndexedSeq"],["^ ","^1T",90,"^1U",306],["^ ","^1T",90,"^1U",306,"^G","args__4534__auto__"],["^ ","^1T",115,"^1U",306],["^ ","^1T",120,"^1U",306],["^ ","^1T",124,"^1U",306],["^ ","^1T",131,"^1U",306],["^ ","^1T",0,"^1U",307],["^ ","^1T",0,"^1U",307],["^ ","^1T",7,"^1U",307,"^G","re-frame.core/register-handler"],["^ ","^1T",75,"^1U",307,"^G","argseq__4535__auto__"],["^ ","^1T",0,"^1U",310],["^ ","^1T",0,"^1U",310],["^ ","^1T",0,"^1U",310],["^ ","^1T",0,"^1U",310,"^G","re-frame.core/register-handler"],["^ ","^1T",70,"^1U",310],["^ ","^1T",0,"^1U",311],["^ ","^1T",0,"^1U",320],["^ ","^1T",0,"^1U",320],["^ ","^1T",0,"^1U",320,"^G","re-frame.core/register-handler"],["^ ","^1T",57,"^1U",320],["^ ","^1T",0,"^1U",322],["^ ","^1T",0,"^1U",323],["^ ","^1T",0,"^1U",323],["^ ","^1T",0,"^1U",323,"^G","re-frame.core/register-handler"],["^ ","^1T",51,"^1U",323],["^ ","^1T",62,"^1U",323,"^G","seq14501"],["^ ","^1T",0,"^1U",324],["^ ","^1T",0,"^1U",324],["^ ","^1T",4,"^1U",324,"^G","self__4519__auto__"],["^ ","^1T",25,"^1U",324],["^ ","^1T",0,"^1U",325],["^ ","^1T",0,"^1U",325],["^ ","^1T",7,"^1U",325,"^G","self__4519__auto__"],["^ ","^1T",63,"^1U",325],["^ ","^1T",63,"^1U",325,"^G","cljs.core/seq"],["^ ","^1T",77,"^1U",325,"^G","seq14501"],["^ ","^1T",0,"^1U",328]],"~i6",[["^ ","^1T",0,"^1U",290,"^G","re-frame.core/register-handler"]]],"~i229",["^ ","~i5",[["^ ","^1T",81,"^1U",310,"^G","args"]]],"~i230",["^ ","~i2",[["^ ","^1T",0,"^1U",311],["^ ","^1T",4,"^1U",311,"^G","G__14502"],["^ ","^1T",21,"^1U",311],["^ ","^1T",4,"^1U",312,"^G","G__14503"],["^ ","^1T",21,"^1U",312],["^ ","^1T",4,"^1U",313,"^G","G__14504"],["^ ","^1T",4,"^1U",314,"^G","G__14505"],["^ ","^1T",21,"^1U",314],["^ ","^1T",0,"^1U",315],["^ ","^1T",0,"^1U",315],["^ ","^1T",107,"^1U",315,"^G","G__14502"],["^ ","^1T",122,"^1U",315,"^G","G__14503"],["^ ","^1T",137,"^1U",315,"^G","G__14504"],["^ ","^1T",152,"^1U",315,"^G","G__14505"],["^ ","^1T",202,"^1U",315,"^G","G__14502"],["^ ","^1T",217,"^1U",315,"^G","G__14503"],["^ ","^1T",232,"^1U",315,"^G","G__14504"],["^ ","^1T",247,"^1U",315,"^G","G__14505"]],"~i3",[["^ ","^1T",1,"^1U",315,"^G","re-frame.core/console"],["^ ","^1T",55,"^1U",315,"^G","re-frame.core/console"],["^ ","^1T",170,"^1U",315,"^G","re-frame.core/console"]],"^2S",[["^ ","^1T",21,"^1U",313]],"~i117",[["^ ","^1T",66,"^1U",313]],"~i118",[["^ ","^1T",66,"^1U",313,"^G","cljs.core/first"]],"^2Z",[["^ ","^1T",82,"^1U",313,"^G","args"]]],"~i231",["^ ","~i2",[["^ ","^1T",0,"^1U",317]],"~i3",[["^ ","^1T",7,"^1U",317,"^G","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"]],"~i9",[["^ ","^1T",53,"^1U",317,"^G","re-frame.core/reg-event-db"]],"~i22",[["^ ","^1T",80,"^1U",317,"^G","args"]]],"~i233",["^ ","~i0",[["^ ","^1T",0,"^1U",328],["^ ","^1T",0,"^1U",328],["^ ","^1T",29,"^1U",328],["^ ","^1T",66,"^1U",328,"^G","var_args"],["^ ","^1T",0,"^1U",329],["^ ","^1T",0,"^1U",329],["^ ","^1T",4,"^1U",329,"^G","args__4534__auto__"],["^ ","^1T",25,"^1U",329],["^ ","^1T",0,"^1U",330],["^ ","^1T",0,"^1U",330],["^ ","^1T",4,"^1U",330,"^G","len__4531__auto__"],["^ ","^1T",30,"^1U",330],["^ ","^1T",30,"^1U",330],["^ ","^1T",0,"^1U",331],["^ ","^1T",0,"^1U",331],["^ ","^1T",4,"^1U",331,"^G","i__4532__auto__"],["^ ","^1T",28,"^1U",331],["^ ","^1T",0,"^1U",333],["^ ","^1T",0,"^1U",333],["^ ","^1T",3,"^1U",333],["^ ","^1T",4,"^1U",333,"^G","i__4532__auto__"],["^ ","^1T",28,"^1U",333,"^G","len__4531__auto__"],["^ ","^1T",0,"^1U",334],["^ ","^1T",0,"^1U",334],["^ ","^1T",0,"^1U",334,"^G","args__4534__auto__"],["^ ","^1T",24,"^1U",334],["^ ","^1T",25,"^1U",334],["^ ","^1T",35,"^1U",334,"^G","i__4532__auto__"],["^ ","^1T",0,"^1U",336],["^ ","^1T",15,"^1U",336],["^ ","^1T",16,"^1U",336,"^G","i__4532__auto__"],["^ ","^1T",40,"^1U",336],["^ ","^1T",0,"^1U",340],["^ ","^1T",0,"^1U",344],["^ ","^1T",4,"^1U",344,"^G","argseq__4535__auto__"],["^ ","^1T",27,"^1U",344],["^ ","^1T",29,"^1U",344],["^ ","^1T",30,"^1U",344],["^ ","^1T",36,"^1U",344],["^ ","^1T",36,"^1U",344,"^G","args__4534__auto__"],["^ ","^1T",64,"^1U",344],["^ ","^1T",64,"^1U",344],["^ ","^1T",69,"^1U",344,"^G","cljs.core/IndexedSeq"],["^ ","^1T",90,"^1U",344],["^ ","^1T",90,"^1U",344,"^G","args__4534__auto__"],["^ ","^1T",115,"^1U",344],["^ ","^1T",120,"^1U",344],["^ ","^1T",124,"^1U",344],["^ ","^1T",131,"^1U",344],["^ ","^1T",0,"^1U",345],["^ ","^1T",0,"^1U",345],["^ ","^1T",7,"^1U",345,"^G","re-frame.core/register-sub"],["^ ","^1T",71,"^1U",345,"^G","argseq__4535__auto__"],["^ ","^1T",0,"^1U",348],["^ ","^1T",0,"^1U",348],["^ ","^1T",0,"^1U",348],["^ ","^1T",0,"^1U",348,"^G","re-frame.core/register-sub"],["^ ","^1T",66,"^1U",348],["^ ","^1T",0,"^1U",349],["^ ","^1T",0,"^1U",358],["^ ","^1T",0,"^1U",358],["^ ","^1T",0,"^1U",358,"^G","re-frame.core/register-sub"],["^ ","^1T",53,"^1U",358],["^ ","^1T",0,"^1U",360],["^ ","^1T",0,"^1U",361],["^ ","^1T",0,"^1U",361],["^ ","^1T",0,"^1U",361,"^G","re-frame.core/register-sub"],["^ ","^1T",47,"^1U",361],["^ ","^1T",58,"^1U",361,"^G","seq14517"],["^ ","^1T",0,"^1U",362],["^ ","^1T",0,"^1U",362],["^ ","^1T",4,"^1U",362,"^G","self__4519__auto__"],["^ ","^1T",25,"^1U",362],["^ ","^1T",0,"^1U",363],["^ ","^1T",0,"^1U",363],["^ ","^1T",7,"^1U",363,"^G","self__4519__auto__"],["^ ","^1T",63,"^1U",363],["^ ","^1T",63,"^1U",363,"^G","cljs.core/seq"],["^ ","^1T",77,"^1U",363,"^G","seq14517"],["^ ","^1T",0,"^1U",366]],"~i6",[["^ ","^1T",0,"^1U",328,"^G","re-frame.core/register-sub"]]],"~i234",["^ ","~i5",[["^ ","^1T",77,"^1U",348,"^G","args"]]],"~i235",["^ ","~i2",[["^ ","^1T",0,"^1U",349],["^ ","^1T",4,"^1U",349,"^G","G__14518"],["^ ","^1T",21,"^1U",349],["^ ","^1T",4,"^1U",350,"^G","G__14519"],["^ ","^1T",21,"^1U",350],["^ ","^1T",4,"^1U",351,"^G","G__14520"],["^ ","^1T",4,"^1U",352,"^G","G__14521"],["^ ","^1T",21,"^1U",352],["^ ","^1T",0,"^1U",353],["^ ","^1T",0,"^1U",353],["^ ","^1T",107,"^1U",353,"^G","G__14518"],["^ ","^1T",122,"^1U",353,"^G","G__14519"],["^ ","^1T",137,"^1U",353,"^G","G__14520"],["^ ","^1T",152,"^1U",353,"^G","G__14521"],["^ ","^1T",202,"^1U",353,"^G","G__14518"],["^ ","^1T",217,"^1U",353,"^G","G__14519"],["^ ","^1T",232,"^1U",353,"^G","G__14520"],["^ ","^1T",247,"^1U",353,"^G","G__14521"]],"~i3",[["^ ","^1T",1,"^1U",353,"^G","re-frame.core/console"],["^ ","^1T",55,"^1U",353,"^G","re-frame.core/console"],["^ ","^1T",170,"^1U",353,"^G","re-frame.core/console"]],"~i109",[["^ ","^1T",21,"^1U",351]],"~i114",[["^ ","^1T",66,"^1U",351]],"^2V",[["^ ","^1T",66,"^1U",351,"^G","cljs.core/first"]],"^2W",[["^ ","^1T",82,"^1U",351,"^G","args"]]],"~i236",["^ ","~i2",[["^ ","^1T",0,"^1U",355]],"~i3",[["^ ","^1T",7,"^1U",355,"^G","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"]],"~i9",[["^ ","^1T",53,"^1U",355,"^G","re-frame.core/reg-sub-raw"]],"^32",[["^ ","^1T",79,"^1U",355,"^G","args"]]]],"~:cljc",true],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1533404981000,1533407430109,"~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"],["^1K","reagent/impl/batching.cljs"],[1531925805345,"^11","^[","~$reagent.debug","~$reagent.interop","~$reagent.impl.util","~$clojure.string"],["^1K","goog/dom/tagname.js"],[1531925801810,"^11","~$goog.dom.HtmlElement"],["^4@","node_modules/fbjs/lib/camelize.js"],[1533404981000,1533405904665,"^4A"],["~:macro","^["],[1532292597000],["^1K","goog/math/math.js"],[1531925801810,"^11","~$goog.array","~$goog.asserts"],["^1K","goog/labs/useragent/browser.js"],[1531925801810,"^11","^4J","~$goog.labs.userAgent.util","~$goog.object","~$goog.string"],["^1K","re_frame/loggers.cljc"],[1531925806153,"^11","^[","^Q"],["^4I","^4D"],[1531925805000],["^1K","goog/array/array.js"],[1531925801810,"^11","^4K"],["^4@","node_modules/prop-types/checkPropTypes.js"],[1533404981000,1533405904665,"^4A","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"],["^1K","reagent/impl/util.cljs"],[1531925805345,"^11","^[","~$cljsjs.react","~$cljsjs.create-react-class","^4D","^4E","^4G"],["^1K","re_frame/router.cljc"],[1531925806153,"^11","^[","^W","^M","^Y","~$re-frame.trace"],["^4I","~$net.cgrand.macrovich"],[1531925806000],["^4@","node_modules/fbjs/lib/emptyFunction.js"],[1533404981000,1533405904665,"^4A"],["^1K","goog/debug/error.js"],[1531925801810,"^11"],["^1K","re_frame/registrar.cljc"],[1531925806153,"^11","^[","^M","^Y"],["^4@","node_modules/fbjs/lib/emptyObject.js"],[1533404981000,1533405904665,"^4A"],["^1K","goog/dom/nodetype.js"],[1531925801810,"^11"],["^4@","node_modules/fbjs/lib/shallowEqual.js"],[1533404981000,1533405904665,"^4A"],["^1K","cljsjs/create_react_class.cljs"],[1533404979598,"^11","^[","~$module$node_modules$react$index","~$module$node_modules$create_react_class$index"],["^4I","~$reagent.core"],[1531925805000],["^1K","reagent/ratom.cljs"],[1531925805345,"^11","^[","^4F","^4D","~$reagent.impl.batching","^Q"],["^1K","re_frame/interop.cljs"],[1531925806153,"^11","^[","~$goog.async.nextTick","^4V","~$reagent.ratom"],["^4@","node_modules/fbjs/lib/hyphenate.js"],[1533404981000,1533405904665,"^4A"],["^4@","node_modules/create-react-class/factory.js"],[1533404981000,1533407430095,"^4A","~$module$node_modules$object_assign$index","~$module$node_modules$fbjs$lib$emptyObject","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$fbjs$lib$warning"],["^4@","node_modules/react/index.js"],[1533404981000,1533405906680,"^4A","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"],["^1K","shadow/js.js"],[1533404981174,"^11"],["^1K","goog/object/object.js"],[1531925801810,"^11"],["^1K","reagent/impl/template.cljs"],[1531925805345,"^11","^[","^4G","~$clojure.walk","^4F","~$reagent.impl.component","^4W","^4Y","^4E","^4D"],["^4@","node_modules/react-dom/cjs/react-dom.production.min.js"],[1533404981000,1533407430109,"^4A","^50","^4T","~$module$node_modules$fbjs$lib$ExecutionEnvironment","^4Z","~$module$node_modules$fbjs$lib$emptyFunction","~$module$node_modules$fbjs$lib$getActiveElement","~$module$node_modules$fbjs$lib$shallowEqual","~$module$node_modules$fbjs$lib$containsNode","^4["],"~:SHADOW-TIMESTAMP",[1533404981000,1532292597000],["^4@","node_modules/react/cjs/react.development.js"],[1533404981000,1533405906680,"^4A","^4Z","^50","^4[","^51","^57","~$module$node_modules$prop_types$checkPropTypes"],["^4I","^4Y"],[1531925805000],["^1K","re_frame/events.cljc"],[1531925806153,"^11","^[","^15","~$re-frame.utils","^M","^Z","^Y","^T","^4R"],["^4@","node_modules/fbjs/lib/isNode.js"],[1533404981000,1533405904665,"^4A"],["^1K","goog/math/long.js"],[1531925801810,"^11","^4K","~$goog.reflect"],["^4I","^4E"],[1531925805000],["^4@","node_modules/fbjs/lib/warning.js"],[1533404981000,1533405904665,"^4A","^57"],["^1K","goog/functions/functions.js"],[1531925801810,"^11"],["^1K","reagent/impl/component.cljs"],[1531925805345,"^11","^[","^4F","^4W","^4Y","^4E","^4D"],["^1K","clojure/walk.cljs"],[1532292597383,"^11","^["],["^1K","goog/structs/map.js"],[1531925801810,"^11","~$goog.iter.Iterator","~$goog.iter.StopIteration","^4M"],["^1K","goog/labs/useragent/engine.js"],[1531925801810,"^11","^4J","^4L","^4N"],["^1K","goog/asserts/asserts.js"],[1531925801810,"^11","~$goog.debug.Error","~$goog.dom.NodeType","^4N"],["^1K","goog/uri/uri.js"],[1531925801810,"^11","^4J","^4K","^4N","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^4@","node_modules/object-assign/index.js"],[1533404981000,1533405885270,"^4A"],["^4@","node_modules/fbjs/lib/containsNode.js"],[1533404981000,1533405904665,"^4A","~$module$node_modules$fbjs$lib$isTextNode"],["^4@","node_modules/fbjs/lib/hyphenateStyleName.js"],[1533404981000,1533405904665,"^4A","~$module$node_modules$fbjs$lib$hyphenate"],["^1K","re_frame/db.cljc"],[1531925806153,"^11","^[","^M"],["^1K","goog/base.js"],[1531925801810],["^1K","goog/structs/structs.js"],[1531925801810,"^11","^4J","^4M"],["^1K","cljsjs/react.cljs"],[1533404979598,"^11","^[","^4T"],["^1K","clojure/string.cljs"],[1532292597383,"^11","^[","^4N","~$goog.string.StringBuffer"],["^4@","node_modules/fbjs/lib/ExecutionEnvironment.js"],[1533404981000,1533405904665,"^4A"],["^4@","node_modules/create-react-class/index.js"],[1533404981000,1533407430095,"^4A","^4T","~$module$node_modules$create_react_class$factory"],["^1K","re_frame/cofx.cljc"],[1531925806153,"^11","^[","^15","^T","^Z","^Y"],["^4@","node_modules/react/cjs/react.production.min.js"],[1533404981000,1533405906680,"^4A","^4Z","^50","^4[","^57"],["^1K","goog/debug/entrypointregistry.js"],[1531925801810,"^11","^4K"],["^1K","goog/string/string.js"],[1531925801810,"^11"],["^1K","re_frame/interceptor.cljc"],[1531925806153,"^11","^[","^Y","^M","^4R","^Q"],["^1K","clojure/data.cljs"],[1532292597383,"^11","^[","^Q"],["^1K","goog/reflect/reflect.js"],[1531925801810,"^11"],["^1K","goog/labs/useragent/util.js"],[1531925801810,"^11","^4N"],["^1K","reagent/core.cljs"],[1531925805345,"^11","^[","~$reagent.impl.template","^55","^4F","^4W","^4Y","^4D","^4E","~$reagent.dom"],["^1K","goog/string/stringbuffer.js"],[1531925801810,"^11"],["^1K","re_frame/std_interceptors.cljc"],[1531925806153,"^11","^[","^T","^Y","^Z","^15","~$clojure.data","^S","^5=","^4R"],["^1K","goog/iter/iter.js"],[1531925801810,"^11","^4J","^4K","~$goog.functions","~$goog.math"],["^1K","goog/async/nexttick.js"],[1531925801810,"^11","~$goog.debug.entryPointRegistry","~$goog.dom.TagName","^5O","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine"],["^1K","re_frame/utils.cljc"],[1531925806153,"^11","^[","^Y"],["^4@","node_modules/fbjs/lib/getActiveElement.js"],[1533404981000,1533405904665,"^4A"],["^1K","reagent/dom.cljs"],[1531925805345,"^11","^[","~$cljsjs.react.dom","^4F","^5L","^4W","^4Y","^4D","^4E"],["^4@","node_modules/fbjs/lib/camelizeStyleName.js"],[1533404981000,1533405904665,"^4A","~$module$node_modules$fbjs$lib$camelize"],["^1K","re_frame/fx.cljc"],[1531925806153,"^11","^[","^13","^15","^T","^M","^W","^Z","^Y","^4R"],["^4@","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1533404981000,1533405904665,"^4A"],["^1K","reagent/interop.cljs"],[1531925805345,"^11","^["],["^1K","goog/dom/htmlelement.js"],[1531925801810,"^11"],["^1K","cljs/core.cljs"],[1532292597383,"~$goog.math.Long","~$goog.math.Integer","^4N","^4M","^4J","~$goog.Uri","^5J"],["^1K","reagent/debug.cljs"],[1531925805345,"^11","^["],["^1K","cljsjs/react/dom.cljs"],[1533404979598,"^11","^[","^4T","~$module$node_modules$react_dom$index"],["^4I","^4R"],[1531925806000],["^1K","goog/math/integer.js"],[1531925801810,"^11"],["^4@","node_modules/react-dom/cjs/react-dom.development.js"],[1533404981000,1533407430109,"^4A","^50","^4T","^51","^56","^4Z","^57","^5<","^58","^59","^5:","^4[","~$module$node_modules$fbjs$lib$hyphenateStyleName","~$module$node_modules$fbjs$lib$camelizeStyleName"],["^1K","clojure/set.cljs"],[1532292597383,"^11","^["],["^1K","goog/uri/utils.js"],[1531925801810,"^11","^4J","^4K","^4N"],["^4@","node_modules/fbjs/lib/isTextNode.js"],[1533404981000,1533405904665,"^4A","~$module$node_modules$fbjs$lib$isNode"],["^4@","node_modules/fbjs/lib/invariant.js"],[1533404981000,1533405904665,"^4A"],["^1K","re_frame/trace.cljc"],[1531925806153,"^11","^[","^M","^Y","^5O"],["^1K","re_frame/subs.cljc"],[1531925806153,"^11","^[","^15","^M","^Y","^5=","^Z","^4R"],["^1K","re_frame/core.cljc"],[1531925806153,"^11","^[","^W","^O","^M","^15","^V","^S","^13","^Y","^Z","^T","^18","^Q"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/core.cljc","^7",1,"^8",5,"^9",1,"^:",18],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C"],"^D",null,"^E",["^F",[]],"^G","^H","^K",null,"^L",["^ ","^M","^M","^N","^O","^P","^Q","^R","^S","^T","^T","^U","^V","^W","^W","^X","^Y","^V","^V","^Z","^Z","^[","^[","^10","^T","^11","^11","^12","^13","^14","^15","^16","^Z","^13","^13","^Q","^Q","^17","^W","^18","^18","^Y","^Y","^O","^O","^19","^M","^1:","^18","^S","^S","^15","^15"],"^1;",["^F",["^1<"]],"~:shadow/js-access-global",["^F",["Error"]],"^1=",["^ ","^1>","^18","^1?","^18","^1@","^18"],"~:defs",["^ ","~$console",["^ ","^G","~$re-frame.core/console","^6","re_frame/core.cljc","^7",164,"^8",1,"^9",164,"^:",13,"^5",["^ ","^6","re_frame/core.cljc","^7",164,"^8",6,"^9",164,"^:",13]],"~$on-changes",["^ ","^G","~$re-frame.core/on-changes","^6","re_frame/core.cljc","^7",127,"^8",1,"^9",127,"^:",16,"^5",["^ ","^6","re_frame/core.cljc","^7",127,"^8",6,"^9",127,"^:",16]],"~$enrich",["^ ","^G","~$re-frame.core/enrich","^6","re_frame/core.cljc","^7",124,"^8",1,"^9",124,"^:",12,"^5",["^ ","^6","re_frame/core.cljc","^7",124,"^8",6,"^9",124,"^:",12]],"~$reg-sub-raw",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/core.cljc","^7",51,"^8",7,"^9",51,"^:",18,"~:arglists",["^1C",["~$quote",["^1C",[["~$query-id","~$handler-fn"]]]]],"~:doc","This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/Day8/re-frame/blob/master/docs/SubscriptionFlow.md"],"^G","~$re-frame.core/reg-sub-raw","~:variadic",false,"^6","re_frame/core.cljc","^:",18,"~:method-params",["^1C",[["^6?","^6@"]]],"~:protocol-impl",null,"~:arglists-meta",["^1C",[null,null]],"^8",1,"^7",51,"^9",51,"~:max-fixed-arity",2,"~:fn-var",true,"^6=",["^1C",["^6>",["^1C",[["^6?","^6@"]]]]],"^6A","This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/Day8/re-frame/blob/master/docs/SubscriptionFlow.md"],"~$subscribe",["^ ","^G","~$re-frame.core/subscribe","^6","re_frame/core.cljc","^7",46,"^8",1,"^9",46,"^:",15,"^5",["^ ","^6","re_frame/core.cljc","^7",46,"^8",6,"^9",46,"^:",15]],"~$assoc-coeffect",["^ ","^G","~$re-frame.core/assoc-coeffect","^6","re_frame/core.cljc","^7",144,"^8",1,"^9",144,"^:",20,"^5",["^ ","^6","re_frame/core.cljc","^7",144,"^8",6,"^9",144,"^:",20]],"~$register-sub",["^ ","^6<",null,"^5",["^ ","^6","re_frame/core.cljc","^7",234,"^8",7,"^9",234,"^:",19,"^6=",["^1C",["^6>",["^1C",[["~$&","~$args"]]]]],"~:top-fn",["^ ","^6C",true,"^6G",0,"^6D",[["^1C",["^6N"]]],"^6=",["^1C",[["~$&","^6N"]]],"^6F",["^1C",[null]]]],"^G","~$re-frame.core/register-sub","^6C",true,"^6","re_frame/core.cljc","^:",19,"^6O",["^ ","^6C",true,"^6G",0,"^6D",[["^1C",["^6N"]]],"^6=",["^1C",[["~$&","^6N"]]],"^6F",["^1C",[null]]],"^6D",[["^1C",["^6N"]]],"^6E",null,"^6F",["^1C",[null]],"^8",1,"^7",234,"^9",234,"^6G",0,"^6H",true,"^6=",["^1C",[["~$&","^6N"]]]],"~$purge-event-queue",["^ ","^6<",null,"^5",["^ ","^6","re_frame/core.cljc","^7",194,"^8",7,"^9",194,"^:",24,"^6=",["^1C",["^6>",["^1C",[[]]]]],"^6A","Remove all events queued for processing"],"^G","~$re-frame.core/purge-event-queue","^6C",false,"^6","re_frame/core.cljc","^:",24,"^6D",["^1C",[[]]],"^6E",null,"^6F",["^1C",[null,null]],"^8",1,"^7",194,"^9",194,"^6G",0,"^6H",true,"^6=",["^1C",["^6>",["^1C",[[]]]]],"^6A","Remove all events queued for processing"],"~$remove-post-event-callback",["^ ","^6<",null,"^5",["^ ","^6","re_frame/core.cljc","^7",222,"^8",7,"^9",222,"^:",33,"^6=",["^1C",["^6>",["^1C",[["~$id"]]]]]],"^G","~$re-frame.core/remove-post-event-callback","^6C",false,"^6","re_frame/core.cljc","^:",33,"^6D",["^1C",[["^6T"]]],"^6E",null,"^6F",["^1C",[null,null]],"^8",1,"^7",222,"^9",222,"^6G",1,"^6H",true,"^6=",["^1C",["^6>",["^1C",[["^6T"]]]]]],"~$path",["^ ","^G","~$re-frame.core/path","^6","re_frame/core.cljc","^7",123,"^8",1,"^9",123,"^:",10,"^5",["^ ","^6","re_frame/core.cljc","^7",123,"^8",6,"^9",123,"^:",10]],"~$reg-sub",["^ ","^G","~$re-frame.core/reg-sub","^6","re_frame/core.cljc","^7",45,"^8",1,"^9",45,"^:",13,"^5",["^ ","^6","re_frame/core.cljc","^7",45,"^8",6,"^9",45,"^:",13]],"~$make-restore-fn",["^ ","^6<",null,"^5",["^ ","^6","re_frame/core.cljc","^7",169,"^8",7,"^9",169,"^:",22,"^6=",["^1C",["^6>",["^1C",[[]]]]],"^6A","Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  "],"^G","~$re-frame.core/make-restore-fn","^6C",false,"^6","re_frame/core.cljc","^:",22,"^6D",["^1C",[[]]],"^6E",null,"^6F",["^1C",[null,null]],"^8",1,"^7",169,"^9",169,"^6G",0,"^6H",true,"^6=",["^1C",["^6>",["^1C",[[]]]]],"^6A","Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  "],"~$clear-fx",["^ ","^G","~$re-frame.core/clear-fx","^6","re_frame/core.cljc","^7",61,"^8",1,"^9",61,"^:",14,"^5",["^ ","^6","re_frame/core.cljc","^7",61,"^8",6,"^9",61,"^:",14],"~:tag","~$any"],"~$get-effect",["^ ","^G","~$re-frame.core/get-effect","^6","re_frame/core.cljc","^7",145,"^8",1,"^9",145,"^:",16,"^5",["^ ","^6","re_frame/core.cljc","^7",145,"^8",6,"^9",145,"^:",16]],"~$reg-event-db",["^ ","^6<",null,"^5",["^ ","^6","re_frame/core.cljc","^7",71,"^8",7,"^9",71,"^:",19,"^6=",["^1C",["^6>",["^1C",[["^6T","~$handler"],["^6T","~$interceptors","^77"]]]]],"^6A","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain.","^6O",["^ ","^6C",false,"^6G",3,"^6D",["^1C",[["^6T","^77"],["^6T","^78","^77"]]],"^6=",["^1C",[["^6T","^77"],["^6T","^78","^77"]]],"^6F",["^1C",[null,null]]]],"^G","~$re-frame.core/reg-event-db","^6C",false,"^6","re_frame/core.cljc","^:",19,"^6O",["^ ","^6C",false,"^6G",3,"^6D",["^1C",[["^6T","^77"],["^6T","^78","^77"]]],"^6=",["^1C",[["^6T","^77"],["^6T","^78","^77"]]],"^6F",["^1C",[null,null]]],"^6D",["^1C",[["^6T","^77"],["^6T","^78","^77"]]],"^6E",null,"^6F",["^1C",[null,null]],"^8",1,"^7",71,"^9",71,"^6G",3,"^6H",true,"^6=",["^1C",[["^6T","^77"],["^6T","^78","^77"]]],"^6A","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain."],"~$dispatch-sync",["^ ","^G","~$re-frame.core/dispatch-sync","^6","re_frame/core.cljc","^7",41,"^8",1,"^9",41,"^:",19,"^5",["^ ","^6","re_frame/core.cljc","^7",41,"^8",6,"^9",41,"^:",19]],"~$clear-event",["^ ","^G","~$re-frame.core/clear-event","^6","re_frame/core.cljc","^7",116,"^8",1,"^9",116,"^:",17,"^5",["^ ","^6","re_frame/core.cljc","^7",116,"^8",6,"^9",116,"^:",17],"^72","^73"],"~$->interceptor",["^ ","^G","~$re-frame.core/->interceptor","^6","re_frame/core.cljc","^7",142,"^8",1,"^9",142,"^:",19,"^5",["^ ","^6","re_frame/core.cljc","^7",142,"^8",6,"^9",142,"^:",19]],"~$set-loggers!",["^ ","^G","~$re-frame.core/set-loggers!","^6","re_frame/core.cljc","^7",157,"^8",1,"^9",157,"^:",18,"^5",["^ ","^6","re_frame/core.cljc","^7",157,"^8",6,"^9",157,"^:",18]],"~$inject-cofx",["^ ","^G","~$re-frame.core/inject-cofx","^6","re_frame/core.cljc","^7",65,"^8",1,"^9",65,"^:",17,"^5",["^ ","^6","re_frame/core.cljc","^7",65,"^8",6,"^9",65,"^:",17]],"~$get-coeffect",["^ ","^G","~$re-frame.core/get-coeffect","^6","re_frame/core.cljc","^7",143,"^8",1,"^9",143,"^:",18,"^5",["^ ","^6","re_frame/core.cljc","^7",143,"^8",6,"^9",143,"^:",18]],"~$debug",["^ ","^G","~$re-frame.core/debug","^6","re_frame/core.cljc","^7",122,"^8",1,"^9",122,"^:",11,"^5",["^ ","^6","re_frame/core.cljc","^7",122,"^8",6,"^9",122,"^:",11],"^72","^73"],"~$assoc-effect",["^ ","^G","~$re-frame.core/assoc-effect","^6","re_frame/core.cljc","^7",146,"^8",1,"^9",146,"^:",18,"^5",["^ ","^6","re_frame/core.cljc","^7",146,"^8",6,"^9",146,"^:",18]],"~$enqueue",["^ ","^G","~$re-frame.core/enqueue","^6","re_frame/core.cljc","^7",147,"^8",1,"^9",147,"^:",13,"^5",["^ ","^6","re_frame/core.cljc","^7",147,"^8",6,"^9",147,"^:",13]],"~$clear-cofx",["^ ","^G","~$re-frame.core/clear-cofx","^6","re_frame/core.cljc","^7",66,"^8",1,"^9",66,"^:",16,"^5",["^ ","^6","re_frame/core.cljc","^7",66,"^8",6,"^9",66,"^:",16],"^72","^73"],"~$reg-event-ctx",["^ ","^6<",null,"^5",["^ ","^6","re_frame/core.cljc","^7",104,"^8",7,"^9",104,"^:",20,"^6=",["^1C",["^6>",["^1C",[["^6T","^77"],["^6T","^78","^77"]]]]],"^6A","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. ","^6O",["^ ","^6C",false,"^6G",3,"^6D",["^1C",[["^6T","^77"],["^6T","^78","^77"]]],"^6=",["^1C",[["^6T","^77"],["^6T","^78","^77"]]],"^6F",["^1C",[null,null]]]],"^G","~$re-frame.core/reg-event-ctx","^6C",false,"^6","re_frame/core.cljc","^:",20,"^6O",["^ ","^6C",false,"^6G",3,"^6D",["^1C",[["^6T","^77"],["^6T","^78","^77"]]],"^6=",["^1C",[["^6T","^77"],["^6T","^78","^77"]]],"^6F",["^1C",[null,null]]],"^6D",["^1C",[["^6T","^77"],["^6T","^78","^77"]]],"^6E",null,"^6F",["^1C",[null,null]],"^8",1,"^7",104,"^9",104,"^6G",3,"^6H",true,"^6=",["^1C",[["^6T","^77"],["^6T","^78","^77"]]],"^6A","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. "],"~$reg-fx",["^ ","^G","~$re-frame.core/reg-fx","^6","re_frame/core.cljc","^7",60,"^8",1,"^9",60,"^:",12,"^5",["^ ","^6","re_frame/core.cljc","^7",60,"^8",6,"^9",60,"^:",12]],"~$trim-v",["^ ","^G","~$re-frame.core/trim-v","^6","re_frame/core.cljc","^7",125,"^8",1,"^9",125,"^:",12,"^5",["^ ","^6","re_frame/core.cljc","^7",125,"^8",6,"^9",125,"^:",12],"^72","^73"],"~$clear-sub",["^ ","^G","~$re-frame.core/clear-sub","^6","re_frame/core.cljc","^7",48,"^8",1,"^9",48,"^:",15,"^5",["^ ","^6","re_frame/core.cljc","^7",48,"^8",6,"^9",48,"^:",15],"^72","^73"],"~$dispatch",["^ ","^G","~$re-frame.core/dispatch","^6","re_frame/core.cljc","^7",40,"^8",1,"^9",40,"^:",14,"^5",["^ ","^6","re_frame/core.cljc","^7",40,"^8",6,"^9",40,"^:",14]],"~$after",["^ ","^G","~$re-frame.core/after","^6","re_frame/core.cljc","^7",126,"^8",1,"^9",126,"^:",11,"^5",["^ ","^6","re_frame/core.cljc","^7",126,"^8",6,"^9",126,"^:",11]],"~$add-post-event-callback",["^ ","^6<",null,"^5",["^ ","^6","re_frame/core.cljc","^7",201,"^8",7,"^9",201,"^:",30,"^6=",["^1C",["^6>",["^1C",[["~$f"],["^6T","~$f"]]]]],"^6A","Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n  be used at \"remove time\" to get rid of the right callback.\n  ","^6O",["^ ","^6C",false,"^6G",2,"^6D",["^1C",[["~$f"],["^6T","~$f"]]],"^6=",["^1C",[["~$f"],["^6T","~$f"]]],"^6F",["^1C",[null,null]]]],"^G","~$re-frame.core/add-post-event-callback","^6C",false,"^6","re_frame/core.cljc","^:",30,"^6O",["^ ","^6C",false,"^6G",2,"^6D",["^1C",[["~$f"],["^6T","~$f"]]],"^6=",["^1C",[["~$f"],["^6T","~$f"]]],"^6F",["^1C",[null,null]]],"^6D",["^1C",[["~$f"],["^6T","~$f"]]],"^6E",null,"^6F",["^1C",[null,null]],"^8",1,"^7",201,"^9",201,"^6G",2,"^6H",true,"^6=",["^1C",[["~$f"],["^6T","~$f"]]],"^6A","Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n  be used at \"remove time\" to get rid of the right callback.\n  "],"~$reg-cofx",["^ ","^G","~$re-frame.core/reg-cofx","^6","re_frame/core.cljc","^7",64,"^8",1,"^9",64,"^:",14,"^5",["^ ","^6","re_frame/core.cljc","^7",64,"^8",6,"^9",64,"^:",14]],"~$reg-event-fx",["^ ","^6<",null,"^5",["^ ","^6","re_frame/core.cljc","^7",87,"^8",7,"^9",87,"^:",19,"^6=",["^1C",["^6>",["^1C",[["^6T","^77"],["^6T","^78","^77"]]]]],"^6A","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects.","^6O",["^ ","^6C",false,"^6G",3,"^6D",["^1C",[["^6T","^77"],["^6T","^78","^77"]]],"^6=",["^1C",[["^6T","^77"],["^6T","^78","^77"]]],"^6F",["^1C",[null,null]]]],"^G","~$re-frame.core/reg-event-fx","^6C",false,"^6","re_frame/core.cljc","^:",19,"^6O",["^ ","^6C",false,"^6G",3,"^6D",["^1C",[["^6T","^77"],["^6T","^78","^77"]]],"^6=",["^1C",[["^6T","^77"],["^6T","^78","^77"]]],"^6F",["^1C",[null,null]]],"^6D",["^1C",[["^6T","^77"],["^6T","^78","^77"]]],"^6E",null,"^6F",["^1C",[null,null]],"^8",1,"^7",87,"^9",87,"^6G",3,"^6H",true,"^6=",["^1C",[["^6T","^77"],["^6T","^78","^77"]]],"^6A","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects."],"~$register-handler",["^ ","^6<",null,"^5",["^ ","^6","re_frame/core.cljc","^7",229,"^8",7,"^9",229,"^:",23,"^6=",["^1C",["^6>",["^1C",[["~$&","^6N"]]]]],"^6O",["^ ","^6C",true,"^6G",0,"^6D",[["^1C",["^6N"]]],"^6=",["^1C",[["~$&","^6N"]]],"^6F",["^1C",[null]]]],"^G","~$re-frame.core/register-handler","^6C",true,"^6","re_frame/core.cljc","^:",23,"^6O",["^ ","^6C",true,"^6G",0,"^6D",[["^1C",["^6N"]]],"^6=",["^1C",[["~$&","^6N"]]],"^6F",["^1C",[null]]],"^6D",[["^1C",["^6N"]]],"^6E",null,"^6F",["^1C",[null]],"^8",1,"^7",229,"^9",229,"^6G",0,"^6H",true,"^6=",["^1C",[["~$&","^6N"]]]],"~$clear-subscription-cache!",["^ ","^G","~$re-frame.core/clear-subscription-cache!","^6","re_frame/core.cljc","^7",49,"^8",1,"^9",49,"^:",31,"^5",["^ ","^6","re_frame/core.cljc","^7",49,"^8",6,"^9",49,"^:",31]]],"^1A",["^ ","^[","^["],"~:cljs.analyzer/constants",["^ ","^1;",["^F",["~:warn"]],"~:order",["^89"]],"^1G",["^ ","^1<",["^F",[]]],"^1H",["^ "],"^1I",["^11","^[","^W","^O","^M","^15","^V","^S","^13","^Y","^Z","^T","^18","^Q"]],"^J","^H","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^4?",[["^8=","~:static-fns"],true,["^8=","~:elide-asserts"],false,["^8=","~:optimize-constants"],null,["^8=","~:external-config"],null,["^8=","~:tooling-config"],null,["^8=","~:emit-constants"],null,["^8=","~:infer-externs"],true,["^8=","^1P"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^8=","~:fn-invoke-direct"],null,["^8=","^1R"],"/dev/null"]]]