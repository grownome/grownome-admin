["^ ","~:output",["^ ","~:js","goog.provide('clojure.set');\r\ngoog.require('cljs.core');\r\nclojure.set.bubble_max_key = (function clojure$set$bubble_max_key(k,coll){\r\n\r\nvar max = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.max_key,k,coll);\r\nreturn cljs.core.cons(max,cljs.core.remove.cljs$core$IFn$_invoke$arity$2(((function (max){\r\nreturn (function (p1__3996_SHARP_){\r\nreturn (max === p1__3996_SHARP_);\r\n});})(max))\r\n,coll));\r\n});\r\n/**\r\n * Return a set that is the union of the input sets\r\n */\r\nclojure.set.union = (function clojure$set$union(var_args){\r\nvar G__4004 = arguments.length;\r\nswitch (G__4004) {\r\ncase 0:\r\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$0();\r\n\r\nbreak;\r\ncase 1:\r\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nvar args_arr__4546__auto__ = [];\r\nvar len__4531__auto___4019 = arguments.length;\r\nvar i__4532__auto___4020 = (0);\r\nwhile(true){\r\nif((i__4532__auto___4020 < len__4531__auto___4019)){\r\nargs_arr__4546__auto__.push((arguments[i__4532__auto___4020]));\r\n\r\nvar G__4021 = (i__4532__auto___4020 + (1));\r\ni__4532__auto___4020 = G__4021;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4547__auto__ = (new cljs.core.IndexedSeq(args_arr__4546__auto__.slice((2)),(0),null));\r\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4547__auto__);\r\n\r\n}\r\n});\r\n\r\nclojure.set.union.cljs$core$IFn$_invoke$arity$0 = (function (){\r\nreturn cljs.core.PersistentHashSet.EMPTY;\r\n});\r\n\r\nclojure.set.union.cljs$core$IFn$_invoke$arity$1 = (function (s1){\r\nreturn s1;\r\n});\r\n\r\nclojure.set.union.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\r\nif((cljs.core.count(s1) < cljs.core.count(s2))){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,s2,s1);\r\n} else {\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,s1,s2);\r\n}\r\n});\r\n\r\nclojure.set.union.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\r\nvar bubbled_sets = clojure.set.bubble_max_key(cljs.core.count,cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(sets,s2,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([s1], 0)));\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.into,cljs.core.first(bubbled_sets),cljs.core.rest(bubbled_sets));\r\n});\r\n\r\n/** @this {Function} */\r\nclojure.set.union.cljs$lang$applyTo = (function (seq4000){\r\nvar G__4001 = cljs.core.first(seq4000);\r\nvar seq4000__$1 = cljs.core.next(seq4000);\r\nvar G__4002 = cljs.core.first(seq4000__$1);\r\nvar seq4000__$2 = cljs.core.next(seq4000__$1);\r\nvar self__4518__auto__ = this;\r\nreturn self__4518__auto__.cljs$core$IFn$_invoke$arity$variadic(G__4001,G__4002,seq4000__$2);\r\n});\r\n\r\nclojure.set.union.cljs$lang$maxFixedArity = (2);\r\n\r\n/**\r\n * Return a set that is the intersection of the input sets\r\n */\r\nclojure.set.intersection = (function clojure$set$intersection(var_args){\r\nvar G__4040 = arguments.length;\r\nswitch (G__4040) {\r\ncase 1:\r\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nvar args_arr__4546__auto__ = [];\r\nvar len__4531__auto___4055 = arguments.length;\r\nvar i__4532__auto___4056 = (0);\r\nwhile(true){\r\nif((i__4532__auto___4056 < len__4531__auto___4055)){\r\nargs_arr__4546__auto__.push((arguments[i__4532__auto___4056]));\r\n\r\nvar G__4059 = (i__4532__auto___4056 + (1));\r\ni__4532__auto___4056 = G__4059;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4547__auto__ = (new cljs.core.IndexedSeq(args_arr__4546__auto__.slice((2)),(0),null));\r\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4547__auto__);\r\n\r\n}\r\n});\r\n\r\nclojure.set.intersection.cljs$core$IFn$_invoke$arity$1 = (function (s1){\r\nreturn s1;\r\n});\r\n\r\nclojure.set.intersection.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\r\nwhile(true){\r\nif((cljs.core.count(s2) < cljs.core.count(s1))){\r\nvar G__4062 = s2;\r\nvar G__4063 = s1;\r\ns1 = G__4062;\r\ns2 = G__4063;\r\ncontinue;\r\n} else {\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (s1,s2){\r\nreturn (function (result,item){\r\nif(cljs.core.contains_QMARK_(s2,item)){\r\nreturn result;\r\n} else {\r\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(result,item);\r\n}\r\n});})(s1,s2))\r\n,s1,s1);\r\n}\r\nbreak;\r\n}\r\n});\r\n\r\nclojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\r\nvar bubbled_sets = clojure.set.bubble_max_key((function (p1__4028_SHARP_){\r\nreturn (- cljs.core.count(p1__4028_SHARP_));\r\n}),cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(sets,s2,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([s1], 0)));\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(clojure.set.intersection,cljs.core.first(bubbled_sets),cljs.core.rest(bubbled_sets));\r\n});\r\n\r\n/** @this {Function} */\r\nclojure.set.intersection.cljs$lang$applyTo = (function (seq4034){\r\nvar G__4036 = cljs.core.first(seq4034);\r\nvar seq4034__$1 = cljs.core.next(seq4034);\r\nvar G__4037 = cljs.core.first(seq4034__$1);\r\nvar seq4034__$2 = cljs.core.next(seq4034__$1);\r\nvar self__4518__auto__ = this;\r\nreturn self__4518__auto__.cljs$core$IFn$_invoke$arity$variadic(G__4036,G__4037,seq4034__$2);\r\n});\r\n\r\nclojure.set.intersection.cljs$lang$maxFixedArity = (2);\r\n\r\n/**\r\n * Return a set that is the first set without elements of the remaining sets\r\n */\r\nclojure.set.difference = (function clojure$set$difference(var_args){\r\nvar G__4072 = arguments.length;\r\nswitch (G__4072) {\r\ncase 1:\r\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nvar args_arr__4546__auto__ = [];\r\nvar len__4531__auto___4088 = arguments.length;\r\nvar i__4532__auto___4089 = (0);\r\nwhile(true){\r\nif((i__4532__auto___4089 < len__4531__auto___4088)){\r\nargs_arr__4546__auto__.push((arguments[i__4532__auto___4089]));\r\n\r\nvar G__4090 = (i__4532__auto___4089 + (1));\r\ni__4532__auto___4089 = G__4090;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4547__auto__ = (new cljs.core.IndexedSeq(args_arr__4546__auto__.slice((2)),(0),null));\r\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4547__auto__);\r\n\r\n}\r\n});\r\n\r\nclojure.set.difference.cljs$core$IFn$_invoke$arity$1 = (function (s1){\r\nreturn s1;\r\n});\r\n\r\nclojure.set.difference.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\r\nif((cljs.core.count(s1) < cljs.core.count(s2))){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,item){\r\nif(cljs.core.contains_QMARK_(s2,item)){\r\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(result,item);\r\n} else {\r\nreturn result;\r\n}\r\n}),s1,s1);\r\n} else {\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.disj,s1,s2);\r\n}\r\n});\r\n\r\nclojure.set.difference.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(clojure.set.difference,s1,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(sets,s2));\r\n});\r\n\r\n/** @this {Function} */\r\nclojure.set.difference.cljs$lang$applyTo = (function (seq4068){\r\nvar G__4069 = cljs.core.first(seq4068);\r\nvar seq4068__$1 = cljs.core.next(seq4068);\r\nvar G__4070 = cljs.core.first(seq4068__$1);\r\nvar seq4068__$2 = cljs.core.next(seq4068__$1);\r\nvar self__4518__auto__ = this;\r\nreturn self__4518__auto__.cljs$core$IFn$_invoke$arity$variadic(G__4069,G__4070,seq4068__$2);\r\n});\r\n\r\nclojure.set.difference.cljs$lang$maxFixedArity = (2);\r\n\r\n/**\r\n * Returns a set of the elements for which pred is true\r\n */\r\nclojure.set.select = (function clojure$set$select(pred,xset){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (s,k){\r\nif(cljs.core.truth_((pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(k) : pred.call(null,k)))){\r\nreturn s;\r\n} else {\r\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(s,k);\r\n}\r\n}),xset,xset);\r\n});\r\n/**\r\n * Returns a rel of the elements of xrel with only the keys in ks\r\n */\r\nclojure.set.project = (function clojure$set$project(xrel,ks){\r\nreturn cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__4099_SHARP_){\r\nreturn cljs.core.select_keys(p1__4099_SHARP_,ks);\r\n}),xrel));\r\n});\r\n/**\r\n * Returns the map with the keys in kmap renamed to the vals in kmap\r\n */\r\nclojure.set.rename_keys = (function clojure$set$rename_keys(map,kmap){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (m,p__4105){\r\nvar vec__4106 = p__4105;\r\nvar old = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4106,(0),null);\r\nvar new$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4106,(1),null);\r\nif(cljs.core.contains_QMARK_(map,old)){\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,new$,cljs.core.get.cljs$core$IFn$_invoke$arity$2(map,old));\r\n} else {\r\nreturn m;\r\n}\r\n}),cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.dissoc,map,cljs.core.keys(kmap)),kmap);\r\n});\r\n/**\r\n * Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap\r\n */\r\nclojure.set.rename = (function clojure$set$rename(xrel,kmap){\r\nreturn cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__4113_SHARP_){\r\nreturn clojure.set.rename_keys(p1__4113_SHARP_,kmap);\r\n}),xrel));\r\n});\r\n/**\r\n * Returns a map of the distinct values of ks in the xrel mapped to a\r\n *   set of the maps in xrel with the corresponding values of ks.\r\n */\r\nclojure.set.index = (function clojure$set$index(xrel,ks){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (m,x){\r\nvar ik = cljs.core.select_keys(x,ks);\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,ik,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(m,ik,cljs.core.PersistentHashSet.EMPTY),x));\r\n}),cljs.core.PersistentArrayMap.EMPTY,xrel);\r\n});\r\n/**\r\n * Returns the map with the vals mapped to the keys.\r\n */\r\nclojure.set.map_invert = (function clojure$set$map_invert(m){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (m__$1,p__4123){\r\nvar vec__4125 = p__4123;\r\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4125,(0),null);\r\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4125,(1),null);\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m__$1,v,k);\r\n}),cljs.core.PersistentArrayMap.EMPTY,m);\r\n});\r\n/**\r\n * When passed 2 rels, returns the rel corresponding to the natural\r\n *   join. When passed an additional keymap, joins on the corresponding\r\n *   keys.\r\n */\r\nclojure.set.join = (function clojure$set$join(var_args){\r\nvar G__4141 = arguments.length;\r\nswitch (G__4141) {\r\ncase 2:\r\nreturn clojure.set.join.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn clojure.set.join.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\nclojure.set.join.cljs$core$IFn$_invoke$arity$2 = (function (xrel,yrel){\r\nif(((cljs.core.seq(xrel)) && (cljs.core.seq(yrel)))){\r\nvar ks = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(cljs.core.first(xrel))),cljs.core.set(cljs.core.keys(cljs.core.first(yrel))));\r\nvar vec__4144 = (((cljs.core.count(xrel) <= cljs.core.count(yrel)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel,yrel], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel,xrel], null));\r\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4144,(0),null);\r\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4144,(1),null);\r\nvar idx = clojure.set.index(r,ks);\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (ks,vec__4144,r,s,idx){\r\nreturn (function (ret,x){\r\nvar found = (function (){var G__4150 = cljs.core.select_keys(x,ks);\r\nreturn (idx.cljs$core$IFn$_invoke$arity$1 ? idx.cljs$core$IFn$_invoke$arity$1(G__4150) : idx.call(null,G__4150));\r\n})();\r\nif(cljs.core.truth_(found)){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (found,ks,vec__4144,r,s,idx){\r\nreturn (function (p1__4132_SHARP_,p2__4133_SHARP_){\r\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__4132_SHARP_,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([p2__4133_SHARP_,x], 0)));\r\n});})(found,ks,vec__4144,r,s,idx))\r\n,ret,found);\r\n} else {\r\nreturn ret;\r\n}\r\n});})(ks,vec__4144,r,s,idx))\r\n,cljs.core.PersistentHashSet.EMPTY,s);\r\n} else {\r\nreturn cljs.core.PersistentHashSet.EMPTY;\r\n}\r\n});\r\n\r\nclojure.set.join.cljs$core$IFn$_invoke$arity$3 = (function (xrel,yrel,km){\r\nvar vec__4155 = (((cljs.core.count(xrel) <= cljs.core.count(yrel)))?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel,yrel,clojure.set.map_invert(km)], null):new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel,xrel,km], null));\r\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4155,(0),null);\r\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4155,(1),null);\r\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4155,(2),null);\r\nvar idx = clojure.set.index(r,cljs.core.vals(k));\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (vec__4155,r,s,k,idx){\r\nreturn (function (ret,x){\r\nvar found = (function (){var G__4161 = clojure.set.rename_keys(cljs.core.select_keys(x,cljs.core.keys(k)),k);\r\nreturn (idx.cljs$core$IFn$_invoke$arity$1 ? idx.cljs$core$IFn$_invoke$arity$1(G__4161) : idx.call(null,G__4161));\r\n})();\r\nif(cljs.core.truth_(found)){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (found,vec__4155,r,s,k,idx){\r\nreturn (function (p1__4134_SHARP_,p2__4135_SHARP_){\r\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__4134_SHARP_,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([p2__4135_SHARP_,x], 0)));\r\n});})(found,vec__4155,r,s,k,idx))\r\n,ret,found);\r\n} else {\r\nreturn ret;\r\n}\r\n});})(vec__4155,r,s,k,idx))\r\n,cljs.core.PersistentHashSet.EMPTY,s);\r\n});\r\n\r\nclojure.set.join.cljs$lang$maxFixedArity = 3;\r\n\r\n/**\r\n * Is set1 a subset of set2?\r\n */\r\nclojure.set.subset_QMARK_ = (function clojure$set$subset_QMARK_(set1,set2){\r\nreturn (((cljs.core.count(set1) <= cljs.core.count(set2))) && (cljs.core.every_QMARK_((function (p1__4176_SHARP_){\r\nreturn cljs.core.contains_QMARK_(set2,p1__4176_SHARP_);\r\n}),set1)));\r\n});\r\n/**\r\n * Is set1 a superset of set2?\r\n */\r\nclojure.set.superset_QMARK_ = (function clojure$set$superset_QMARK_(set1,set2){\r\nreturn (((cljs.core.count(set1) >= cljs.core.count(set2))) && (cljs.core.every_QMARK_((function (p1__4183_SHARP_){\r\nreturn cljs.core.contains_QMARK_(set1,p1__4183_SHARP_);\r\n}),set2)));\r\n});\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/set.cljs","~:line",11,"~:column",8,"~:end-line",11,"~:end-column",19,"~:doc","Set operations such as union/intersection.","~:author","Rich Hickey"],"~:ns-aliases",["^ ","~$clojure.pprint","~$cljs.pprint","~$clojure.repl","~$cljs.repl","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$clojure.set","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^O","~$goog","^P"],"~:seen",["^H",[]],"~:uses",null,"~:require-macros",["^ ","^O","^O"],"~:form",["~#list",["~$ns","^J"]],"~:js-deps",["^ "],"~:deps",["^P","^O"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","clojure/set.cljs"],"~:compiled-at",1533407582823,"~:resource-name","clojure/set.cljs","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:doc \"Set operations such as union/intersection.\"\n       :author \"Rich Hickey\"}\n       clojure.set)\n\n(defn- bubble-max-key [k coll]\n  \"Move a maximal element of coll according to fn k (which returns a number) \n   to the front of coll.\"\n  (let [max (apply max-key k coll)]\n    (cons max (remove #(identical? max %) coll))))\n\n(defn union\n  \"Return a set that is the union of the input sets\"\n  ([] #{})\n  ([s1] s1)\n  ([s1 s2]\n     (if (< (count s1) (count s2))\n       (reduce conj s2 s1)\n       (reduce conj s1 s2)))\n  ([s1 s2 & sets]\n     (let [bubbled-sets (bubble-max-key count (conj sets s2 s1))]\n       (reduce into (first bubbled-sets) (rest bubbled-sets)))))\n\n(defn intersection\n  \"Return a set that is the intersection of the input sets\"\n  ([s1] s1)\n  ([s1 s2]\n     (if (< (count s2) (count s1))\n       (recur s2 s1)\n       (reduce (fn [result item]\n                   (if (contains? s2 item)\n\t\t     result\n                     (disj result item)))\n\t       s1 s1)))\n  ([s1 s2 & sets] \n     (let [bubbled-sets (bubble-max-key #(- (count %)) (conj sets s2 s1))]\n       (reduce intersection (first bubbled-sets) (rest bubbled-sets)))))\n\n(defn difference\n  \"Return a set that is the first set without elements of the remaining sets\"\n  ([s1] s1)\n  ([s1 s2] \n     (if (< (count s1) (count s2))\n       (reduce (fn [result item] \n                   (if (contains? s2 item) \n                     (disj result item) \n                     result))\n               s1 s1)\n       (reduce disj s1 s2)))\n  ([s1 s2 & sets] \n     (reduce difference s1 (conj sets s2))))\n\n\n(defn select\n  \"Returns a set of the elements for which pred is true\"\n  [pred xset]\n    (reduce (fn [s k] (if (pred k) s (disj s k)))\n            xset xset))\n\n(defn project\n  \"Returns a rel of the elements of xrel with only the keys in ks\"\n  [xrel ks]\n    (set (map #(select-keys % ks) xrel)))\n\n(defn rename-keys\n  \"Returns the map with the keys in kmap renamed to the vals in kmap\"\n  [map kmap]\n    (reduce\n     (fn [m [old new]]\n       (if (contains? map old)\n         (assoc m new (get map old))\n         m))\n     (apply dissoc map (keys kmap)) kmap))\n\n(defn rename\n  \"Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap\"\n  [xrel kmap]\n    (set (map #(rename-keys % kmap) xrel)))\n\n(defn index\n  \"Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks.\"\n  [xrel ks]\n    (reduce\n     (fn [m x]\n       (let [ik (select-keys x ks)]\n         (assoc m ik (conj (get m ik #{}) x))))\n     {} xrel))\n   \n(defn map-invert\n  \"Returns the map with the vals mapped to the keys.\"\n  [m] (reduce (fn [m [k v]] (assoc m v k)) {} m))\n\n(defn join\n  \"When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.\"\n  ([xrel yrel] ;natural join\n   (if (and (seq xrel) (seq yrel))\n     (let [ks (intersection (set (keys (first xrel))) (set (keys (first yrel))))\n           [r s] (if (<= (count xrel) (count yrel))\n                   [xrel yrel]\n                   [yrel xrel])\n           idx (index r ks)]\n       (reduce (fn [ret x]\n                 (let [found (idx (select-keys x ks))]\n                   (if found\n                     (reduce #(conj %1 (merge %2 x)) ret found)\n                     ret)))\n               #{} s))\n     #{}))\n  ([xrel yrel km] ;arbitrary key mapping\n   (let [[r s k] (if (<= (count xrel) (count yrel))\n                   [xrel yrel (map-invert km)]\n                   [yrel xrel km])\n         idx (index r (vals k))]\n     (reduce (fn [ret x]\n               (let [found (idx (rename-keys (select-keys x (keys k)) k))]\n                 (if found\n                   (reduce #(conj %1 (merge %2 x)) ret found)\n                   ret)))\n             #{} s))))\n\n(defn subset? \n  \"Is set1 a subset of set2?\"\n  [set1 set2]\n  (and (<= (count set1) (count set2))\n       (every? #(contains? set2 %) set1)))\n\n(defn superset? \n  \"Is set1 a superset of set2?\"\n  [set1 set2]\n  (and (>= (count set1) (count set2))\n       (every? #(contains? set1 %) set2)))\n\n(comment\n(refer 'set)\n(def xs #{{:a 11 :b 1 :c 1 :d 4}\n         {:a 2 :b 12 :c 2 :d 6}\n         {:a 3 :b 3 :c 3 :d 8 :f 42}})\n\n(def ys #{{:a 11 :b 11 :c 11 :e 5}\n         {:a 12 :b 11 :c 12 :e 3}\n         {:a 3 :b 3 :c 3 :e 7 }})\n\n(join xs ys)\n(join xs (rename ys {:b :yb :c :yc}) {:a :a})\n\n(union #{:a :b :c} #{:c :d :e })\n(difference #{:a :b :c} #{:c :d :e})\n(intersection #{:a :b :c} #{:c :d :e})\n\n(index ys [:b]))\n\n","~:reader-features",["^H",["~:cljs"]],"~:source-map",["^ ","~i12",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",2],["^ ","^17",29,"^18",2],["^ ","^17",0,"^18",3],["^ ","^17",0,"^18",3]],"~i7",[["^ ","^17",0,"^18",2,"^I","clojure.set/bubble-max-key"]],"~i23",[["^ ","^17",66,"^18",2,"^I","k"]],"~i25",[["^ ","^17",68,"^18",2,"^I","coll"]]],"~i15",["^ ","~i2",[["^ ","^17",0,"^18",4],["^ ","^17",0,"^18",5]],"~i8",[["^ ","^17",4,"^18",4,"^I","max"]],"^16",[["^ ","^17",10,"^18",4]],"~i13",[["^ ","^17",10,"^18",4,"^I","cljs.core.apply.cljs$core$IFn$_invoke$arity$3"]],"~i19",[["^ ","^17",56,"^18",4,"^I","cljs.core/max-key"]],"~i27",[["^ ","^17",74,"^18",4,"^I","k"]],"~i29",[["^ ","^17",76,"^18",4,"^I","coll"]]],"~i16",["^ ","~i4",[["^ ","^17",0,"^18",5]],"~i5",[["^ ","^17",7,"^18",5,"^I","cljs.core/cons"]],"~i10",[["^ ","^17",22,"^18",5,"^I","max"]],"~i14",[["^ ","^17",26,"^18",5],["^ ","^17",73,"^18",5],["^ ","^17",18,"^18",6,"^I","p1__3996#"],["^ ","^17",0,"^18",7]],"^1;",[["^ ","^17",26,"^18",5,"^I","cljs.core.remove.cljs$core$IFn$_invoke$arity$2"]],"^19",[["^ ","^17",0,"^18",7],["^ ","^17",16,"^18",7,"^I","p1__3996#"]],"~i35",[["^ ","^17",8,"^18",7,"^I","max"]],"~i42",[["^ ","^17",1,"^18",9,"^I","coll"]]],"~i18",["^ ","~i0",[["^ ","^17",0,"^18",11],["^ ","^17",0,"^18",11],["^ ","^17",20,"^18",14],["^ ","^17",48,"^18",14,"^I","var_args"],["^ ","^17",0,"^18",15],["^ ","^17",0,"^18",15],["^ ","^17",4,"^18",15,"^I","G__4004"],["^ ","^17",14,"^18",15],["^ ","^17",14,"^18",15],["^ ","^17",0,"^18",16],["^ ","^17",0,"^18",16],["^ ","^17",8,"^18",16,"^I","G__4004"],["^ ","^17",5,"^18",17],["^ ","^17",0,"^18",18],["^ ","^17",7,"^18",18,"^I","clojure.set/union"],["^ ","^17",5,"^18",21],["^ ","^17",0,"^18",22],["^ ","^17",7,"^18",22,"^I","clojure.set/union"],["^ ","^17",55,"^18",22],["^ ","^17",56,"^18",22],["^ ","^17",66,"^18",22],["^ ","^17",5,"^18",25],["^ ","^17",0,"^18",26],["^ ","^17",7,"^18",26,"^I","clojure.set/union"],["^ ","^17",55,"^18",26],["^ ","^17",56,"^18",26],["^ ","^17",66,"^18",26],["^ ","^17",72,"^18",26],["^ ","^17",73,"^18",26],["^ ","^17",83,"^18",26],["^ ","^17",0,"^18",30],["^ ","^17",4,"^18",30,"^I","args-arr__4546__auto__"],["^ ","^17",29,"^18",30],["^ ","^17",0,"^18",31],["^ ","^17",0,"^18",31],["^ ","^17",4,"^18",31,"^I","len__4531__auto__"],["^ ","^17",29,"^18",31],["^ ","^17",29,"^18",31],["^ ","^17",0,"^18",32],["^ ","^17",0,"^18",32],["^ ","^17",4,"^18",32,"^I","i__4532__auto__"],["^ ","^17",27,"^18",32],["^ ","^17",0,"^18",34],["^ ","^17",0,"^18",34],["^ ","^17",3,"^18",34],["^ ","^17",4,"^18",34,"^I","i__4532__auto__"],["^ ","^17",27,"^18",34,"^I","len__4531__auto__"],["^ ","^17",0,"^18",35],["^ ","^17",0,"^18",35],["^ ","^17",0,"^18",35,"^I","args-arr__4546__auto__"],["^ ","^17",28,"^18",35],["^ ","^17",29,"^18",35],["^ ","^17",39,"^18",35,"^I","i__4532__auto__"],["^ ","^17",0,"^18",37],["^ ","^17",14,"^18",37],["^ ","^17",15,"^18",37,"^I","i__4532__auto__"],["^ ","^17",38,"^18",37],["^ ","^17",0,"^18",41],["^ ","^17",0,"^18",45],["^ ","^17",4,"^18",45,"^I","argseq__4547__auto__"],["^ ","^17",27,"^18",45],["^ ","^17",32,"^18",45,"^I","cljs.core/IndexedSeq"],["^ ","^17",53,"^18",45],["^ ","^17",53,"^18",45,"^I","args-arr__4546__auto__"],["^ ","^17",82,"^18",45],["^ ","^17",87,"^18",45],["^ ","^17",91,"^18",45],["^ ","^17",0,"^18",46],["^ ","^17",0,"^18",46],["^ ","^17",7,"^18",46,"^I","clojure.set/union"],["^ ","^17",62,"^18",46],["^ ","^17",63,"^18",46],["^ ","^17",73,"^18",46],["^ ","^17",79,"^18",46],["^ ","^17",80,"^18",46],["^ ","^17",90,"^18",46],["^ ","^17",96,"^18",46,"^I","argseq__4547__auto__"],["^ ","^17",0,"^18",51],["^ ","^17",0,"^18",51],["^ ","^17",50,"^18",51],["^ ","^17",0,"^18",52],["^ ","^17",0,"^18",52],["^ ","^17",0,"^18",55],["^ ","^17",0,"^18",55],["^ ","^17",50,"^18",55],["^ ","^17",0,"^18",56],["^ ","^17",0,"^18",59],["^ ","^17",0,"^18",59],["^ ","^17",50,"^18",59],["^ ","^17",0,"^18",60],["^ ","^17",0,"^18",67],["^ ","^17",0,"^18",67],["^ ","^17",0,"^18",67],["^ ","^17",57,"^18",67],["^ ","^17",0,"^18",68],["^ ","^17",0,"^18",72],["^ ","^17",0,"^18",73],["^ ","^17",0,"^18",73],["^ ","^17",38,"^18",73],["^ ","^17",49,"^18",73,"^I","seq4000"],["^ ","^17",0,"^18",74],["^ ","^17",0,"^18",74],["^ ","^17",4,"^18",74,"^I","G__4001"],["^ ","^17",14,"^18",74],["^ ","^17",14,"^18",74,"^I","cljs.core/first"],["^ ","^17",30,"^18",74,"^I","seq4000"],["^ ","^17",4,"^18",75,"^I","seq4000"],["^ ","^17",18,"^18",75],["^ ","^17",18,"^18",75,"^I","cljs.core/next"],["^ ","^17",33,"^18",75,"^I","seq4000"],["^ ","^17",4,"^18",76,"^I","G__4002"],["^ ","^17",14,"^18",76],["^ ","^17",14,"^18",76,"^I","cljs.core/first"],["^ ","^17",30,"^18",76,"^I","seq4000"],["^ ","^17",4,"^18",77,"^I","seq4000"],["^ ","^17",18,"^18",77],["^ ","^17",18,"^18",77,"^I","cljs.core/next"],["^ ","^17",33,"^18",77,"^I","seq4000"],["^ ","^17",0,"^18",78],["^ ","^17",0,"^18",78],["^ ","^17",4,"^18",78,"^I","self__4518__auto__"],["^ ","^17",25,"^18",78],["^ ","^17",0,"^18",79],["^ ","^17",0,"^18",79],["^ ","^17",7,"^18",79,"^I","self__4518__auto__"],["^ ","^17",63,"^18",79,"^I","G__4001"],["^ ","^17",71,"^18",79,"^I","G__4002"],["^ ","^17",79,"^18",79,"^I","seq4000"],["^ ","^17",0,"^18",82],["^ ","^17",0,"^18",82],["^ ","^17",44,"^18",82],["^ ","^17",0,"^18",84]],"~i6",[["^ ","^17",0,"^18",14,"^I","clojure.set/union"],["^ ","^17",0,"^18",51,"^I","clojure.set/union"],["^ ","^17",0,"^18",55,"^I","clojure.set/union"],["^ ","^17",0,"^18",59,"^I","clojure.set/union"],["^ ","^17",0,"^18",67,"^I","clojure.set/union"],["^ ","^17",0,"^18",73,"^I","clojure.set/union"],["^ ","^17",0,"^18",82,"^I","clojure.set/union"]]],"~i21",["^ ","~i4",[["^ ","^17",61,"^18",55,"^I","s1"]],"~i8",[["^ ","^17",0,"^18",56,"^I","s1"]]],"~i22",["^ ","~i4",[["^ ","^17",61,"^18",59,"^I","s1"]],"~i7",[["^ ","^17",64,"^18",59,"^I","s2"]]],"^19",["^ ","~i5",[["^ ","^17",0,"^18",60]],"~i9",[["^ ","^17",3,"^18",60]],"^16",[["^ ","^17",4,"^18",60]],"^1<",[["^ ","^17",4,"^18",60,"^I","cljs.core/count"]],"^1=",[["^ ","^17",20,"^18",60,"^I","s1"]],"^19",[["^ ","^17",26,"^18",60]],"~i24",[["^ ","^17",26,"^18",60,"^I","cljs.core/count"]],"~i30",[["^ ","^17",42,"^18",60,"^I","s2"]]],"^1H",["^ ","~i7",[["^ ","^17",0,"^18",61]],"~i8",[["^ ","^17",7,"^18",61,"^I","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^1;",[["^ ","^17",54,"^18",61,"^I","cljs.core/conj"]],"~i20",[["^ ","^17",69,"^18",61,"^I","s2"]],"^19",[["^ ","^17",72,"^18",61,"^I","s1"]]],"^1:",["^ ","~i7",[["^ ","^17",0,"^18",63]],"~i8",[["^ ","^17",7,"^18",63,"^I","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^1;",[["^ ","^17",54,"^18",63,"^I","cljs.core/conj"]],"^1J",[["^ ","^17",69,"^18",63,"^I","s1"]],"^19",[["^ ","^17",72,"^18",63,"^I","s2"]]],"~i26",["^ ","~i4",[["^ ","^17",68,"^18",67,"^I","s1"]],"~i7",[["^ ","^17",71,"^18",67,"^I","s2"]],"^16",[["^ ","^17",74,"^18",67,"^I","sets"]]],"^1>",["^ ","~i5",[["^ ","^17",0,"^18",68],["^ ","^17",0,"^18",69]],"~i11",[["^ ","^17",4,"^18",68,"^I","bubbled-sets"]],"^1H",[["^ ","^17",19,"^18",68]],"^1:",[["^ ","^17",19,"^18",68,"^I","clojure.set/bubble-max-key"]],"~i40",[["^ ","^17",46,"^18",68,"^I","cljs.core/count"]],"~i46",[["^ ","^17",62,"^18",68]],"~i47",[["^ ","^17",62,"^18",68,"^I","cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic"]],"~i52",[["^ ","^17",114,"^18",68,"^I","sets"]],"~i57",[["^ ","^17",119,"^18",68,"^I","s2"]],"~i60",[["^ ","^17",172,"^18",68,"^I","s1"]]],"~i28",["^ ","~i7",[["^ ","^17",0,"^18",69]],"~i8",[["^ ","^17",7,"^18",69,"^I","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^1;",[["^ ","^17",54,"^18",69,"^I","cljs.core/into"]],"^1J",[["^ ","^17",69,"^18",69]],"^1F",[["^ ","^17",69,"^18",69,"^I","cljs.core/first"]],"^1>",[["^ ","^17",85,"^18",69,"^I","bubbled-sets"]],"~i41",[["^ ","^17",99,"^18",69]],"^1D",[["^ ","^17",99,"^18",69,"^I","cljs.core/rest"]],"^1O",[["^ ","^17",114,"^18",69,"^I","bubbled-sets"]]],"^1I",["^ ","~i0",[["^ ","^17",0,"^18",84],["^ ","^17",0,"^18",84],["^ ","^17",27,"^18",87],["^ ","^17",62,"^18",87,"^I","var_args"],["^ ","^17",0,"^18",88],["^ ","^17",0,"^18",88],["^ ","^17",4,"^18",88,"^I","G__4040"],["^ ","^17",14,"^18",88],["^ ","^17",14,"^18",88],["^ ","^17",0,"^18",89],["^ ","^17",0,"^18",89],["^ ","^17",8,"^18",89,"^I","G__4040"],["^ ","^17",5,"^18",90],["^ ","^17",0,"^18",91],["^ ","^17",7,"^18",91,"^I","clojure.set/intersection"],["^ ","^17",62,"^18",91],["^ ","^17",63,"^18",91],["^ ","^17",73,"^18",91],["^ ","^17",5,"^18",94],["^ ","^17",0,"^18",95],["^ ","^17",7,"^18",95,"^I","clojure.set/intersection"],["^ ","^17",62,"^18",95],["^ ","^17",63,"^18",95],["^ ","^17",73,"^18",95],["^ ","^17",79,"^18",95],["^ ","^17",80,"^18",95],["^ ","^17",90,"^18",95],["^ ","^17",0,"^18",99],["^ ","^17",4,"^18",99,"^I","args-arr__4546__auto__"],["^ ","^17",29,"^18",99],["^ ","^17",0,"^18",100],["^ ","^17",0,"^18",100],["^ ","^17",4,"^18",100,"^I","len__4531__auto__"],["^ ","^17",29,"^18",100],["^ ","^17",29,"^18",100],["^ ","^17",0,"^18",101],["^ ","^17",0,"^18",101],["^ ","^17",4,"^18",101,"^I","i__4532__auto__"],["^ ","^17",27,"^18",101],["^ ","^17",0,"^18",103],["^ ","^17",0,"^18",103],["^ ","^17",3,"^18",103],["^ ","^17",4,"^18",103,"^I","i__4532__auto__"],["^ ","^17",27,"^18",103,"^I","len__4531__auto__"],["^ ","^17",0,"^18",104],["^ ","^17",0,"^18",104],["^ ","^17",0,"^18",104,"^I","args-arr__4546__auto__"],["^ ","^17",28,"^18",104],["^ ","^17",29,"^18",104],["^ ","^17",39,"^18",104,"^I","i__4532__auto__"],["^ ","^17",0,"^18",106],["^ ","^17",14,"^18",106],["^ ","^17",15,"^18",106,"^I","i__4532__auto__"],["^ ","^17",38,"^18",106],["^ ","^17",0,"^18",110],["^ ","^17",0,"^18",114],["^ ","^17",4,"^18",114,"^I","argseq__4547__auto__"],["^ ","^17",27,"^18",114],["^ ","^17",32,"^18",114,"^I","cljs.core/IndexedSeq"],["^ ","^17",53,"^18",114],["^ ","^17",53,"^18",114,"^I","args-arr__4546__auto__"],["^ ","^17",82,"^18",114],["^ ","^17",87,"^18",114],["^ ","^17",91,"^18",114],["^ ","^17",0,"^18",115],["^ ","^17",0,"^18",115],["^ ","^17",7,"^18",115,"^I","clojure.set/intersection"],["^ ","^17",69,"^18",115],["^ ","^17",70,"^18",115],["^ ","^17",80,"^18",115],["^ ","^17",86,"^18",115],["^ ","^17",87,"^18",115],["^ ","^17",97,"^18",115],["^ ","^17",103,"^18",115,"^I","argseq__4547__auto__"],["^ ","^17",0,"^18",120],["^ ","^17",0,"^18",120],["^ ","^17",57,"^18",120],["^ ","^17",0,"^18",121],["^ ","^17",0,"^18",124],["^ ","^17",0,"^18",124],["^ ","^17",57,"^18",124],["^ ","^17",0,"^18",126],["^ ","^17",0,"^18",147],["^ ","^17",0,"^18",147],["^ ","^17",0,"^18",147],["^ ","^17",64,"^18",147],["^ ","^17",0,"^18",148],["^ ","^17",0,"^18",154],["^ ","^17",0,"^18",155],["^ ","^17",0,"^18",155],["^ ","^17",45,"^18",155],["^ ","^17",56,"^18",155,"^I","seq4034"],["^ ","^17",0,"^18",156],["^ ","^17",0,"^18",156],["^ ","^17",4,"^18",156,"^I","G__4036"],["^ ","^17",14,"^18",156],["^ ","^17",14,"^18",156,"^I","cljs.core/first"],["^ ","^17",30,"^18",156,"^I","seq4034"],["^ ","^17",4,"^18",157,"^I","seq4034"],["^ ","^17",18,"^18",157],["^ ","^17",18,"^18",157,"^I","cljs.core/next"],["^ ","^17",33,"^18",157,"^I","seq4034"],["^ ","^17",4,"^18",158,"^I","G__4037"],["^ ","^17",14,"^18",158],["^ ","^17",14,"^18",158,"^I","cljs.core/first"],["^ ","^17",30,"^18",158,"^I","seq4034"],["^ ","^17",4,"^18",159,"^I","seq4034"],["^ ","^17",18,"^18",159],["^ ","^17",18,"^18",159,"^I","cljs.core/next"],["^ ","^17",33,"^18",159,"^I","seq4034"],["^ ","^17",0,"^18",160],["^ ","^17",0,"^18",160],["^ ","^17",4,"^18",160,"^I","self__4518__auto__"],["^ ","^17",25,"^18",160],["^ ","^17",0,"^18",161],["^ ","^17",0,"^18",161],["^ ","^17",7,"^18",161,"^I","self__4518__auto__"],["^ ","^17",63,"^18",161,"^I","G__4036"],["^ ","^17",71,"^18",161,"^I","G__4037"],["^ ","^17",79,"^18",161,"^I","seq4034"],["^ ","^17",0,"^18",164],["^ ","^17",0,"^18",164],["^ ","^17",51,"^18",164],["^ ","^17",0,"^18",166]],"~i6",[["^ ","^17",0,"^18",87,"^I","clojure.set/intersection"],["^ ","^17",0,"^18",120,"^I","clojure.set/intersection"],["^ ","^17",0,"^18",124,"^I","clojure.set/intersection"],["^ ","^17",0,"^18",147,"^I","clojure.set/intersection"],["^ ","^17",0,"^18",155,"^I","clojure.set/intersection"],["^ ","^17",0,"^18",164,"^I","clojure.set/intersection"]]],"~i32",["^ ","~i4",[["^ ","^17",68,"^18",120,"^I","s1"]],"~i8",[["^ ","^17",0,"^18",121,"^I","s1"]]],"~i33",["^ ","~i4",[["^ ","^17",68,"^18",124,"^I","s1"]],"~i7",[["^ ","^17",71,"^18",124,"^I","s2"]]],"~i34",["^ ","~i5",[["^ ","^17",0,"^18",126]],"~i9",[["^ ","^17",3,"^18",126]],"^16",[["^ ","^17",4,"^18",126]],"^1<",[["^ ","^17",4,"^18",126,"^I","cljs.core/count"]],"^1=",[["^ ","^17",20,"^18",126,"^I","s2"]],"^19",[["^ ","^17",26,"^18",126]],"^1H",[["^ ","^17",26,"^18",126,"^I","cljs.core/count"]],"^1I",[["^ ","^17",42,"^18",126,"^I","s1"]]],"^1C",["^ ","~i7",[["^ ","^17",0,"^18",127]],"^1B",[["^ ","^17",14,"^18",127,"^I","s2"]],"~i17",[["^ ","^17",14,"^18",128,"^I","s1"]]],"~i36",["^ ","~i7",[["^ ","^17",0,"^18",133]],"~i8",[["^ ","^17",7,"^18",133,"^I","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^1;",[["^ ","^17",54,"^18",133],["^ ","^17",0,"^18",135]],"^1J",[["^ ","^17",18,"^18",134,"^I","result"]],"^1>",[["^ ","^17",25,"^18",134,"^I","item"]]],"~i37",["^ ","^1=",[["^ ","^17",0,"^18",135]],"^19",[["^ ","^17",3,"^18",135]],"^1H",[["^ ","^17",3,"^18",135,"^I","cljs.core/contains?"]],"^1W",[["^ ","^17",29,"^18",135,"^I","s2"]],"^1Z",[["^ ","^17",32,"^18",135,"^I","item"]]],"~i38",["^ ","~i7",[["^ ","^17",0,"^18",136,"^I","result"]]],"~i39",["^ ","^1F",[["^ ","^17",0,"^18",138]],"^1G",[["^ ","^17",7,"^18",138,"^I","cljs.core.disj.cljs$core$IFn$_invoke$arity$2"]],"^1>",[["^ ","^17",52,"^18",138,"^I","result"]],"^1W",[["^ ","^17",59,"^18",138,"^I","item"]]],"^1M",["^ ","~i8",[["^ ","^17",1,"^18",141,"^I","s1"]],"^1L",[["^ ","^17",4,"^18",141,"^I","s1"]]],"^1T",["^ ","~i4",[["^ ","^17",75,"^18",147,"^I","s1"]],"~i7",[["^ ","^17",78,"^18",147,"^I","s2"]],"^16",[["^ ","^17",81,"^18",147,"^I","sets"]]],"^1D",["^ ","~i5",[["^ ","^17",0,"^18",148],["^ ","^17",0,"^18",151]],"^1L",[["^ ","^17",4,"^18",148,"^I","bubbled-sets"]],"^1H",[["^ ","^17",19,"^18",148],["^ ","^17",46,"^18",148],["^ ","^17",57,"^18",148,"^I","p1__4028#"],["^ ","^17",0,"^18",149]],"^1:",[["^ ","^17",19,"^18",148,"^I","clojure.set/bubble-max-key"]],"^1T",[["^ ","^17",0,"^18",149]],"~i44",[["^ ","^17",10,"^18",149],["^ ","^17",26,"^18",149,"^I","p1__4028#"]],"~i45",[["^ ","^17",10,"^18",149,"^I","cljs.core/count"]],"~i55",[["^ ","^17",3,"^18",150]],"~i56",[["^ ","^17",3,"^18",150,"^I","cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic"]],"~i61",[["^ ","^17",55,"^18",150,"^I","sets"]],"~i66",[["^ ","^17",60,"^18",150,"^I","s2"]],"~i69",[["^ ","^17",113,"^18",150,"^I","s1"]]],"~i43",["^ ","~i7",[["^ ","^17",0,"^18",151]],"~i8",[["^ ","^17",7,"^18",151,"^I","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^1;",[["^ ","^17",54,"^18",151,"^I","clojure.set/intersection"]],"^1S",[["^ ","^17",79,"^18",151]],"^1?",[["^ ","^17",79,"^18",151,"^I","cljs.core/first"]],"^1C",[["^ ","^17",95,"^18",151,"^I","bubbled-sets"]],"~i49",[["^ ","^17",109,"^18",151]],"~i50",[["^ ","^17",109,"^18",151,"^I","cljs.core/rest"]],"^23",[["^ ","^17",124,"^18",151,"^I","bubbled-sets"]]],"^22",["^ ","~i0",[["^ ","^17",0,"^18",166],["^ ","^17",0,"^18",166],["^ ","^17",25,"^18",169],["^ ","^17",58,"^18",169,"^I","var_args"],["^ ","^17",0,"^18",170],["^ ","^17",0,"^18",170],["^ ","^17",4,"^18",170,"^I","G__4072"],["^ ","^17",14,"^18",170],["^ ","^17",14,"^18",170],["^ ","^17",0,"^18",171],["^ ","^17",0,"^18",171],["^ ","^17",8,"^18",171,"^I","G__4072"],["^ ","^17",5,"^18",172],["^ ","^17",0,"^18",173],["^ ","^17",7,"^18",173,"^I","clojure.set/difference"],["^ ","^17",60,"^18",173],["^ ","^17",61,"^18",173],["^ ","^17",71,"^18",173],["^ ","^17",5,"^18",176],["^ ","^17",0,"^18",177],["^ ","^17",7,"^18",177,"^I","clojure.set/difference"],["^ ","^17",60,"^18",177],["^ ","^17",61,"^18",177],["^ ","^17",71,"^18",177],["^ ","^17",77,"^18",177],["^ ","^17",78,"^18",177],["^ ","^17",88,"^18",177],["^ ","^17",0,"^18",181],["^ ","^17",4,"^18",181,"^I","args-arr__4546__auto__"],["^ ","^17",29,"^18",181],["^ ","^17",0,"^18",182],["^ ","^17",0,"^18",182],["^ ","^17",4,"^18",182,"^I","len__4531__auto__"],["^ ","^17",29,"^18",182],["^ ","^17",29,"^18",182],["^ ","^17",0,"^18",183],["^ ","^17",0,"^18",183],["^ ","^17",4,"^18",183,"^I","i__4532__auto__"],["^ ","^17",27,"^18",183],["^ ","^17",0,"^18",185],["^ ","^17",0,"^18",185],["^ ","^17",3,"^18",185],["^ ","^17",4,"^18",185,"^I","i__4532__auto__"],["^ ","^17",27,"^18",185,"^I","len__4531__auto__"],["^ ","^17",0,"^18",186],["^ ","^17",0,"^18",186],["^ ","^17",0,"^18",186,"^I","args-arr__4546__auto__"],["^ ","^17",28,"^18",186],["^ ","^17",29,"^18",186],["^ ","^17",39,"^18",186,"^I","i__4532__auto__"],["^ ","^17",0,"^18",188],["^ ","^17",14,"^18",188],["^ ","^17",15,"^18",188,"^I","i__4532__auto__"],["^ ","^17",38,"^18",188],["^ ","^17",0,"^18",192],["^ ","^17",0,"^18",196],["^ ","^17",4,"^18",196,"^I","argseq__4547__auto__"],["^ ","^17",27,"^18",196],["^ ","^17",32,"^18",196,"^I","cljs.core/IndexedSeq"],["^ ","^17",53,"^18",196],["^ ","^17",53,"^18",196,"^I","args-arr__4546__auto__"],["^ ","^17",82,"^18",196],["^ ","^17",87,"^18",196],["^ ","^17",91,"^18",196],["^ ","^17",0,"^18",197],["^ ","^17",0,"^18",197],["^ ","^17",7,"^18",197,"^I","clojure.set/difference"],["^ ","^17",67,"^18",197],["^ ","^17",68,"^18",197],["^ ","^17",78,"^18",197],["^ ","^17",84,"^18",197],["^ ","^17",85,"^18",197],["^ ","^17",95,"^18",197],["^ ","^17",101,"^18",197,"^I","argseq__4547__auto__"],["^ ","^17",0,"^18",202],["^ ","^17",0,"^18",202],["^ ","^17",55,"^18",202],["^ ","^17",0,"^18",203],["^ ","^17",0,"^18",206],["^ ","^17",0,"^18",206],["^ ","^17",55,"^18",206],["^ ","^17",0,"^18",207],["^ ","^17",0,"^18",220],["^ ","^17",0,"^18",220],["^ ","^17",0,"^18",220],["^ ","^17",62,"^18",220],["^ ","^17",0,"^18",221],["^ ","^17",0,"^18",224],["^ ","^17",0,"^18",225],["^ ","^17",0,"^18",225],["^ ","^17",43,"^18",225],["^ ","^17",54,"^18",225,"^I","seq4068"],["^ ","^17",0,"^18",226],["^ ","^17",0,"^18",226],["^ ","^17",4,"^18",226,"^I","G__4069"],["^ ","^17",14,"^18",226],["^ ","^17",14,"^18",226,"^I","cljs.core/first"],["^ ","^17",30,"^18",226,"^I","seq4068"],["^ ","^17",4,"^18",227,"^I","seq4068"],["^ ","^17",18,"^18",227],["^ ","^17",18,"^18",227,"^I","cljs.core/next"],["^ ","^17",33,"^18",227,"^I","seq4068"],["^ ","^17",4,"^18",228,"^I","G__4070"],["^ ","^17",14,"^18",228],["^ ","^17",14,"^18",228,"^I","cljs.core/first"],["^ ","^17",30,"^18",228,"^I","seq4068"],["^ ","^17",4,"^18",229,"^I","seq4068"],["^ ","^17",18,"^18",229],["^ ","^17",18,"^18",229,"^I","cljs.core/next"],["^ ","^17",33,"^18",229,"^I","seq4068"],["^ ","^17",0,"^18",230],["^ ","^17",0,"^18",230],["^ ","^17",4,"^18",230,"^I","self__4518__auto__"],["^ ","^17",25,"^18",230],["^ ","^17",0,"^18",231],["^ ","^17",0,"^18",231],["^ ","^17",7,"^18",231,"^I","self__4518__auto__"],["^ ","^17",63,"^18",231,"^I","G__4069"],["^ ","^17",71,"^18",231,"^I","G__4070"],["^ ","^17",79,"^18",231,"^I","seq4068"],["^ ","^17",0,"^18",234],["^ ","^17",0,"^18",234],["^ ","^17",49,"^18",234],["^ ","^17",0,"^18",236]],"~i6",[["^ ","^17",0,"^18",169,"^I","clojure.set/difference"],["^ ","^17",0,"^18",202,"^I","clojure.set/difference"],["^ ","^17",0,"^18",206,"^I","clojure.set/difference"],["^ ","^17",0,"^18",220,"^I","clojure.set/difference"],["^ ","^17",0,"^18",225,"^I","clojure.set/difference"],["^ ","^17",0,"^18",234,"^I","clojure.set/difference"]]],"^1O",["^ ","~i4",[["^ ","^17",66,"^18",202,"^I","s1"]],"~i8",[["^ ","^17",0,"^18",203,"^I","s1"]]],"~i48",["^ ","~i4",[["^ ","^17",66,"^18",206,"^I","s1"]],"~i7",[["^ ","^17",69,"^18",206,"^I","s2"]]],"^29",["^ ","~i5",[["^ ","^17",0,"^18",207]],"~i9",[["^ ","^17",3,"^18",207]],"^16",[["^ ","^17",4,"^18",207]],"^1<",[["^ ","^17",4,"^18",207,"^I","cljs.core/count"]],"^1=",[["^ ","^17",20,"^18",207,"^I","s1"]],"^19",[["^ ","^17",26,"^18",207]],"^1H",[["^ ","^17",26,"^18",207,"^I","cljs.core/count"]],"^1I",[["^ ","^17",42,"^18",207,"^I","s2"]]],"^2:",["^ ","~i7",[["^ ","^17",0,"^18",208]],"~i8",[["^ ","^17",7,"^18",208,"^I","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^1;",[["^ ","^17",54,"^18",208],["^ ","^17",0,"^18",209]],"^1J",[["^ ","^17",65,"^18",208,"^I","result"]],"^1>",[["^ ","^17",72,"^18",208,"^I","item"]]],"~i51",["^ ","^1=",[["^ ","^17",0,"^18",209]],"^19",[["^ ","^17",3,"^18",209]],"^1H",[["^ ","^17",3,"^18",209,"^I","cljs.core/contains?"]],"^1W",[["^ ","^17",29,"^18",209,"^I","s2"]],"^1Z",[["^ ","^17",32,"^18",209,"^I","item"]]],"^1P",["^ ","^1F",[["^ ","^17",0,"^18",210]],"^1G",[["^ ","^17",7,"^18",210,"^I","cljs.core.disj.cljs$core$IFn$_invoke$arity$2"]],"^1>",[["^ ","^17",52,"^18",210,"^I","result"]],"^1W",[["^ ","^17",59,"^18",210,"^I","item"]]],"~i53",["^ ","^1F",[["^ ","^17",0,"^18",212,"^I","result"]]],"~i54",["^ ","^1;",[["^ ","^17",3,"^18",214,"^I","s1"]],"^1E",[["^ ","^17",6,"^18",214,"^I","s1"]]],"^23",["^ ","~i7",[["^ ","^17",0,"^18",216]],"~i8",[["^ ","^17",7,"^18",216,"^I","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^1;",[["^ ","^17",54,"^18",216,"^I","cljs.core/disj"]],"^1J",[["^ ","^17",69,"^18",216,"^I","s1"]],"^19",[["^ ","^17",72,"^18",216,"^I","s2"]]],"^24",["^ ","~i4",[["^ ","^17",73,"^18",220,"^I","s1"]],"~i7",[["^ ","^17",76,"^18",220,"^I","s2"]],"^16",[["^ ","^17",79,"^18",220,"^I","sets"]]],"^1Q",["^ ","~i5",[["^ ","^17",0,"^18",221]],"~i6",[["^ ","^17",7,"^18",221,"^I","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^1<",[["^ ","^17",54,"^18",221,"^I","clojure.set/difference"]],"^1H",[["^ ","^17",77,"^18",221,"^I","s1"]],"^1>",[["^ ","^17",80,"^18",221]],"^1S",[["^ ","^17",80,"^18",221,"^I","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"]],"^1V",[["^ ","^17",125,"^18",221,"^I","sets"]],"^1[",[["^ ","^17",130,"^18",221,"^I","s2"]]],"^1R",["^ ","~i0",[["^ ","^17",0,"^18",236],["^ ","^17",21,"^18",239],["^ ","^17",0,"^18",240]],"~i6",[["^ ","^17",0,"^18",239,"^I","clojure.set/select"]]],"~i62",["^ ","~i3",[["^ ","^17",50,"^18",239,"^I","pred"]],"~i8",[["^ ","^17",55,"^18",239,"^I","xset"]]],"~i63",["^ ","~i4",[["^ ","^17",0,"^18",240]],"~i5",[["^ ","^17",7,"^18",240,"^I","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^16",[["^ ","^17",54,"^18",240],["^ ","^17",0,"^18",241]],"^1X",[["^ ","^17",65,"^18",240,"^I","s"]],"^1=",[["^ ","^17",67,"^18",240,"^I","k"]],"^1G",[["^ ","^17",0,"^18",241]],"^1K",[["^ ","^17",20,"^18",241]],"^1>",[["^ ","^17",21,"^18",241,"^I","pred"],["^ ","^17",58,"^18",241,"^I","pred"],["^ ","^17",98,"^18",241,"^I","pred"]],"^1U",[["^ ","^17",93,"^18",241,"^I","k"],["^ ","^17",113,"^18",241,"^I","k"]],"^1C",[["^ ","^17",0,"^18",242,"^I","s"]],"^1Z",[["^ ","^17",0,"^18",244]],"^1[",[["^ ","^17",7,"^18",244,"^I","cljs.core.disj.cljs$core$IFn$_invoke$arity$2"]],"^28",[["^ ","^17",52,"^18",244,"^I","s"]],"^22",[["^ ","^17",54,"^18",244,"^I","k"]]],"~i64",["^ ","^16",[["^ ","^17",3,"^18",246,"^I","xset"]],"^1X",[["^ ","^17",8,"^18",246,"^I","xset"]]],"^26",["^ ","~i0",[["^ ","^17",0,"^18",248],["^ ","^17",22,"^18",251],["^ ","^17",0,"^18",252]],"~i6",[["^ ","^17",0,"^18",251,"^I","clojure.set/project"]]],"~i68",["^ ","~i3",[["^ ","^17",52,"^18",251,"^I","xrel"]],"~i8",[["^ ","^17",57,"^18",251,"^I","ks"]]],"^27",["^ ","~i4",[["^ ","^17",0,"^18",252]],"~i5",[["^ ","^17",7,"^18",252,"^I","cljs.core/set"]],"~i9",[["^ ","^17",21,"^18",252],["^ ","^17",65,"^18",252],["^ ","^17",76,"^18",252,"^I","p1__4099#"],["^ ","^17",0,"^18",253]],"^1A",[["^ ","^17",21,"^18",252,"^I","cljs.core.map.cljs$core$IFn$_invoke$arity$2"]],"^1;",[["^ ","^17",0,"^18",253],["^ ","^17",29,"^18",253,"^I","p1__4099#"]],"^1@",[["^ ","^17",7,"^18",253,"^I","cljs.core/select-keys"]],"^1I",[["^ ","^17",45,"^18",253,"^I","ks"]],"^1W",[["^ ","^17",3,"^18",254,"^I","xrel"]]],"~i71",["^ ","~i0",[["^ ","^17",0,"^18",256],["^ ","^17",26,"^18",259],["^ ","^17",0,"^18",260]],"~i6",[["^ ","^17",0,"^18",259,"^I","clojure.set/rename-keys"]]],"~i73",["^ ","~i3",[["^ ","^17",60,"^18",259,"^I","map"]],"~i7",[["^ ","^17",64,"^18",259,"^I","kmap"]]],"~i74",["^ ","~i4",[["^ ","^17",0,"^18",260]],"~i5",[["^ ","^17",7,"^18",260,"^I","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]]],"~i75",["^ ","~i5",[["^ ","^17",54,"^18",260],["^ ","^17",67,"^18",260,"^I","p__4105"],["^ ","^17",0,"^18",261],["^ ","^17",0,"^18",261],["^ ","^17",4,"^18",261,"^I","vec__4106"],["^ ","^17",16,"^18",261,"^I","p__4105"],["^ ","^17",10,"^18",262],["^ ","^17",10,"^18",262,"^I","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^17",54,"^18",262,"^I","vec__4106"],["^ ","^17",64,"^18",262],["^ ","^17",68,"^18",262],["^ ","^17",11,"^18",263],["^ ","^17",11,"^18",263,"^I","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^17",55,"^18",263,"^I","vec__4106"],["^ ","^17",65,"^18",263],["^ ","^17",69,"^18",263],["^ ","^17",0,"^18",264]],"^1A",[["^ ","^17",65,"^18",260,"^I","m"]],"^1<",[["^ ","^17",4,"^18",262,"^I","old"]],"^1X",[["^ ","^17",4,"^18",263,"^I","new"]]],"~i76",["^ ","~i7",[["^ ","^17",0,"^18",264]],"^1L",[["^ ","^17",3,"^18",264]],"^16",[["^ ","^17",3,"^18",264,"^I","cljs.core/contains?"]],"^1G",[["^ ","^17",29,"^18",264,"^I","map"]],"^1K",[["^ ","^17",33,"^18",264,"^I","old"]]],"~i77",["^ ","~i9",[["^ ","^17",0,"^18",265]],"^1A",[["^ ","^17",7,"^18",265,"^I","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3"]],"^1@",[["^ ","^17",53,"^18",265,"^I","m"]],"^1E",[["^ ","^17",55,"^18",265,"^I","new"]],"^1G",[["^ ","^17",60,"^18",265]],"^19",[["^ ","^17",60,"^18",265,"^I","cljs.core.get.cljs$core$IFn$_invoke$arity$2"]],"^1>",[["^ ","^17",104,"^18",265,"^I","map"]],"~i31",[["^ ","^17",108,"^18",265,"^I","old"]]],"~i78",["^ ","~i9",[["^ ","^17",0,"^18",267,"^I","m"]]],"~i79",["^ ","~i5",[["^ ","^17",3,"^18",269]],"~i6",[["^ ","^17",3,"^18",269,"^I","cljs.core.apply.cljs$core$IFn$_invoke$arity$3"]],"^16",[["^ ","^17",49,"^18",269,"^I","cljs.core/dissoc"]],"^1=",[["^ ","^17",66,"^18",269,"^I","map"]],"^19",[["^ ","^17",70,"^18",269]],"^1H",[["^ ","^17",70,"^18",269,"^I","cljs.core/keys"]],"^1?",[["^ ","^17",85,"^18",269,"^I","kmap"]],"^1Y",[["^ ","^17",92,"^18",269,"^I","kmap"]]],"~i81",["^ ","~i0",[["^ ","^17",0,"^18",271],["^ ","^17",21,"^18",274],["^ ","^17",0,"^18",275]],"~i6",[["^ ","^17",0,"^18",274,"^I","clojure.set/rename"]]],"~i83",["^ ","~i3",[["^ ","^17",50,"^18",274,"^I","xrel"]],"~i8",[["^ ","^17",55,"^18",274,"^I","kmap"]]],"~i84",["^ ","~i4",[["^ ","^17",0,"^18",275]],"~i5",[["^ ","^17",7,"^18",275,"^I","cljs.core/set"]],"~i9",[["^ ","^17",21,"^18",275],["^ ","^17",65,"^18",275],["^ ","^17",76,"^18",275,"^I","p1__4113#"],["^ ","^17",0,"^18",276]],"^1A",[["^ ","^17",21,"^18",275,"^I","cljs.core.map.cljs$core$IFn$_invoke$arity$2"]],"^1;",[["^ ","^17",0,"^18",276],["^ ","^17",31,"^18",276,"^I","p1__4113#"]],"^1@",[["^ ","^17",7,"^18",276,"^I","clojure.set/rename-keys"]],"^1I",[["^ ","^17",47,"^18",276,"^I","kmap"]],"^1Y",[["^ ","^17",3,"^18",277,"^I","xrel"]]],"~i86",["^ ","~i0",[["^ ","^17",0,"^18",279],["^ ","^17",20,"^18",283],["^ ","^17",0,"^18",284]],"~i6",[["^ ","^17",0,"^18",283,"^I","clojure.set/index"]]],"~i89",["^ ","~i3",[["^ ","^17",48,"^18",283,"^I","xrel"]],"~i8",[["^ ","^17",53,"^18",283,"^I","ks"]]],"~i90",["^ ","~i4",[["^ ","^17",0,"^18",284],["^ ","^17",3,"^18",287]],"~i5",[["^ ","^17",7,"^18",284,"^I","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]]],"~i91",["^ ","~i5",[["^ ","^17",54,"^18",284],["^ ","^17",0,"^18",285]],"^1A",[["^ ","^17",65,"^18",284,"^I","m"]],"^16",[["^ ","^17",67,"^18",284,"^I","x"]]],"~i92",["^ ","~i7",[["^ ","^17",0,"^18",285],["^ ","^17",0,"^18",286]],"^1<",[["^ ","^17",4,"^18",285,"^I","ik"]],"^1@",[["^ ","^17",9,"^18",285]],"^1X",[["^ ","^17",9,"^18",285,"^I","cljs.core/select-keys"]],"^1?",[["^ ","^17",31,"^18",285,"^I","x"]],"^2I",[["^ ","^17",33,"^18",285,"^I","ks"]]],"~i93",["^ ","~i9",[["^ ","^17",0,"^18",286]],"^1A",[["^ ","^17",7,"^18",286,"^I","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3"]],"^1@",[["^ ","^17",53,"^18",286,"^I","m"]],"^1E",[["^ ","^17",55,"^18",286,"^I","ik"]],"^1F",[["^ ","^17",58,"^18",286]],"^1G",[["^ ","^17",58,"^18",286,"^I","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"]],"^1>",[["^ ","^17",103,"^18",286],["^ ","^17",152,"^18",286]],"^1S",[["^ ","^17",103,"^18",286,"^I","cljs.core.get.cljs$core$IFn$_invoke$arity$3"]],"^1U",[["^ ","^17",147,"^18",286,"^I","m"]],"^1W",[["^ ","^17",149,"^18",286,"^I","ik"]],"^1D",[["^ ","^17",187,"^18",286,"^I","x"]]],"~i94",["^ ","~i8",[["^ ","^17",38,"^18",287,"^I","xrel"]]],"~i96",["^ ","~i0",[["^ ","^17",0,"^18",289],["^ ","^17",25,"^18",292],["^ ","^17",0,"^18",293]],"~i6",[["^ ","^17",0,"^18",292,"^I","clojure.set/map-invert"]]],"~i98",["^ ","~i3",[["^ ","^17",58,"^18",292,"^I","m"]],"~i6",[["^ ","^17",0,"^18",293],["^ ","^17",3,"^18",298]],"~i7",[["^ ","^17",7,"^18",293,"^I","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^1B",[["^ ","^17",54,"^18",293],["^ ","^17",71,"^18",293,"^I","p__4123"],["^ ","^17",0,"^18",294],["^ ","^17",0,"^18",294],["^ ","^17",4,"^18",294,"^I","vec__4125"],["^ ","^17",16,"^18",294,"^I","p__4123"],["^ ","^17",8,"^18",295],["^ ","^17",8,"^18",295,"^I","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^17",52,"^18",295,"^I","vec__4125"],["^ ","^17",62,"^18",295],["^ ","^17",66,"^18",295],["^ ","^17",8,"^18",296],["^ ","^17",8,"^18",296,"^I","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^17",52,"^18",296,"^I","vec__4125"],["^ ","^17",62,"^18",296],["^ ","^17",66,"^18",296],["^ ","^17",0,"^18",297]],"^1=",[["^ ","^17",65,"^18",293,"^I","m"]],"^1G",[["^ ","^17",4,"^18",295,"^I","k"]],"^1H",[["^ ","^17",4,"^18",296,"^I","v"]],"^1S",[["^ ","^17",0,"^18",297]],"^1?",[["^ ","^17",7,"^18",297,"^I","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3"]],"^1C",[["^ ","^17",53,"^18",297,"^I","m"]],"^1Z",[["^ ","^17",59,"^18",297,"^I","v"]],"^20",[["^ ","^17",61,"^18",297,"^I","k"]],"^1N",[["^ ","^17",38,"^18",298,"^I","m"]]],"~i100",["^ ","~i0",[["^ ","^17",0,"^18",300],["^ ","^17",0,"^18",300],["^ ","^17",19,"^18",305],["^ ","^17",46,"^18",305,"^I","var_args"],["^ ","^17",0,"^18",306],["^ ","^17",0,"^18",306],["^ ","^17",4,"^18",306,"^I","G__4141"],["^ ","^17",14,"^18",306],["^ ","^17",14,"^18",306],["^ ","^17",0,"^18",307],["^ ","^17",0,"^18",307],["^ ","^17",8,"^18",307,"^I","G__4141"],["^ ","^17",5,"^18",308],["^ ","^17",0,"^18",309],["^ ","^17",7,"^18",309,"^I","clojure.set/join"],["^ ","^17",54,"^18",309],["^ ","^17",55,"^18",309],["^ ","^17",65,"^18",309],["^ ","^17",71,"^18",309],["^ ","^17",72,"^18",309],["^ ","^17",82,"^18",309],["^ ","^17",5,"^18",312],["^ ","^17",0,"^18",313],["^ ","^17",7,"^18",313,"^I","clojure.set/join"],["^ ","^17",54,"^18",313],["^ ","^17",55,"^18",313],["^ ","^17",65,"^18",313],["^ ","^17",71,"^18",313],["^ ","^17",72,"^18",313],["^ ","^17",82,"^18",313],["^ ","^17",88,"^18",313],["^ ","^17",89,"^18",313],["^ ","^17",99,"^18",313],["^ ","^17",0,"^18",317],["^ ","^17",6,"^18",317],["^ ","^17",11,"^18",317,"^I","js/Error"],["^ ","^17",17,"^18",317],["^ ","^17",18,"^18",317],["^ ","^17",80,"^18",317],["^ ","^17",80,"^18",317],["^ ","^17",0,"^18",322],["^ ","^17",0,"^18",322],["^ ","^17",49,"^18",322],["^ ","^17",0,"^18",323],["^ ","^17",0,"^18",350],["^ ","^17",0,"^18",350],["^ ","^17",49,"^18",350],["^ ","^17",0,"^18",351],["^ ","^17",0,"^18",374],["^ ","^17",0,"^18",374],["^ ","^17",43,"^18",374],["^ ","^17",0,"^18",376]],"~i6",[["^ ","^17",0,"^18",305,"^I","clojure.set/join"],["^ ","^17",0,"^18",322,"^I","clojure.set/join"],["^ ","^17",0,"^18",350,"^I","clojure.set/join"],["^ ","^17",0,"^18",374,"^I","clojure.set/join"]]],"~i104",["^ ","~i4",[["^ ","^17",60,"^18",322,"^I","xrel"]],"~i9",[["^ ","^17",65,"^18",322,"^I","yrel"]]],"~i105",["^ ","~i3",[["^ ","^17",0,"^18",323],["^ ","^17",0,"^18",346]],"~i7",[["^ ","^17",3,"^18",323]],"^16",[["^ ","^17",5,"^18",323]],"^1<",[["^ ","^17",5,"^18",323,"^I","cljs.core/seq"]],"^1X",[["^ ","^17",19,"^18",323,"^I","xrel"]],"^19",[["^ ","^17",30,"^18",323]],"^1H",[["^ ","^17",30,"^18",323,"^I","cljs.core/seq"]],"^1S",[["^ ","^17",44,"^18",323,"^I","yrel"]]],"~i106",["^ ","~i5",[["^ ","^17",0,"^18",324],["^ ","^17",4,"^18",325,"^I","vec__4144"],["^ ","^17",8,"^18",326],["^ ","^17",8,"^18",326,"^I","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^17",52,"^18",326,"^I","vec__4144"],["^ ","^17",62,"^18",326],["^ ","^17",66,"^18",326],["^ ","^17",8,"^18",327],["^ ","^17",8,"^18",327,"^I","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^17",52,"^18",327,"^I","vec__4144"],["^ ","^17",62,"^18",327],["^ ","^17",66,"^18",327],["^ ","^17",0,"^18",329]],"^1L",[["^ ","^17",4,"^18",324,"^I","ks"]],"^1B",[["^ ","^17",9,"^18",324]],"^1;",[["^ ","^17",9,"^18",324,"^I","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2"]],"^1S",[["^ ","^17",64,"^18",324]],"^1?",[["^ ","^17",64,"^18",324,"^I","cljs.core/set"]],"^1V",[["^ ","^17",78,"^18",324]],"^1W",[["^ ","^17",78,"^18",324,"^I","cljs.core/keys"]],"^20",[["^ ","^17",93,"^18",324]],"^1M",[["^ ","^17",93,"^18",324,"^I","cljs.core/first"]],"^1N",[["^ ","^17",109,"^18",324,"^I","xrel"]],"^2>",[["^ ","^17",117,"^18",324]],"^23",[["^ ","^17",117,"^18",324,"^I","cljs.core/set"]],"~i59",[["^ ","^17",131,"^18",324]],"^1R",[["^ ","^17",131,"^18",324,"^I","cljs.core/keys"]],"~i65",[["^ ","^17",146,"^18",324]],"^26",[["^ ","^17",146,"^18",324,"^I","cljs.core/first"]],"~i72",[["^ ","^17",162,"^18",324,"^I","yrel"]]],"~i107",["^ ","^16",[["^ ","^17",4,"^18",326,"^I","r"]],"^1B",[["^ ","^17",4,"^18",327,"^I","s"]],"^1X",[["^ ","^17",16,"^18",325],["^ ","^17",68,"^18",325],["^ ","^17",169,"^18",325]],"^1F",[["^ ","^17",18,"^18",325]],"^1:",[["^ ","^17",19,"^18",325]],"^1K",[["^ ","^17",19,"^18",325,"^I","cljs.core/count"]],"^1U",[["^ ","^17",35,"^18",325,"^I","xrel"]],"^1[",[["^ ","^17",44,"^18",325]],"^20",[["^ ","^17",44,"^18",325,"^I","cljs.core/count"]],"^22",[["^ ","^17",60,"^18",325,"^I","yrel"]]],"~i108",["^ ","^1J",[["^ ","^17",151,"^18",325,"^I","xrel"]],"^1:",[["^ ","^17",156,"^18",325,"^I","yrel"]]],"~i109",["^ ","^1J",[["^ ","^17",252,"^18",325,"^I","yrel"]],"^1:",[["^ ","^17",257,"^18",325,"^I","xrel"]]],"~i110",["^ ","^1L",[["^ ","^17",4,"^18",328,"^I","idx"]],"^1;",[["^ ","^17",10,"^18",328]],"^1@",[["^ ","^17",10,"^18",328,"^I","clojure.set/index"]],"^1G",[["^ ","^17",28,"^18",328,"^I","r"]],"^1H",[["^ ","^17",30,"^18",328,"^I","ks"]]],"~i111",["^ ","~i7",[["^ ","^17",0,"^18",329],["^ ","^17",1,"^18",344]],"~i8",[["^ ","^17",7,"^18",329,"^I","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^1;",[["^ ","^17",54,"^18",329],["^ ","^17",0,"^18",331]],"^1J",[["^ ","^17",18,"^18",330,"^I","ret"]],"^1H",[["^ ","^17",22,"^18",330,"^I","x"]]],"~i112",["^ ","^1X",[["^ ","^17",0,"^18",331],["^ ","^17",0,"^18",334]],"^19",[["^ ","^17",4,"^18",331,"^I","found"]],"^1?",[["^ ","^17",12,"^18",331],["^ ","^17",29,"^18",331,"^I","G__4150"],["^ ","^17",0,"^18",332],["^ ","^17",0,"^18",332],["^ ","^17",78,"^18",332,"^I","G__4150"],["^ ","^17",103,"^18",332,"^I","G__4150"]],"^1I",[["^ ","^17",8,"^18",332,"^I","idx"],["^ ","^17",44,"^18",332,"^I","idx"],["^ ","^17",89,"^18",332,"^I","idx"]],"^1W",[["^ ","^17",39,"^18",331]],"^1C",[["^ ","^17",39,"^18",331,"^I","cljs.core/select-keys"]],"^1O",[["^ ","^17",61,"^18",331,"^I","x"]],"^29",[["^ ","^17",63,"^18",331,"^I","ks"]]],"~i113",["^ ","^1=",[["^ ","^17",0,"^18",334]],"^19",[["^ ","^17",20,"^18",334,"^I","found"]]],"~i114",["^ ","^1F",[["^ ","^17",0,"^18",335],["^ ","^17",54,"^18",335],["^ ","^17",18,"^18",336,"^I","p1__4132#"],["^ ","^17",34,"^18",336,"^I","p2__4133#"],["^ ","^17",0,"^18",337]],"^1G",[["^ ","^17",7,"^18",335,"^I","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^1I",[["^ ","^17",0,"^18",337],["^ ","^17",52,"^18",337,"^I","p1__4132#"]],"^2I",[["^ ","^17",7,"^18",337,"^I","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"]],"^20",[["^ ","^17",68,"^18",337],["^ ","^17",171,"^18",337,"^I","p2__4133#"]],"^1M",[["^ ","^17",68,"^18",337,"^I","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic"]],"^29",[["^ ","^17",187,"^18",337,"^I","x"]],"^2=",[["^ ","^17",1,"^18",339,"^I","ret"]],"^1Q",[["^ ","^17",5,"^18",339,"^I","found"]]],"~i115",["^ ","^1F",[["^ ","^17",0,"^18",341,"^I","ret"]]],"~i116",["^ ","^1=",[["^ ","^17",35,"^18",344,"^I","s"]]],"~i118",["^ ","~i4",[["^ ","^17",60,"^18",350,"^I","xrel"]],"~i9",[["^ ","^17",65,"^18",350,"^I","yrel"]],"^1B",[["^ ","^17",70,"^18",350,"^I","km"]]],"~i119",["^ ","~i3",[["^ ","^17",0,"^18",351],["^ ","^17",4,"^18",351,"^I","vec__4155"],["^ ","^17",8,"^18",352],["^ ","^17",8,"^18",352,"^I","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^17",52,"^18",352,"^I","vec__4155"],["^ ","^17",62,"^18",352],["^ ","^17",66,"^18",352],["^ ","^17",8,"^18",353],["^ ","^17",8,"^18",353,"^I","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^17",52,"^18",353,"^I","vec__4155"],["^ ","^17",62,"^18",353],["^ ","^17",66,"^18",353],["^ ","^17",8,"^18",354],["^ ","^17",8,"^18",354,"^I","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^17",52,"^18",354,"^I","vec__4155"],["^ ","^17",62,"^18",354],["^ ","^17",66,"^18",354],["^ ","^17",0,"^18",356]],"^1A",[["^ ","^17",4,"^18",352,"^I","r"]],"^16",[["^ ","^17",4,"^18",353,"^I","s"]],"^1B",[["^ ","^17",4,"^18",354,"^I","k"]],"^1X",[["^ ","^17",16,"^18",351],["^ ","^17",68,"^18",351],["^ ","^17",196,"^18",351]],"^1F",[["^ ","^17",18,"^18",351]],"^1:",[["^ ","^17",19,"^18",351]],"^1K",[["^ ","^17",19,"^18",351,"^I","cljs.core/count"]],"^1U",[["^ ","^17",35,"^18",351,"^I","xrel"]],"^1[",[["^ ","^17",44,"^18",351]],"^20",[["^ ","^17",44,"^18",351,"^I","cljs.core/count"]],"^22",[["^ ","^17",60,"^18",351,"^I","yrel"]]],"~i120",["^ ","^1J",[["^ ","^17",151,"^18",351,"^I","xrel"]],"^1:",[["^ ","^17",156,"^18",351,"^I","yrel"]],"^1I",[["^ ","^17",161,"^18",351]],"^2I",[["^ ","^17",161,"^18",351,"^I","clojure.set/map-invert"]],"^1D",[["^ ","^17",184,"^18",351,"^I","km"]]],"~i121",["^ ","^1J",[["^ ","^17",279,"^18",351,"^I","yrel"]],"^1:",[["^ ","^17",284,"^18",351,"^I","xrel"]],"^1I",[["^ ","^17",289,"^18",351,"^I","km"]]],"~i122",["^ ","~i9",[["^ ","^17",4,"^18",355,"^I","idx"]],"^1<",[["^ ","^17",10,"^18",355]],"^1B",[["^ ","^17",10,"^18",355,"^I","clojure.set/index"]],"^1J",[["^ ","^17",28,"^18",355,"^I","r"]],"^1G",[["^ ","^17",30,"^18",355]],"^19",[["^ ","^17",30,"^18",355,"^I","cljs.core/vals"]],"^1S",[["^ ","^17",45,"^18",355,"^I","k"]]],"~i123",["^ ","~i5",[["^ ","^17",0,"^18",356],["^ ","^17",1,"^18",371]],"~i6",[["^ ","^17",7,"^18",356,"^I","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^1<",[["^ ","^17",54,"^18",356],["^ ","^17",0,"^18",358]],"^1E",[["^ ","^17",18,"^18",357,"^I","ret"]],"^1G",[["^ ","^17",22,"^18",357,"^I","x"]]],"~i124",["^ ","^1;",[["^ ","^17",0,"^18",358],["^ ","^17",0,"^18",361]],"^1F",[["^ ","^17",4,"^18",358,"^I","found"]],"^1>",[["^ ","^17",12,"^18",358],["^ ","^17",29,"^18",358,"^I","G__4161"],["^ ","^17",0,"^18",359],["^ ","^17",0,"^18",359],["^ ","^17",78,"^18",359,"^I","G__4161"],["^ ","^17",103,"^18",359,"^I","G__4161"]],"^1S",[["^ ","^17",8,"^18",359,"^I","idx"],["^ ","^17",44,"^18",359,"^I","idx"],["^ ","^17",89,"^18",359,"^I","idx"]],"^1U",[["^ ","^17",39,"^18",358]],"^1V",[["^ ","^17",39,"^18",358,"^I","clojure.set/rename-keys"]],"^22",[["^ ","^17",63,"^18",358]],"^1N",[["^ ","^17",63,"^18",358,"^I","cljs.core/select-keys"]],"~i58",[["^ ","^17",85,"^18",358,"^I","x"]],"^1R",[["^ ","^17",87,"^18",358]],"^25",[["^ ","^17",87,"^18",358,"^I","cljs.core/keys"]],"^26",[["^ ","^17",102,"^18",358,"^I","k"]],"~i70",[["^ ","^17",106,"^18",358,"^I","k"]]],"~i125",["^ ","^1X",[["^ ","^17",0,"^18",361]],"^1F",[["^ ","^17",20,"^18",361,"^I","found"]]],"~i126",["^ ","^1=",[["^ ","^17",0,"^18",362],["^ ","^17",54,"^18",362],["^ ","^17",18,"^18",363,"^I","p1__4134#"],["^ ","^17",34,"^18",363,"^I","p2__4135#"],["^ ","^17",0,"^18",364]],"^1J",[["^ ","^17",7,"^18",362,"^I","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^1S",[["^ ","^17",0,"^18",364],["^ ","^17",52,"^18",364,"^I","p1__4134#"]],"^1?",[["^ ","^17",7,"^18",364,"^I","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"]],"^1Z",[["^ ","^17",68,"^18",364],["^ ","^17",171,"^18",364,"^I","p2__4135#"]],"^1[",[["^ ","^17",68,"^18",364,"^I","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic"]],"^1O",[["^ ","^17",187,"^18",364,"^I","x"]],"^2<",[["^ ","^17",1,"^18",366,"^I","ret"]],"^23",[["^ ","^17",5,"^18",366,"^I","found"]]],"~i127",["^ ","^1=",[["^ ","^17",0,"^18",368,"^I","ret"]]],"~i128",["^ ","^1X",[["^ ","^17",35,"^18",371,"^I","s"]]],"~i130",["^ ","~i0",[["^ ","^17",0,"^18",376],["^ ","^17",28,"^18",379],["^ ","^17",0,"^18",380]],"~i6",[["^ ","^17",0,"^18",379,"^I","clojure.set/subset?"]]],"~i132",["^ ","~i3",[["^ ","^17",64,"^18",379,"^I","set1"]],"~i8",[["^ ","^17",69,"^18",379,"^I","set2"]]],"~i133",["^ ","~i2",[["^ ","^17",0,"^18",380]],"~i7",[["^ ","^17",9,"^18",380]],"^1L",[["^ ","^17",10,"^18",380]],"^16",[["^ ","^17",10,"^18",380,"^I","cljs.core/count"]],"^1E",[["^ ","^17",26,"^18",380,"^I","set1"]],"^1H",[["^ ","^17",35,"^18",380]],"^1:",[["^ ","^17",35,"^18",380,"^I","cljs.core/count"]],"^2I",[["^ ","^17",51,"^18",380,"^I","set2"]]],"~i134",["^ ","~i7",[["^ ","^17",63,"^18",380],["^ ","^17",86,"^18",380],["^ ","^17",97,"^18",380,"^I","p1__4176#"],["^ ","^17",0,"^18",381]],"~i8",[["^ ","^17",63,"^18",380,"^I","cljs.core/every?"]],"^1@",[["^ ","^17",0,"^18",381],["^ ","^17",38,"^18",381,"^I","p1__4176#"]],"^1X",[["^ ","^17",7,"^18",381,"^I","cljs.core/contains?"]],"^1>",[["^ ","^17",33,"^18",381,"^I","set2"]],"^1C",[["^ ","^17",3,"^18",382,"^I","set1"]]],"~i136",["^ ","~i0",[["^ ","^17",0,"^18",384],["^ ","^17",30,"^18",387],["^ ","^17",0,"^18",388]],"~i6",[["^ ","^17",0,"^18",387,"^I","clojure.set/superset?"]]],"~i138",["^ ","~i3",[["^ ","^17",68,"^18",387,"^I","set1"]],"~i8",[["^ ","^17",73,"^18",387,"^I","set2"]]],"~i139",["^ ","~i2",[["^ ","^17",0,"^18",388]],"~i7",[["^ ","^17",9,"^18",388]],"^1L",[["^ ","^17",10,"^18",388]],"^16",[["^ ","^17",10,"^18",388,"^I","cljs.core/count"]],"^1E",[["^ ","^17",26,"^18",388,"^I","set1"]],"^1H",[["^ ","^17",35,"^18",388]],"^1:",[["^ ","^17",35,"^18",388,"^I","cljs.core/count"]],"^2I",[["^ ","^17",51,"^18",388,"^I","set2"]]],"~i140",["^ ","~i7",[["^ ","^17",63,"^18",388],["^ ","^17",86,"^18",388],["^ ","^17",97,"^18",388,"^I","p1__4183#"],["^ ","^17",0,"^18",389]],"~i8",[["^ ","^17",63,"^18",388,"^I","cljs.core/every?"]],"^1@",[["^ ","^17",0,"^18",389],["^ ","^17",38,"^18",389,"^I","p1__4183#"]],"^1X",[["^ ","^17",7,"^18",389,"^I","cljs.core/contains?"]],"^1>",[["^ ","^17",33,"^18",389,"^I","set1"]],"^1C",[["^ ","^17",3,"^18",390,"^I","set2"]]],"~i142",["^ ","~i0",[["^ ","^17",0,"^18",392]]]],"~:cljc",false],"~:cache-keys",["~#cmap",[["~:macro","^O"],[1532292597000],["^Z","goog/math/math.js"],[1531925801810,"^P","~$goog.array","~$goog.asserts"],["^Z","goog/array/array.js"],[1531925801810,"^P","^3X"],["^Z","goog/debug/error.js"],[1531925801810,"^P"],["^Z","goog/dom/nodetype.js"],[1531925801810,"^P"],["^Z","goog/object/object.js"],[1531925801810,"^P"],"~:SHADOW-TIMESTAMP",[1533404981000,1532292597000],["^Z","goog/math/long.js"],[1531925801810,"^P","^3X","~$goog.reflect"],["^Z","goog/functions/functions.js"],[1531925801810,"^P"],["^Z","goog/structs/map.js"],[1531925801810,"^P","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^Z","goog/asserts/asserts.js"],[1531925801810,"^P","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"],["^Z","goog/uri/uri.js"],[1531925801810,"^P","^3W","^3X","^44","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^Z","goog/base.js"],[1531925801810],["^Z","goog/structs/structs.js"],[1531925801810,"^P","^3W","^41"],["^Z","goog/string/string.js"],[1531925801810,"^P"],["^Z","goog/reflect/reflect.js"],[1531925801810,"^P"],["^Z","goog/string/stringbuffer.js"],[1531925801810,"^P"],["^Z","goog/iter/iter.js"],[1531925801810,"^P","^3W","^3X","~$goog.functions","~$goog.math"],["^Z","cljs/core.cljs"],[1532292597383,"~$goog.math.Long","~$goog.math.Integer","^44","^41","^3W","~$goog.Uri","~$goog.string.StringBuffer"],["^Z","goog/math/integer.js"],[1531925801810,"^P"],["^Z","clojure/set.cljs"],[1532292597383,"^P","^O"],["^Z","goog/uri/utils.js"],[1531925801810,"^P","^3W","^3X","^44"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/set.cljs","^7",11,"^8",8,"^9",11,"^:",19,"^;","Set operations such as union/intersection.","^<","Rich Hickey"],"^=",["^ ","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",[]],"^I","^J","^M",null,"^N",["^ ","^O","^O","^P","^P"],"^Q",["^H",[]],"~:shadow/js-access-global",["^H",["Error"]],"^R",null,"~:defs",["^ ","~$union",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/set.cljs","^7",19,"^8",7,"^9",19,"^:",12,"~:arglists",["^U",["~$quote",["^U",[[],["~$s1"],["^4G","~$s2"],["^4G","^4H","~$&","~$sets"]]]]],"^;","Return a set that is the union of the input sets","~:top-fn",["^ ","~:variadic",true,"~:max-fixed-arity",2,"~:method-params",["^U",[[],["^4G"],["^4G","^4H"]]],"^4E",["^U",[[],["^4G"],["^4G","^4H"],["^4G","^4H","~$&","^4I"]]],"~:arglists-meta",["^U",[null,null,null,null]]]],"^I","~$clojure.set/union","^4K",true,"^6","clojure/set.cljs","^:",12,"^4J",["^ ","^4K",true,"^4L",2,"^4M",["^U",[[],["^4G"],["^4G","^4H"]]],"^4E",["^U",[[],["^4G"],["^4G","^4H"],["^4G","^4H","~$&","^4I"]]],"^4N",["^U",[null,null,null,null]]],"^4M",["^U",[[],["^4G"],["^4G","^4H"]]],"~:protocol-impl",null,"^4N",["^U",[null,null,null,null]],"^8",1,"^7",19,"^9",19,"^4L",2,"~:fn-var",true,"^4E",["^U",[[],["^4G"],["^4G","^4H"],["^4G","^4H","~$&","^4I"]]],"^;","Return a set that is the union of the input sets"],"~$map-invert",["^ ","^4D",null,"^5",["^ ","^6","clojure/set.cljs","^7",97,"^8",7,"^9",97,"^:",17,"^4E",["^U",["^4F",["^U",[["~$m"]]]]],"^;","Returns the map with the vals mapped to the keys."],"^I","~$clojure.set/map-invert","^4K",false,"^6","clojure/set.cljs","^:",17,"^4M",["^U",[["~$m"]]],"^4P",null,"^4N",["^U",[null,null]],"^8",1,"^7",97,"^9",97,"^4L",1,"^4Q",true,"^4E",["^U",["^4F",["^U",[["~$m"]]]]],"^;","Returns the map with the vals mapped to the keys."],"~$join",["^ ","^4D",null,"^5",["^ ","^6","clojure/set.cljs","^7",101,"^8",7,"^9",101,"^:",11,"^4E",["^U",["^4F",["^U",[["~$xrel","~$yrel"],["^4U","^4V","~$km"]]]]],"^;","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.","^4J",["^ ","^4K",false,"^4L",3,"^4M",["^U",[["^4U","^4V"],["^4U","^4V","^4W"]]],"^4E",["^U",[["^4U","^4V"],["^4U","^4V","^4W"]]],"^4N",["^U",[null,null]]]],"^I","~$clojure.set/join","^4K",false,"^6","clojure/set.cljs","^:",11,"^4J",["^ ","^4K",false,"^4L",3,"^4M",["^U",[["^4U","^4V"],["^4U","^4V","^4W"]]],"^4E",["^U",[["^4U","^4V"],["^4U","^4V","^4W"]]],"^4N",["^U",[null,null]]],"^4M",["^U",[["^4U","^4V"],["^4U","^4V","^4W"]]],"^4P",null,"^4N",["^U",[null,null]],"^8",1,"^7",101,"^9",101,"^4L",3,"^4Q",true,"^4E",["^U",[["^4U","^4V"],["^4U","^4V","^4W"]]],"^;","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys."],"~$select",["^ ","^4D",null,"^5",["^ ","^6","clojure/set.cljs","^7",61,"^8",7,"^9",61,"^:",13,"^4E",["^U",["^4F",["^U",[["~$pred","~$xset"]]]]],"^;","Returns a set of the elements for which pred is true"],"^I","~$clojure.set/select","^4K",false,"^6","clojure/set.cljs","^:",13,"^4M",["^U",[["^4Z","^4["]]],"^4P",null,"^4N",["^U",[null,null]],"^8",1,"^7",61,"^9",61,"^4L",2,"^4Q",true,"^4E",["^U",["^4F",["^U",[["^4Z","^4["]]]]],"^;","Returns a set of the elements for which pred is true"],"~$intersection",["^ ","^4D",null,"^5",["^ ","^6","clojure/set.cljs","^7",31,"^8",7,"^9",31,"^:",19,"^4E",["^U",["^4F",["^U",[["^4G"],["^4G","^4H"],["^4G","^4H","~$&","^4I"]]]]],"^;","Return a set that is the intersection of the input sets","^4J",["^ ","^4K",true,"^4L",2,"^4M",["^U",[["^4G"],["^4G","^4H"]]],"^4E",["^U",[["^4G"],["^4G","^4H"],["^4G","^4H","~$&","^4I"]]],"^4N",["^U",[null,null,null]]]],"^I","~$clojure.set/intersection","^4K",true,"^6","clojure/set.cljs","^:",19,"^4J",["^ ","^4K",true,"^4L",2,"^4M",["^U",[["^4G"],["^4G","^4H"]]],"^4E",["^U",[["^4G"],["^4G","^4H"],["^4G","^4H","~$&","^4I"]]],"^4N",["^U",[null,null,null]]],"^4M",["^U",[["^4G"],["^4G","^4H"]]],"^4P",null,"^4N",["^U",[null,null,null]],"^8",1,"^7",31,"^9",31,"^4L",2,"^4Q",true,"^4E",["^U",[["^4G"],["^4G","^4H"],["^4G","^4H","~$&","^4I"]]],"^;","Return a set that is the intersection of the input sets"],"~$superset?",["^ ","^4D",null,"^5",["^ ","^6","clojure/set.cljs","^7",137,"^8",7,"^9",137,"^:",16,"^4E",["^U",["^4F",["^U",[["~$set1","~$set2"]]]]],"^;","Is set1 a superset of set2?"],"^I","~$clojure.set/superset?","^4K",false,"^6","clojure/set.cljs","^:",16,"^4M",["^U",[["^54","^55"]]],"^4P",null,"^4N",["^U",[null,null]],"^8",1,"^7",137,"^9",137,"^4L",2,"^4Q",true,"^4E",["^U",["^4F",["^U",[["^54","^55"]]]]],"^;","Is set1 a superset of set2?"],"~$index",["^ ","^4D",null,"^5",["^ ","^6","clojure/set.cljs","^7",87,"^8",7,"^9",87,"^:",12,"^4E",["^U",["^4F",["^U",[["^4U","~$ks"]]]]],"^;","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"^I","~$clojure.set/index","^4K",false,"^6","clojure/set.cljs","^:",12,"^4M",["^U",[["^4U","^58"]]],"^4P",null,"^4N",["^U",[null,null]],"^8",1,"^7",87,"^9",87,"^4L",2,"^4Q",true,"^4E",["^U",["^4F",["^U",[["^4U","^58"]]]]],"^;","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"~$bubble-max-key",["^ ","^4D",null,"^5",["^ ","^6","clojure/set.cljs","^7",13,"^8",8,"^9",13,"^:",22,"~:private",true,"^4E",["^U",["^4F",["^U",[["~$k","~$coll"]]]]]],"^5;",true,"^I","~$clojure.set/bubble-max-key","^4K",false,"^6","clojure/set.cljs","^:",22,"^4M",["^U",[["~$k","^5<"]]],"^4P",null,"^4N",["^U",[null,null]],"^8",1,"^7",13,"^9",13,"^4L",2,"^4Q",true,"^4E",["^U",["^4F",["^U",[["~$k","^5<"]]]]]],"~$subset?",["^ ","^4D",null,"^5",["^ ","^6","clojure/set.cljs","^7",131,"^8",7,"^9",131,"^:",14,"^4E",["^U",["^4F",["^U",[["^54","^55"]]]]],"^;","Is set1 a subset of set2?"],"^I","~$clojure.set/subset?","^4K",false,"^6","clojure/set.cljs","^:",14,"^4M",["^U",[["^54","^55"]]],"^4P",null,"^4N",["^U",[null,null]],"^8",1,"^7",131,"^9",131,"^4L",2,"^4Q",true,"^4E",["^U",["^4F",["^U",[["^54","^55"]]]]],"^;","Is set1 a subset of set2?"],"~$rename",["^ ","^4D",null,"^5",["^ ","^6","clojure/set.cljs","^7",82,"^8",7,"^9",82,"^:",13,"^4E",["^U",["^4F",["^U",[["^4U","~$kmap"]]]]],"^;","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"^I","~$clojure.set/rename","^4K",false,"^6","clojure/set.cljs","^:",13,"^4M",["^U",[["^4U","^5A"]]],"^4P",null,"^4N",["^U",[null,null]],"^8",1,"^7",82,"^9",82,"^4L",2,"^4Q",true,"^4E",["^U",["^4F",["^U",[["^4U","^5A"]]]]],"^;","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"~$rename-keys",["^ ","^4D",null,"^5",["^ ","^6","clojure/set.cljs","^7",72,"^8",7,"^9",72,"^:",18,"^4E",["^U",["^4F",["^U",[["~$map","^5A"]]]]],"^;","Returns the map with the keys in kmap renamed to the vals in kmap"],"^I","~$clojure.set/rename-keys","^4K",false,"^6","clojure/set.cljs","^:",18,"^4M",["^U",[["^5D","^5A"]]],"^4P",null,"^4N",["^U",[null,null]],"^8",1,"^7",72,"^9",72,"^4L",2,"^4Q",true,"^4E",["^U",["^4F",["^U",[["^5D","^5A"]]]]],"^;","Returns the map with the keys in kmap renamed to the vals in kmap"],"~$project",["^ ","^4D",null,"^5",["^ ","^6","clojure/set.cljs","^7",67,"^8",7,"^9",67,"^:",14,"^4E",["^U",["^4F",["^U",[["^4U","^58"]]]]],"^;","Returns a rel of the elements of xrel with only the keys in ks"],"^I","~$clojure.set/project","^4K",false,"^6","clojure/set.cljs","^:",14,"^4M",["^U",[["^4U","^58"]]],"^4P",null,"^4N",["^U",[null,null]],"^8",1,"^7",67,"^9",67,"^4L",2,"^4Q",true,"^4E",["^U",["^4F",["^U",[["^4U","^58"]]]]],"^;","Returns a rel of the elements of xrel with only the keys in ks"],"~$difference",["^ ","^4D",null,"^5",["^ ","^6","clojure/set.cljs","^7",46,"^8",7,"^9",46,"^:",17,"^4E",["^U",["^4F",["^U",[["^4G"],["^4G","^4H"],["^4G","^4H","~$&","^4I"]]]]],"^;","Return a set that is the first set without elements of the remaining sets","^4J",["^ ","^4K",true,"^4L",2,"^4M",["^U",[["^4G"],["^4G","^4H"]]],"^4E",["^U",[["^4G"],["^4G","^4H"],["^4G","^4H","~$&","^4I"]]],"^4N",["^U",[null,null,null]]]],"^I","~$clojure.set/difference","^4K",true,"^6","clojure/set.cljs","^:",17,"^4J",["^ ","^4K",true,"^4L",2,"^4M",["^U",[["^4G"],["^4G","^4H"]]],"^4E",["^U",[["^4G"],["^4G","^4H"],["^4G","^4H","~$&","^4I"]]],"^4N",["^U",[null,null,null]]],"^4M",["^U",[["^4G"],["^4G","^4H"]]],"^4P",null,"^4N",["^U",[null,null,null]],"^8",1,"^7",46,"^9",46,"^4L",2,"^4Q",true,"^4E",["^U",[["^4G"],["^4G","^4H"],["^4G","^4H","~$&","^4I"]]],"^;","Return a set that is the first set without elements of the remaining sets"]],"^S",["^ ","^O","^O"],"^W",["^ "],"^X",["^P","^O"]],"^L","^J","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^3U",[["^5L","~:static-fns"],true,["^5L","~:elide-asserts"],false,["^5L","~:optimize-constants"],null,["^5L","~:external-config"],null,["^5L","~:tooling-config"],null,["^5L","~:emit-constants"],null,["^5L","~:infer-externs"],true,["^5L","^13"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^5L","~:fn-invoke-direct"],null,["^5L","^15"],"/dev/null"]]]