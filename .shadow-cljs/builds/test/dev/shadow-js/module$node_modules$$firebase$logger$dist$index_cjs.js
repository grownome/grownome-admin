["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@firebase/logger/dist/index.cjs.js"],"~:js","shadow$provide.module$node_modules$$firebase$logger$dist$index_cjs=function(global,process,require,module,exports,shadow$shims){Object.defineProperty(exports,\"__esModule\",{value:!0});var instances=[];(function(LogLevel){LogLevel[LogLevel.DEBUG=0]=\"DEBUG\";LogLevel[LogLevel.VERBOSE=1]=\"VERBOSE\";LogLevel[LogLevel.INFO=2]=\"INFO\";LogLevel[LogLevel.WARN=3]=\"WARN\";LogLevel[LogLevel.ERROR=4]=\"ERROR\";LogLevel[LogLevel.SILENT=5]=\"SILENT\"})(exports.LogLevel||(exports.LogLevel={}));var defaultLogLevel=exports.LogLevel.INFO,\ndefaultLogHandler=function(instance,logType){for(var args=[],_i=2;_i<arguments.length;_i++)args[_i-2]=arguments[_i];if(!(logType<instance.logLevel))switch(_i=(new Date).toISOString(),logType){case exports.LogLevel.DEBUG:console.log.apply(console,[\"[\"+_i+\"]  \"+instance.name+\":\"].concat(args));break;case exports.LogLevel.VERBOSE:console.log.apply(console,[\"[\"+_i+\"]  \"+instance.name+\":\"].concat(args));break;case exports.LogLevel.INFO:console.info.apply(console,[\"[\"+_i+\"]  \"+instance.name+\":\"].concat(args));\nbreak;case exports.LogLevel.WARN:console.warn.apply(console,[\"[\"+_i+\"]  \"+instance.name+\":\"].concat(args));break;case exports.LogLevel.ERROR:console.error.apply(console,[\"[\"+_i+\"]  \"+instance.name+\":\"].concat(args));break;default:throw Error(\"Attempted to log a message with an invalid logType (value: \"+logType+\")\");}};global=function(){function Logger(name){this.name=name;this._logLevel=defaultLogLevel;this._logHandler=defaultLogHandler;instances.push(this)}Object.defineProperty(Logger.prototype,\n\"logLevel\",{get:function(){return this._logLevel},set:function(val){if(!(val in exports.LogLevel))throw new TypeError(\"Invalid value assigned to `logLevel`\");this._logLevel=val},enumerable:!0,configurable:!0});Object.defineProperty(Logger.prototype,\"logHandler\",{get:function(){return this._logHandler},set:function(val){if(\"function\"!==typeof val)throw new TypeError(\"Value assigned to `logHandler` must be a function\");this._logHandler=val},enumerable:!0,configurable:!0});Logger.prototype.debug=function(){for(var args=\n[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];this._logHandler.apply(this,[this,exports.LogLevel.DEBUG].concat(args))};Logger.prototype.log=function(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];this._logHandler.apply(this,[this,exports.LogLevel.VERBOSE].concat(args))};Logger.prototype.info=function(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];this._logHandler.apply(this,[this,exports.LogLevel.INFO].concat(args))};Logger.prototype.warn=\nfunction(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];this._logHandler.apply(this,[this,exports.LogLevel.WARN].concat(args))};Logger.prototype.error=function(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];this._logHandler.apply(this,[this,exports.LogLevel.ERROR].concat(args))};return Logger}();exports.setLogLevel=function(level){instances.forEach(function(inst){inst.logLevel=level})};exports.Logger=global}","~:source","shadow$provide[\"module$node_modules$$firebase$logger$dist$index_cjs\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nvar instances = [];\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(exports.LogLevel || (exports.LogLevel = {}));\r\n/**\r\n * The default log level\r\n */\r\nvar defaultLogLevel = exports.LogLevel.INFO;\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nvar defaultLogHandler = function (instance, logType) {\r\n    var args = [];\r\n    for (var _i = 2; _i < arguments.length; _i++) {\r\n        args[_i - 2] = arguments[_i];\r\n    }\r\n    if (logType < instance.logLevel)\r\n        return;\r\n    var now = new Date().toISOString();\r\n    switch (logType) {\r\n        /**\r\n         * By default, `console.debug` is not displayed in the developer console (in\r\n         * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n         * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n         * logs to the `console.log` function.\r\n         */\r\n        case exports.LogLevel.DEBUG:\r\n            console.log.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case exports.LogLevel.VERBOSE:\r\n            console.log.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case exports.LogLevel.INFO:\r\n            console.info.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case exports.LogLevel.WARN:\r\n            console.warn.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case exports.LogLevel.ERROR:\r\n            console.error.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        default:\r\n            throw new Error(\"Attempted to log a message with an invalid logType (value: \" + logType + \")\");\r\n    }\r\n};\r\nvar Logger = /** @class */ (function () {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    function Logger(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The log handler for the Logger instance.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    Object.defineProperty(Logger.prototype, \"logLevel\", {\r\n        get: function () {\r\n            return this._logLevel;\r\n        },\r\n        set: function (val) {\r\n            if (!(val in exports.LogLevel)) {\r\n                throw new TypeError('Invalid value assigned to `logLevel`');\r\n            }\r\n            this._logLevel = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Logger.prototype, \"logHandler\", {\r\n        get: function () {\r\n            return this._logHandler;\r\n        },\r\n        set: function (val) {\r\n            if (typeof val !== 'function') {\r\n                throw new TypeError('Value assigned to `logHandler` must be a function');\r\n            }\r\n            this._logHandler = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    Logger.prototype.debug = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, exports.LogLevel.DEBUG].concat(args));\r\n    };\r\n    Logger.prototype.log = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, exports.LogLevel.VERBOSE].concat(args));\r\n    };\r\n    Logger.prototype.info = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, exports.LogLevel.INFO].concat(args));\r\n    };\r\n    Logger.prototype.warn = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, exports.LogLevel.WARN].concat(args));\r\n    };\r\n    Logger.prototype.error = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, exports.LogLevel.ERROR].concat(args));\r\n    };\r\n    return Logger;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction setLogLevel(level) {\r\n    instances.forEach(function (inst) {\r\n        inst.logLevel = level;\r\n    });\r\n}\n\nexports.setLogLevel = setLogLevel;\nexports.Logger = Logger;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["_logLevel","logLevel","LogLevel","__esModule","info","warn","_logHandler","error","log","name","configurable","value","enumerable","logHandler","debug","setLogLevel","set","get","Logger"]],"~:compiled-at",1533409586286,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$firebase$logger$dist$index_cjs.js\",\n\"lineCount\":6,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@firebase/logger/dist/index.cjs.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$firebase$logger$dist$index_cjs\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n'use strict';\\n\\nObject.defineProperty(exports, '__esModule', { value: true });\\n\\n/**\\r\\n * Copyright 2017 Google Inc.\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\r\\n/**\\r\\n * A container for all of the Logger instances\\r\\n */\\r\\nvar instances = [];\\r\\n(function (LogLevel) {\\r\\n    LogLevel[LogLevel[\\\"DEBUG\\\"] = 0] = \\\"DEBUG\\\";\\r\\n    LogLevel[LogLevel[\\\"VERBOSE\\\"] = 1] = \\\"VERBOSE\\\";\\r\\n    LogLevel[LogLevel[\\\"INFO\\\"] = 2] = \\\"INFO\\\";\\r\\n    LogLevel[LogLevel[\\\"WARN\\\"] = 3] = \\\"WARN\\\";\\r\\n    LogLevel[LogLevel[\\\"ERROR\\\"] = 4] = \\\"ERROR\\\";\\r\\n    LogLevel[LogLevel[\\\"SILENT\\\"] = 5] = \\\"SILENT\\\";\\r\\n})(exports.LogLevel || (exports.LogLevel = {}));\\r\\n/**\\r\\n * The default log level\\r\\n */\\r\\nvar defaultLogLevel = exports.LogLevel.INFO;\\r\\n/**\\r\\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\\r\\n * messages on to their corresponding console counterparts (if the log method\\r\\n * is supported by the current log level)\\r\\n */\\r\\nvar defaultLogHandler = function (instance, logType) {\\r\\n    var args = [];\\r\\n    for (var _i = 2; _i < arguments.length; _i++) {\\r\\n        args[_i - 2] = arguments[_i];\\r\\n    }\\r\\n    if (logType < instance.logLevel)\\r\\n        return;\\r\\n    var now = new Date().toISOString();\\r\\n    switch (logType) {\\r\\n        /**\\r\\n         * By default, `console.debug` is not displayed in the developer console (in\\r\\n         * chrome). To avoid forcing users to have to opt-in to these logs twice\\r\\n         * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\\r\\n         * logs to the `console.log` function.\\r\\n         */\\r\\n        case exports.LogLevel.DEBUG:\\r\\n            console.log.apply(console, [\\\"[\\\" + now + \\\"]  \\\" + instance.name + \\\":\\\"].concat(args));\\r\\n            break;\\r\\n        case exports.LogLevel.VERBOSE:\\r\\n            console.log.apply(console, [\\\"[\\\" + now + \\\"]  \\\" + instance.name + \\\":\\\"].concat(args));\\r\\n            break;\\r\\n        case exports.LogLevel.INFO:\\r\\n            console.info.apply(console, [\\\"[\\\" + now + \\\"]  \\\" + instance.name + \\\":\\\"].concat(args));\\r\\n            break;\\r\\n        case exports.LogLevel.WARN:\\r\\n            console.warn.apply(console, [\\\"[\\\" + now + \\\"]  \\\" + instance.name + \\\":\\\"].concat(args));\\r\\n            break;\\r\\n        case exports.LogLevel.ERROR:\\r\\n            console.error.apply(console, [\\\"[\\\" + now + \\\"]  \\\" + instance.name + \\\":\\\"].concat(args));\\r\\n            break;\\r\\n        default:\\r\\n            throw new Error(\\\"Attempted to log a message with an invalid logType (value: \\\" + logType + \\\")\\\");\\r\\n    }\\r\\n};\\r\\nvar Logger = /** @class */ (function () {\\r\\n    /**\\r\\n     * Gives you an instance of a Logger to capture messages according to\\r\\n     * Firebase's logging scheme.\\r\\n     *\\r\\n     * @param name The name that the logs will be associated with\\r\\n     */\\r\\n    function Logger(name) {\\r\\n        this.name = name;\\r\\n        /**\\r\\n         * The log level of the given Logger instance.\\r\\n         */\\r\\n        this._logLevel = defaultLogLevel;\\r\\n        /**\\r\\n         * The log handler for the Logger instance.\\r\\n         */\\r\\n        this._logHandler = defaultLogHandler;\\r\\n        /**\\r\\n         * Capture the current instance for later use\\r\\n         */\\r\\n        instances.push(this);\\r\\n    }\\r\\n    Object.defineProperty(Logger.prototype, \\\"logLevel\\\", {\\r\\n        get: function () {\\r\\n            return this._logLevel;\\r\\n        },\\r\\n        set: function (val) {\\r\\n            if (!(val in exports.LogLevel)) {\\r\\n                throw new TypeError('Invalid value assigned to `logLevel`');\\r\\n            }\\r\\n            this._logLevel = val;\\r\\n        },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(Logger.prototype, \\\"logHandler\\\", {\\r\\n        get: function () {\\r\\n            return this._logHandler;\\r\\n        },\\r\\n        set: function (val) {\\r\\n            if (typeof val !== 'function') {\\r\\n                throw new TypeError('Value assigned to `logHandler` must be a function');\\r\\n            }\\r\\n            this._logHandler = val;\\r\\n        },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    /**\\r\\n     * The functions below are all based on the `console` interface\\r\\n     */\\r\\n    Logger.prototype.debug = function () {\\r\\n        var args = [];\\r\\n        for (var _i = 0; _i < arguments.length; _i++) {\\r\\n            args[_i] = arguments[_i];\\r\\n        }\\r\\n        this._logHandler.apply(this, [this, exports.LogLevel.DEBUG].concat(args));\\r\\n    };\\r\\n    Logger.prototype.log = function () {\\r\\n        var args = [];\\r\\n        for (var _i = 0; _i < arguments.length; _i++) {\\r\\n            args[_i] = arguments[_i];\\r\\n        }\\r\\n        this._logHandler.apply(this, [this, exports.LogLevel.VERBOSE].concat(args));\\r\\n    };\\r\\n    Logger.prototype.info = function () {\\r\\n        var args = [];\\r\\n        for (var _i = 0; _i < arguments.length; _i++) {\\r\\n            args[_i] = arguments[_i];\\r\\n        }\\r\\n        this._logHandler.apply(this, [this, exports.LogLevel.INFO].concat(args));\\r\\n    };\\r\\n    Logger.prototype.warn = function () {\\r\\n        var args = [];\\r\\n        for (var _i = 0; _i < arguments.length; _i++) {\\r\\n            args[_i] = arguments[_i];\\r\\n        }\\r\\n        this._logHandler.apply(this, [this, exports.LogLevel.WARN].concat(args));\\r\\n    };\\r\\n    Logger.prototype.error = function () {\\r\\n        var args = [];\\r\\n        for (var _i = 0; _i < arguments.length; _i++) {\\r\\n            args[_i] = arguments[_i];\\r\\n        }\\r\\n        this._logHandler.apply(this, [this, exports.LogLevel.ERROR].concat(args));\\r\\n    };\\r\\n    return Logger;\\r\\n}());\\n\\n/**\\r\\n * Copyright 2017 Google Inc.\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\r\\nfunction setLogLevel(level) {\\r\\n    instances.forEach(function (inst) {\\r\\n        inst.logLevel = level;\\r\\n    });\\r\\n}\\n\\nexports.setLogLevel = setLogLevel;\\nexports.Logger = Logger;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"Object\",\"defineProperty\",\"value\",\"instances\",\"LogLevel\",\"defaultLogLevel\",\"INFO\",\"defaultLogHandler\",\"instance\",\"logType\",\"args\",\"_i\",\"arguments\",\"length\",\"logLevel\",\"now\",\"toISOString\",\"Date\",\"DEBUG\",\"console\",\"log\",\"apply\",\"name\",\"concat\",\"VERBOSE\",\"info\",\"WARN\",\"warn\",\"ERROR\",\"error\",\"Error\",\"Logger\",\"_logLevel\",\"_logHandler\",\"push\",\"prototype\",\"get\",\"set\",\"val\",\"TypeError\",\"enumerable\",\"configurable\",\"debug\",\"Logger.prototype.debug\",\"Logger.prototype.log\",\"Logger.prototype.info\",\"Logger.prototype.warn\",\"Logger.prototype.error\",\"setLogLevel\",\"level\",\"forEach\",\"inst\"]\n}\n"]