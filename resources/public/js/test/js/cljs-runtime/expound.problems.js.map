{"version":3,"file":"expound.problems.js","sources":["expound/problems.cljc"],"mappings":"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","names":["expound.problems/blank-form","form","cljs.core/map?","cljs.core/zipmap","cljs.core/keys","cljs.core.repeat.cljs$core$IFn$_invoke$arity$1","cljs.core/vector?","cljs.core/vec","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","cljs.core/count","cljs.core/set?","cljs.core/list?","cljs.core/seq?","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/list","cljs.spec.alpha/def-impl","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4","cljs.core/any?","cljs.spec.alpha/cat-impl","cljs.core/boolean?","expound.problems/summary-form","show-valid-values?","in","vec__9407","seq__9408","cljs.core/seq","first__9409","cljs.core/first","cljs.core/next","k","rst","or__3949__auto__","displayed-form","cljs.core/empty?","and__3938__auto__","expound.paths/kps?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","G__9410","G__9411","G__9412","expound.paths/kvps?","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.core/associative?","G__9413","G__9414","G__9415","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core/int?","G__9416","G__9417","G__9418","cljs.core.into.cljs$core$IFn$_invoke$arity$2","G__9419","G__9420","G__9421","G__9422","G__9423","G__9424","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","expound.problems/highlight-line","prefix","replacement","max-width","cljs.core/max","p1__9430#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","clojure.string/split-lines","expound.printer.indent.cljs$core$IFn$_invoke$arity$2","cljs.core/str","expound.problems/adjust-in","problem","e9433","expound.paths/in-with-kps","e","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__9437","fexpr__9436","expound.problems/adjust-path","failure","cljs.core/rest","expound.problems/add-spec","spec","expound.problems/fix-via","expound.problems/missing-spec?","_failure","expound.problems/not-in-set?","expound.problems/fspec-exception-failure?","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","expound.problems/fspec-ret-failure?","expound.problems/fspec-fn-failure?","expound.problems/check-ret-failure?","expound.problems/check-fn-failure?","expound.problems/missing-key?","pred","cljs.spec.alpha.valid_QMARK_.cljs$core$IFn$_invoke$arity$2","expound.problems/insufficient-input?","cljs.core/contains?","expound.problems/extra-input?","expound.problems/ptype","expound.problems/value-in","vec__9450","seq__9451","first__9452","cljs.core/seqable?","expound.problems/escape-replacement","pattern","s","clojure.string/replace","expound.problems/highlighted-value","opts","map__9466","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","map__9467","cljs.core.get.cljs$core$IFn$_invoke$arity$3","vec__9468","seq__9469","first__9470","value-at-path","relevant","regex","cljs.core/re-pattern","*print-namespace-maps*9473","cljs.core/*print-namespace-maps*","expound.printer/pprint-str","clojure.walk/prewalk-replace","line","_more","cljs.core/re-find","highlighted-line","expound.printer.indent.cljs$core$IFn$_invoke$arity$3","expound.ansi.color.cljs$core$IFn$_invoke$arity$variadic","expound.printer/no-trailing-whitespace","expound.problems/annotate","explain-data","map__9483","problems","value","args","ret","fn","caller","problems'","p1__9481#","p1__9482#","cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","expound.problems/type"],"sourcesContent":["(ns expound.problems\n  (:require [expound.paths :as paths]\n            [clojure.spec.alpha :as s]\n            [clojure.walk :as walk]\n            [clojure.string :as string]\n            [expound.printer :as printer]\n            [expound.ansi :as ansi])\n  (:refer-clojure :exclude [type]))\n\n(defn blank-form [form]\n  (cond\n    (map? form)\n    (zipmap (keys form) (repeat ::irrelevant))\n\n    (vector? form)\n    (vec (repeat (count form) ::irrelevant))\n\n    (set? form)\n    form\n\n    (or (list? form)\n        (seq? form))\n    (apply list (repeat (count form) ::irrelevant))\n\n    :else\n    ::irrelevant))\n\n(s/fdef summary-form\n        :args (s/cat :show-valid-values? boolean?\n                     :form any?\n                     :highlighted-path :expound/path))\n(defn summary-form [show-valid-values? form in]\n  (let [[k & rst] in\n        rst (or rst [])\n        displayed-form (if show-valid-values? form (blank-form form))]\n    (cond\n      (empty? in)\n      ::relevant\n\n      (and (map? form) (paths/kps? k))\n      (-> displayed-form\n          (dissoc (:key k))\n          (assoc (summary-form show-valid-values? (:key k) rst)\n                 ::irrelevant))\n\n      (and (map? form) (paths/kvps? k))\n      (recur show-valid-values? (nth (seq form) (:idx k)) rst)\n\n      (associative? form)\n      (assoc displayed-form\n             k\n             (summary-form show-valid-values? (get form k) rst))\n\n      (and (int? k) (seq? form))\n      (apply list (-> displayed-form\n                      vec\n                      (assoc k (summary-form show-valid-values? (nth form k) rst))))\n\n      (and (int? k) (set? form))\n      (into #{} (-> displayed-form\n                    vec\n                    (assoc k (summary-form show-valid-values? (nth (seq form) k) rst))))\n\n      (and (int? k) (list? form))\n      (into '() (-> displayed-form\n                    vec\n                    (assoc k (summary-form show-valid-values? (nth (seq form) k) rst))))\n\n      :else\n      (throw (ex-info \"Cannot find path segment in form. This can be caused by using conformers to transform values, which is not supported in Expound\"\n                      {:form form\n                       :in in})))))\n\n;; FIXME - this function is not intuitive.\n(defn highlight-line\n  [prefix replacement]\n  (let [max-width (apply max (map #(count (str %)) (string/split-lines replacement)))]\n    (printer/indent (count (str prefix))\n                    (apply str (repeat max-width \"^\")))))\n\n(defn- adjust-in [form problem]\n  ;; Remove try/catch when\n  ;; https://dev.clojure.org/jira/browse/CLJ-2192 or\n  ;; https://dev.clojure.org/jira/browse/CLJ-2258 are fixed\n  (try\n    (assoc problem :expound/in (paths/in-with-kps form (:val problem) (:in problem) []))\n    (catch #?(:cljs :default\n              :clj Exception) e\n      (if (or\n           (= '(apply fn) (:pred problem))\n           (#{:ret} (first (:path problem))))\n        (assoc problem :expound/in (:in problem))\n        (throw e)))))\n\n(defn- adjust-path [failure problem]\n  (assoc problem :expound/path\n         (if (= :instrument failure)\n           (vec (rest (:path problem)))\n           (:path problem))))\n\n(defn- add-spec [spec problem]\n  (assoc problem :spec spec))\n\n;; via is slightly different when using s/assert\n(defn fix-via [spec problem]\n  (if (= spec (first (:via problem)))\n    (assoc problem :expound/via (:via problem))\n    (assoc problem :expound/via (into [spec] (:via problem)))))\n\n(defn ^:private missing-spec? [_failure problem]\n  (= \"no method\" (:reason problem)))\n\n(defn ^:private not-in-set? [_failure problem]\n  (set? (:pred problem)))\n\n(defn ^:private fspec-exception-failure? [failure problem]\n  (and (not= :instrument failure)\n       (not= :check-failed failure)\n       (= '(apply fn) (:pred problem))))\n\n(defn ^:private fspec-ret-failure? [failure problem]\n  (and\n   (not= :instrument failure)\n   (not= :check-failed failure)\n   (= :ret (first (:path problem)))))\n\n(defn ^:private fspec-fn-failure? [failure problem]\n  (and\n   (not= :instrument failure)\n   (not= :check-failed failure)\n   (= :fn (first (:path problem)))))\n\n(defn ^:private check-ret-failure? [failure problem]\n  (and\n   (= :check-failed failure)\n   (= :ret (first (:path problem)))))\n\n(defn ^:private check-fn-failure? [failure problem]\n  (and (= :check-failed failure)\n       (= :fn (first (:path problem)))))\n\n(defn ^:private missing-key? [_failure problem]\n  (let [pred (:pred problem)]\n    (and (seq? pred)\n         (< 2 (count pred))\n         (s/valid?\n          :expound.spec/contains-key-pred\n          (nth pred 2)))))\n\n(defn ^:private insufficient-input? [_failure problem]\n  (contains? #{\"Insufficient input\"} (:reason problem)))\n\n(defn ^:private extra-input? [_failure problem]\n  (contains? #{\"Extra input\"} (:reason problem)))\n\n(defn ^:private ptype [failure problem]\n  (cond\n    (:expound.spec.problem/type problem)\n    (:expound.spec.problem/type problem)\n\n    (insufficient-input? failure problem)\n    :expound.problem/insufficient-input\n\n    (extra-input? failure problem)\n    :expound.problem/extra-input\n\n    (not-in-set? failure problem)\n    :expound.problem/not-in-set\n\n    (missing-key? failure problem)\n    :expound.problem/missing-key\n\n    (missing-spec? failure problem)\n    :expound.problem/missing-spec\n\n    (fspec-exception-failure? failure problem)\n    :expound.problem/fspec-exception-failure\n\n    (fspec-ret-failure? failure problem)\n    :expound.problem/fspec-ret-failure\n\n    (fspec-fn-failure? failure problem)\n    :expound.problem/fspec-fn-failure\n\n    (check-ret-failure? failure problem)\n    :expound.problem/check-ret-failure\n\n    (check-fn-failure? failure problem)\n    :expound.problem/check-fn-failure\n\n    :else\n    :expound.problem/unknown))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;; public ;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn value-in\n  \"Similar to get-in, but works with paths that reference map keys\"\n  [form in]\n  (let [[k & rst] in]\n    (cond\n      (empty? in)\n      form\n\n      (and (map? form) (paths/kps? k))\n      (:key k)\n\n      (and (map? form) (paths/kvps? k))\n      (recur (nth (seq form) (:idx k)) rst)\n\n      (associative? form)\n      (recur (get form k) rst)\n\n      (and (int? k) (seqable? form))\n      (recur (nth (seq form) k) rst))))\n\n(defn escape-replacement [pattern s]\n  #?(:clj (if (string? pattern)\n            s\n            (string/re-quote-replacement s))\n     :cljs (string/replace s #\"\\$\" \"$$$$\")))\n\n(defn highlighted-value\n  \"Given a problem, returns a pretty printed\n   string that highlights the problem value\"\n  [opts problem]\n  (let [{:keys [:expound/form :expound/in]} problem\n        {:keys [show-valid-values?] :or {show-valid-values? false}} opts\n        value-at-path (value-in form in)\n        relevant (str \"(\" ::relevant \"|(\" ::kv-relevant \"\\\\s+\" ::kv-relevant \"))\")\n        regex (re-pattern (str \"(.*)\" relevant \".*\"))\n        s (binding [*print-namespace-maps* false] (printer/pprint-str (walk/prewalk-replace {::irrelevant '...} (summary-form show-valid-values? form in))))\n        [line prefix & _more] (re-find regex s)\n        highlighted-line (-> line\n                             (string/replace (re-pattern relevant) (escape-replacement\n                                                                    (re-pattern relevant)\n                                                                    (printer/indent 0 (count prefix) (ansi/color (printer/pprint-str value-at-path) :bad-value))))\n                             (str \"\\n\" (ansi/color (highlight-line prefix (printer/pprint-str value-at-path))\n                                                   :pointer)))]\n    ;;highlighted-line\n    (printer/no-trailing-whitespace (string/replace s line (escape-replacement line highlighted-line)))))\n\n(defn annotate [explain-data]\n  (let [{::s/keys [problems value args ret fn failure spec]} explain-data\n        caller (or (:clojure.spec.test.alpha/caller explain-data) (:orchestra.spec.test/caller explain-data))\n        form (if (not= :instrument failure)\n               value\n               (cond\n                 (contains? explain-data ::s/ret) ret\n                 (contains? explain-data ::s/fn) fn\n                 (contains? explain-data ::s/args) args))\n        problems' (map (comp (partial adjust-in form)\n                             (partial adjust-path failure)\n                             (partial add-spec spec)\n                             (partial fix-via spec)\n                             #(assoc % :expound/form form)\n                             #(assoc % :expound.spec.problem/type (ptype failure %)))\n                       problems)]\n    (-> explain-data\n        (assoc :expound/form form\n               :expound/caller caller\n               :expound/problems problems'))))\n\n(def type ptype)\n"]}