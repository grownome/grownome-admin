{"version":3,"file":"com.degel.re_frame_firebase.helpers.js","sources":["com/degel/re_frame_firebase/helpers.cljs"],"mappings":";;;;;;AAgBA,sDAAA,tDAAOA,oHAAcC;AAArB,AACE,oCAAA,mDAAI,AAAMA,nDACNC,7BACAC;;AAGN,sDAAA,tDAAME,oHAAiBC,QAAQC,WAAWC;AAA1C,AAAA,oBACS,AAACC,oBAAe,AAAAC,6BAAA,+EAAA,+EAAA,MAAgCH;AADzD;AAAA,AAAA,MAAA,KAAAH,MAAA;;;AAAA,oBAES,AAACK,oBAAe,AAAAC,6BAAA,+EAAA,+EAAA,MAAgCF;AAFzD;AAAA,AAAA,MAAA,KAAAJ,MAAA;;;AAGE,oBAAMG;AAAN,AACE,AAAOD,aAAQ,AAACK,2BAAmBJ;;AADrC;;AAEA,oBAAIC;AACF,OAAQF,cAAQ,AAACK,2BAAmBH;;AACpC,OAAQF,cAAQ,AAACM;;;AAGrB,8DAAA,9DAAME,oIAAyBP,WAAWC;AAA1C,AAAA,oBACS,AAACC,oBAAe,AAAAC,6BAAA,+EAAA,+EAAA,MAAgCH;AADzD;AAAA,AAAA,MAAA,KAAAH,MAAA;;;AAAA,oBAES,AAACK,oBAAe,AAAAC,6BAAA,+EAAA,+EAAA,MAAgCF;AAFzD;AAAA,AAAA,MAAA,KAAAJ,MAAA;;;AAAA,IAAAS,YAIE,iBAAMN,iBAAW,iBAAAS,oBAAKT;AAAL,AAAA,oBAAAS;AAAgB,OAACL,2BAAmBJ;;AAApCS;;;IACXR,iBAAW,iBAAAQ,oBAAKR;AAAL,AAAA,oBAAAQ;AAAgB,OAACL,2BAAmBH;;AAApCQ;;;AADjB,AAEE;kBAAKC;AAAL,AACE,GAAM,QAAA,PAAMA;AAAK,oBAAMV;AAAN,AAAiB,QAACA,+CAAAA,iDAAAA;;AAAlB;;;AAAjB,oBACMC;AAAW,QAACA,+CAAAA,oDAAAA,PAAWS,gCAAAA;;AAD7B,AAEiB,IAAAC,cAAC,AAACN;AAAF,AAAA,QAAAM,4CAAAA,iDAAAA,PAA8BD,6BAAAA;;;;;;;AATrD,AAAA,GAGUF;AAHV;AAAA,AAAA,MAAA,KAAAX,MAAA;;;AAAA,oBAGcS;AAHd;AAAA,AAAA,MAAA,KAAAT,MAAA;;;AAAAS","names":["com.degel.re-frame-firebase.helpers/js->clj-tree","x","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","clojure.walk/keywordize-keys","js/Error","com.degel.re-frame-firebase.helpers/promise-wrapper","promise","on-success","on-failure","iron.utils/validate","cljs.spec.alpha/nilable-impl","iron.re-utils/event->fn","com.degel.re-frame-firebase.core/default-error-handler","%","com.degel.re-frame-firebase.helpers/success-failure-wrapper","cljs.core/fn?","and__3938__auto__","err","fexpr__9915"],"sourcesContent":[";;; Author: David Goldfarb (deg@degel.com)\n;;; Copyright (c) 2017, David Goldfarb\n\n(ns com.degel.re-frame-firebase.helpers\n  (:require\n   [clojure.spec.alpha :as s]\n   [iron.re-utils :as re-utils]\n   [iron.utils :as utils]\n   [com.degel.re-frame-firebase.core :as core]))\n\n\n;;; Helper functions that straddle the line between this library and Iron\n;;; utils. These may move, change, or be abandoned, as I get more comfortable\n;;; with them.\n\n\n(defn- js->clj-tree [x]\n  (-> (.val x)\n      js->clj\n      clojure.walk/keywordize-keys))\n\n\n(defn promise-wrapper [promise on-success on-failure]\n  {:pre [(utils/validate (s/nilable :re-frame/vec-or-fn) on-success)\n         (utils/validate (s/nilable :re-frame/vec-or-fn) on-failure)]}\n  (when on-success\n    (.then promise (re-utils/event->fn on-success)))\n  (if on-failure\n    (.catch promise (re-utils/event->fn on-failure))\n    (.catch promise (core/default-error-handler))))\n\n\n(defn success-failure-wrapper [on-success on-failure]\n  {:pre [(utils/validate (s/nilable :re-frame/vec-or-fn) on-success)\n         (utils/validate (s/nilable :re-frame/vec-or-fn) on-failure)]\n   :post (fn? %)}\n  (let [on-success (and on-success (re-utils/event->fn on-success))\n        on-failure (and on-failure (re-utils/event->fn on-failure))]\n    (fn [err]\n      (cond (nil? err) (when on-success (on-success))\n            on-failure (on-failure err)\n            :else      ((core/default-error-handler) err)))))\n"]}