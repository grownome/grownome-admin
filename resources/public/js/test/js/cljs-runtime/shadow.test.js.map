{"version":3,"file":"shadow.test.js","sources":["shadow/test.cljs"],"mappings":"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","names":["shadow.test/run-tests-block","env","namespaces","summary","cljs.core/volatile!","merge-counters","cljs.core/-vreset!","G__10483","cljs.core/-deref","G__10484","fexpr__10482","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/merge-with","cljs.core/+","cljs.test/get-current-env","cljs.test/set-env!","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","ns","shadow.test/test-ns-block","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","G__10485","cljs.core/deref","cljs.test/report","G__10486","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.test/clear-env!","var_args","G__10493","shadow.test/run-tests","js/Error","shadow.test.run_tests.cljs$core$IFn$_invoke$arity$1","cljs.test.empty_env.cljs$core$IFn$_invoke$arity$0","shadow.test.run_tests.cljs$core$IFn$_invoke$arity$2","shadow.test.env/get-test-namespaces","cljs.test/run-block","G__10519","shadow.test/run-all-tests","shadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$2","re","p1__10517#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","or__3949__auto__","cljs.core/re-matches","shadow.test/test-all-vars-block","map__10528","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","fixtures","each-fixtures","vars","test-ns","shadow.test.env/get-test-ns-info","temp__5457__auto__","fix","cljs.test.update_current_env_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/assoc","cljs.test/test-vars-block","cljs.core/vals","p1__10527#","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core/meta","shadow.test/test-all-vars","G__10547","cljs.core/Symbol","cljs.test/do-report","cljs.test/block","G__10562","shadow.test/test-ns","shadow.test.test_ns.cljs$core$IFn$_invoke$arity$2","cljs.core.concat.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns shadow.test\n  \"cljs.test just without all those damn macros\n   requires the shadow.build.cljs-hacks deftest mod which calls shadow.test/register-test\"\n  (:require [cljs.test :as ct]\n            [shadow.test.env :as env]))\n\n(declare test-ns-block)\n\n(defn run-tests-block\n  \"Like test-vars, but returns a block for further composition and\n  later execution.\"\n  [env namespaces]\n\n  (let [summary\n        (volatile!\n          {:test 0 :pass 0 :fail 0 :error 0\n           :type :summary})\n\n        merge-counters\n        (fn []\n          (vswap!\n            summary\n            (partial merge-with +)\n            (:report-counters (ct/get-current-env))))]\n\n    (-> [(fn [] (ct/set-env! env))]\n        (into (->> namespaces\n                   (mapcat (fn [ns]\n                             (-> (test-ns-block env ns)\n                                 (conj merge-counters))))))\n        (conj (fn []\n                (ct/report @summary)\n                (ct/report (assoc @summary :type :end-run-tests))\n                (ct/clear-env!))))))\n\n(defn run-tests\n  ([]\n   (run-tests (ct/empty-env)))\n  ([env]\n   (run-tests env (env/get-test-namespaces)))\n  ([env namespaces]\n   (ct/run-block (run-tests-block env namespaces))))\n\n(defn run-all-tests\n  \"Runs all tests in all namespaces; prints results.\n  Optional argument is a regular expression; only namespaces with\n  names matching the regular expression (with re-matches) will be\n  tested.\"\n  ([] (run-all-tests (ct/empty-env) nil))\n  ([env] (run-all-tests env nil))\n  ([env re]\n   (run-tests env\n     (->> (env/get-test-namespaces)\n          (filter #(or (nil? re)\n                       (re-matches re (str %))))\n          (into [])))))\n\n(defn test-all-vars-block [ns]\n  (let [env (ct/get-current-env)\n        {:keys [fixtures each-fixtures vars] :as test-ns}\n        (env/get-test-ns-info ns)]\n\n    (-> [(fn []\n           (when (nil? env)\n             (ct/set-env! (ct/empty-env)))\n           (when-let [fix (:once fixtures)]\n             (ct/update-current-env! [:once-fixtures] assoc ns fix))\n           (when-let [fix (:each fixtures)]\n             (ct/update-current-env! [:each-fixtures] assoc ns fix)))]\n\n        (into (ct/test-vars-block\n                (->> vars ;; vars is {test-name test-var}\n                     (vals)\n                     (sort-by #(-> % meta :line)))))\n        #_(conj (fn []\n                  (when (nil? env)\n                    (ct/clear-env!)))))))\n\n(defn test-all-vars\n  \"Calls test-vars on every var with :test metadata interned in the\n  namespace, with fixtures.\"\n  [ns]\n  (ct/run-block\n    (-> (test-all-vars-block ns)\n        (conj (fn []\n                (ct/report {:type :end-test-all-vars :ns ns}))))))\n\n(defn test-ns-block\n  \"Like test-ns, but returns a block for further composition and\n  later execution.  Does not clear the current env.\"\n  ([env ns]\n   {:pre [(symbol? ns)]}\n   [(fn []\n      (ct/set-env! env)\n      (ct/do-report {:type :begin-test-ns, :ns ns})\n      ;; If the namespace has a test-ns-hook function, call that:\n      ;; FIXME: must turn test-ns-hook into macro so it registers itself instead of just calling a defn\n      (ct/block (test-all-vars-block ns)))\n    (fn []\n      (ct/do-report {:type :end-test-ns, :ns ns}))]))\n\n(defn test-ns\n  \"If the namespace defines a function named test-ns-hook, calls that.\n  Otherwise, calls test-all-vars on the namespace.  'ns' is a\n  namespace object or a symbol.\n\n  Internally binds *report-counters* to a ref initialized to\n  *initial-report-counters*.  \"\n  ([ns] (test-ns (ct/empty-env) ns))\n  ([env ns]\n   (ct/run-block\n     (concat (test-ns-block env ns)\n       [(fn []\n          (ct/clear-env!))]))))\n"]}