{"version":3,"file":"re_frame.fx.js","sources":["re_frame/fx.cljc"],"mappings":"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","names":["re-frame.fx/kind","js/Error","re-frame.registrar/kinds","re-frame.fx/reg-fx","id","handler","re-frame.registrar/register-handler","re-frame.fx/do-fx","re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic","context","re-frame.trace/is-trace-enabled?","*current-trace*6647","re-frame.trace/*current-trace*","re-frame.trace/start-trace","end__4979__auto__","re-frame.interop/now","duration__4980__auto__","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","re-frame.trace/run-tracing-callbacks!","seq__6649","cljs.core/seq","chunk__6650","count__6651","i__6652","vec__6653","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","temp__5457__auto__","cljs.core/chunked-seq?","c__4351__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__6663","cljs.core/first","cljs.core/next","seq__6670","chunk__6671","count__6672","i__6673","vec__6674","vec__6677","effect-key","effect-value","temp__5455__auto__","effect-fn","re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3","re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","value","seq__6771","chunk__6772","count__6773","i__6774","map__6779","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__6785","ms","dispatch","effect","cljs.core/empty?","re-frame.interop/set-timeout!","re-frame.router/dispatch","cljs.core/vector?","cljs.core/sequential?","seq__6819","chunk__6820","count__6821","i__6822","event","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","clear-event","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","re-frame.registrar/clear-handlers","re-frame.events/kind","seq__6837","chunk__6838","count__6839","i__6840","cljs.core/deref","re-frame.db/app-db","cljs.core/reset!"],"sourcesContent":["(ns re-frame.fx\n  (:require\n    [re-frame.router      :as router]\n    [re-frame.db          :refer [app-db]]\n    [re-frame.interceptor :refer [->interceptor]]\n    [re-frame.interop     :refer [set-timeout!]]\n    [re-frame.events      :as events]\n    [re-frame.registrar   :refer [get-handler clear-handlers register-handler]]\n    [re-frame.loggers     :refer [console]]\n    [re-frame.trace :as trace :include-macros true]))\n\n\n;; -- Registration ------------------------------------------------------------\n\n(def kind :fx)\n(assert (re-frame.registrar/kinds kind))\n\n(defn reg-fx\n  \"Register the given effect `handler` for the given `id`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a side-effecting function which takes a single argument and whose return\n  value is ignored.\n\n  Example Use\n  -----------\n\n  First, registration ... associate `:effect2` with a handler.\n\n  (reg-fx\n     :effect2\n     (fn [value]\n        ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map ...\n\n  {...\n   :effect2  [1 2]}\n\n   ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n   called with an argument of `[1 2]`.\"\n  [id handler]\n  (register-handler kind id handler))\n\n;; -- Interceptor -------------------------------------------------------------\n\n(def do-fx\n  \"An interceptor whose `:after` actions the contents of `:effects`. As a result,\n  this interceptor is Domino 3.\n\n  This interceptor is silently added (by reg-event-db etc) to the front of\n  interceptor chains for all events.\n\n  For each key in `:effects` (a map), it calls the registered `effects handler`\n  (see `reg-fx` for registration of effect handlers).\n\n  So, if `:effects` was:\n      {:dispatch  [:hello 42]\n       :db        {...}\n       :undo      \\\"set flag\\\"}\n\n  it will call the registered effect handlers for each of the map's keys:\n  `:dispatch`, `:undo` and `:db`. When calling each handler, provides the map\n  value for that key - so in the example above the effect handler for :dispatch\n  will be given one arg `[:hello 42]`.\n\n  You cannot rely on the ordering in which effects are executed.\"\n  (->interceptor\n    :id :do-fx\n    :after (fn do-fx-after\n             [context]\n             (trace/with-trace\n               {:op-type :event/do-fx}\n               (doseq [[effect-key effect-value] (:effects context)]\n                 (if-let [effect-fn (get-handler kind effect-key false)]\n                   (effect-fn effect-value)\n                   (console :error \"re-frame: no handler registered for effect:\" effect-key \". Ignoring.\")))))))\n\n;; -- Builtin Effect Handlers  ------------------------------------------------\n\n;; :dispatch-later\n;;\n;; `dispatch` one or more events after given delays. Expects a collection\n;; of maps with two keys:  :`ms` and `:dispatch`\n;;\n;; usage:\n;;\n;;    {:dispatch-later [{:ms 200 :dispatch [:event-id \"param\"]}    ;;  in 200ms do this: (dispatch [:event-id \"param\"])\n;;                      {:ms 100 :dispatch [:also :this :in :100ms]}]}\n;;\n(reg-fx\n  :dispatch-later\n  (fn [value]\n    (doseq [{:keys [ms dispatch] :as effect} value]\n        (if (or (empty? dispatch) (not (number? ms)))\n          (console :error \"re-frame: ignoring bad :dispatch-later value:\" effect)\n          (set-timeout! #(router/dispatch dispatch) ms)))))\n\n\n;; :dispatch\n;;\n;; `dispatch` one event. Excepts a single vector.\n;;\n;; usage:\n;;   {:dispatch [:event-id \"param\"] }\n\n(reg-fx\n  :dispatch\n  (fn [value]\n    (if-not (vector? value)\n      (console :error \"re-frame: ignoring bad :dispatch value. Expected a vector, but got:\" value)\n      (router/dispatch value))))\n\n\n;; :dispatch-n\n;;\n;; `dispatch` more than one event. Expects a list or vector of events. Something for which\n;; sequential? returns true.\n;;\n;; usage:\n;;   {:dispatch-n (list [:do :all] [:three :of] [:these])}\n;;\n;; Note: nil events are ignored which means events can be added\n;; conditionally:\n;;    {:dispatch-n (list (when (> 3 5) [:conditioned-out])\n;;                       [:another-one])}\n;;\n(reg-fx\n  :dispatch-n\n  (fn [value]\n    (if-not (sequential? value)\n      (console :error \"re-frame: ignoring bad :dispatch-n value. Expected a collection, got got:\" value)\n      (doseq [event (remove nil? value)] (router/dispatch event)))))\n\n\n;; :deregister-event-handler\n;;\n;; removes a previously registered event handler. Expects either a single id (\n;; typically a namespaced keyword), or a seq of ids.\n;;\n;; usage:\n;;   {:deregister-event-handler :my-id)}\n;; or:\n;;   {:deregister-event-handler [:one-id :another-id]}\n;;\n(reg-fx\n  :deregister-event-handler\n  (fn [value]\n    (let [clear-event (partial clear-handlers events/kind)]\n      (if (sequential? value)\n        (doseq [event value] (clear-event event))\n        (clear-event value)))))\n\n\n;; :db\n;;\n;; reset! app-db with a new value. `value` is expected to be a map.\n;;\n;; usage:\n;;   {:db  {:key1 value1 key2 value2}}\n;;\n(reg-fx\n  :db\n  (fn [value]\n    (if-not (identical? @app-db value)\n      (reset! app-db value))))\n\n"]}