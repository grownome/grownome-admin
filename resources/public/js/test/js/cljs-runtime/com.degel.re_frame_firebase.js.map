{"version":3,"file":"com.degel.re_frame_firebase.js","sources":["com/degel/re_frame_firebase.cljs"],"mappings":"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","names":["G__10053","G__10054","re-frame.core/reg-fx","com.degel.re-frame-firebase.database/write-effect","G__10057","G__10058","com.degel.re-frame-firebase.database/push-effect","G__10061","G__10062","com.degel.re-frame-firebase.database/once-effect","G__10065","G__10066","effects","cljs.core/run!","p__10067","vec__10068","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","event-type","args","G__10071","cljs.core/Keyword","com.degel.re-frame-firebase.firestore/delete-effect","com.degel.re-frame-firebase.firestore/set-effect","com.degel.re-frame-firebase.firestore/update-effect","com.degel.re-frame-firebase.firestore/add-effect","com.degel.re-frame-firebase.firestore/write-batch-effect","com.degel.re-frame-firebase.firestore/get-effect","com.degel.re-frame-firebase.firestore/on-snapshot","js/alert","re-frame.core/reg-sub-raw","com.degel.re-frame-firebase.database/on-value-sub","G__10075","G__10076","com.degel.re-frame-firebase.auth/google-sign-in","G__10079","G__10080","com.degel.re-frame-firebase.auth/facebook-sign-in","G__10083","G__10084","com.degel.re-frame-firebase.auth/twitter-sign-in","G__10087","G__10088","com.degel.re-frame-firebase.auth/github-sign-in","G__10091","G__10092","com.degel.re-frame-firebase.auth/email-sign-in","G__10095","G__10096","com.degel.re-frame-firebase.auth/email-create-user","G__10099","G__10100","com.degel.re-frame-firebase.auth/sign-out","G__10103","G__10104","G__10105","re-frame.core/reg-sub","_","G__10106","re-frame.core/subscribe","connected?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__10110","G__10111","G__10114","G__10115","G__10118","G__10119","G__10122","G__10123","G__10126","G__10127","G__10130","G__10131","G__10134","G__10135","com.degel.re-frame-firebase.firestore/on-snapshot-effect","com.degel.re-frame-firebase.firestore/on-snapshot-sub","var_args","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","com.degel.re-frame-firebase/init","p__10139","map__10140","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","seq10138","self__4519__auto__","cljs.core/seq","firebase-app-info","get-user-sub","set-user-event","default-error-handler","com.degel.re_frame_firebase.core.set_firebase_state.cljs$core$IFn$_invoke$arity$variadic","com.degel.re-frame-firebase.core/initialize-app","com.degel.re-frame-firebase.auth/init-auth"],"sourcesContent":[";;; Author: David Goldfarb (deg@degel.com)\n;;; Copyright (c) 2017, David Goldfarb\n\n;;; Built on ideas and code from\n;;; http://timothypratley.blogspot.co.il/2016/07/reacting-to-changes-with-firebase-and.html\n;;; and https://github.com/timothypratley/voterx\n\n(ns com.degel.re-frame-firebase\n  (:require\n   [re-frame.core :as re-frame]\n   [com.degel.re-frame-firebase.core :as core]\n   [com.degel.re-frame-firebase.auth :as auth]\n   [com.degel.re-frame-firebase.database :as database]\n   [com.degel.re-frame-firebase.firestore :as firestore]))\n\n;;; Write a value to Firebase.\n;;; See https://firebase.google.com/docs/reference/js/firebase.database.Reference#set\n;;;\n;;; Example FX:\n;;; {:firebase/write [:path [:my :data]\n;;;                   :value 42\n;;;                   :on-success #(prn \"Write succeeded\")\n;;;                   :on-failure [:firebase-error]]}\n;;;\n(re-frame/reg-fx :firebase/write database/write-effect)\n\n\n;;; Write a value to a Firebase list.\n;;; See https://firebase.google.com/docs/reference/js/firebase.database.Reference#push\n;;;\n;;; Example FX:\n;;; {:firebase/push [:path [:my :collection]\n;;;                  :value \"Hello world\"\n;;;                  :on-success #(prn \"Push succeeded\")\n;;;                  :on-failure [:firebase-error]]}\n;;;\n(re-frame/reg-fx :firebase/push database/push-effect)\n\n\n;;; Asynch one-time read of a value in Firebase.\n;;; See https://firebase.google.com/docs/reference/js/firebase.database.Reference#once\n;;;\n;;; Example FX:\n;;; {:firebase/read-once [:path [:my :data]\n;;;                      :on-success [:got-my-data]\n;;;                      :on-failure [:firebase-error]]}\n;;;\n(re-frame/reg-fx :firebase/read-once database/once-effect)\n\n\n;;; Dispatch a vector of firebase effects\n;;;\n;;; Example FX:\n;;; {:firebase/multi [[:firebase/write {:path ,,,}]\n;;;                   [:firebase/push {:path ,,,}]\n;;;                   ,,,]}\n;;;\n(re-frame/reg-fx\n :firebase/multi\n (fn [effects]\n   (run! (fn [[event-type args]]\n           (case event-type\n             :firebase/write        (database/write-effect args)\n             :firebase/push         (database/push-effect args)\n             :firebase/read-once    (database/once-effect args)\n             :firestore/delete      (firestore/delete-effect args)\n             :firestore/set         (firestore/set-effect args)\n             :firestore/update      (firestore/update-effect args)\n             :firestore/add         (firestore/add-effect args)\n             :firestore/write-batch (firestore/write-batch-effect args)\n             :firestore/get         (firestore/get-effect args)\n             :firestore/on-snapshot (firestore/on-snapshot args)\n             (js/alert \"Internal error: unknown firebase effect: \" event-type \" (\" args \")\")))\n         effects)))\n\n\n;;; Watch a value in Firebase.\n;;; See https://firebase.google.com/docs/reference/js/firebase.database.Reference#on\n;;;\n;;; Example Subscription:\n;;; (re-frame/subscribe\n;;;   [:firebase/on-value {:path [:my :data]\n;;;                        :on-failure [:firebase-error]}])\n;;;\n(re-frame/reg-sub-raw :firebase/on-value  database/on-value-sub)\n\n\n;;; Login to firebase, using one of OAuth providers\n;;;\n;;; Accepts a map of the following options:\n;;;\n;;; - :sign-in-method  either :redirect (default) or :popup mode\n;;;\n;;; - :scopes       a sequence of additional OAuth scopes; supported for following auth providers:\n;;;       Google:   https://developers.google.com/identity/protocols/googlescopes\n;;;       Facebook: https://developers.facebook.com/docs/facebook-login/permissions\n;;;       GitHub:   https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/\n;;;\n;;; - :custom-parameters  check auth providers documentation for supported values:\n;;;       Google:   https://firebase.google.com/docs/reference/js/firebase.auth.GoogleAuthProvider#setCustomParameters\n;;;       Facebook: https://firebase.google.com/docs/reference/js/firebase.auth.FacebookAuthProvider#setCustomParameters\n;;;       Twitter:  https://firebase.google.com/docs/reference/js/firebase.auth.TwitterAuthProvider#setCustomParameters\n;;;       GitHub:   https://firebase.google.com/docs/reference/js/firebase.auth.GithubAuthProvider#setCustomParameters\n;;;\n;;; Example FX:\n;;; {firebase/google-sign-in {:sign-in-method :popup\n;;;                           :scopes [\"https://www.googleapis.com/auth/contacts.readonly\"\n;;;                                    \"https://www.googleapis.com/auth/calendar.readonly\"]\n;;;                           :custom-parameters {\"login_hint\" \"user@example.com\"}}}\n;;;\n(re-frame/reg-fx :firebase/google-sign-in   auth/google-sign-in)\n(re-frame/reg-fx :firebase/facebook-sign-in auth/facebook-sign-in)\n(re-frame/reg-fx :firebase/twitter-sign-in  auth/twitter-sign-in)\n(re-frame/reg-fx :firebase/github-sign-in   auth/github-sign-in)\n\n\n;;; Login to firebase using email/password authentication\n;;; or registers a new user for email/password authentication.\n;;;\n;;; Accepts a map with :email and :password\n;;;\n;;; Example FX:\n;;; {:firebase/email-sign-in {:email \"test@github.com\" :password \"myverysecretpassword\"}}\n;;;\n;;; or to create a new user:\n;;; {:firebase/email-create-user {:email \"newuser@github.com\" :password \"anotherverysecretpassword\"}}\n;;;\n(re-frame/reg-fx :firebase/email-sign-in     auth/email-sign-in)\n(re-frame/reg-fx :firebase/email-create-user auth/email-create-user)\n\n\n;;; Logout\n;;;\n;;; Example FX:\n;;; {firebase/sign-out []}\n;;;\n(re-frame/reg-fx :firebase/sign-out auth/sign-out)\n\n\n;;; Monitor connection status\n;;;\n(re-frame/reg-sub\n :firebase/connection-state\n (fn [_ _]\n   (re-frame/subscribe [:firebase/on-value {:path [:.info :connected]}]))\n (fn [connected? _]\n   {:firebase/connected? (= connected? true)}))\n\n\n;;; Set a document to Firestore.\n;;; See https://firebase.google.com/docs/reference/js/firebase.firestore.DocumentReference#se\n;;;\n;;; Key arguments:\n;;; - :path        Vector of keywords and/or strings representing the path to the document.\n;;; - :data        Map corresponding to the document.\n;;; - :set-options Map containing additional options, see firestore/clj->SetOptions.\n;;; - :on-success  Function or re-frame event vector to be dispatched.\n;;; - :on-failure  Function or re-frame event vector to be dispatched.\n;;;\n;;; Example FX:\n;;; {:firestore/set :path [:my-collection \"my-document\"]\n;;;                 :data {:field1 \"value1\"\n;;;                        :field2 {:inner1 \"a\" :inner2 \"b\"}}\n;;;                 :set-options {:merge false\n;;;                               :merge-fields [:field1 [:field2 :inner1]]}\n;;;                 :on-success [:success-event]\n;;;                 :on-failure #(prn \"Error:\" %)}\n;;;\n(re-frame/reg-fx :firestore/set firestore/set-effect)\n\n\n;;; Update a document to Firestore.\n;;; See https://firebase.google.com/docs/reference/js/firebase.firestore.DocumentReference#update\n;;;\n;;; Key arguments: :path, :data, :on-success, :on-failure\n;;;\n(re-frame/reg-fx :firestore/update firestore/update-effect)\n\n\n;;; Delete a document from Firestore.\n;;; See https://firebase.google.com/docs/reference/js/firebase.firestore.DocumentReference#delete\n;;;\n;;; Key arguments: :path, :on-success, :on-failure\n;;;\n(re-frame/reg-fx :firestore/delete firestore/delete-effect)\n\n\n;;; Execute multiple write operations using Firestore's WriteBatch\n;;; See https://firebase.google.com/docs/reference/js/firebase.firestore.WriteBatch\n;;;\n;;; WriteBatches only support :firestore/set, :firestore/update and :firestore/delete.\n;;; Key arguments:\n;;; - :operations  Vector of effect maps for each of the wanted operations.\n;;; - :on-success  You should supply a single callback function/events here for all of the operations.\n;;; - :on-failure\n;;;\n;;; Example FX:\n;;; {:firestore/batch-write\n;;;  {:operations\n;;;   [[:firestore/set {:path [:cities \"SF\"] :data {:name \"San Francisco\" :state \"CA\"}}]\n;;;    [:firestore/set {:path [:cities \"LA\"] :data {:name \"Los Angeles\" :state \"CA\"}}]\n;;;    [:firestore/set {:path [:cities \"DC\"] :data {:name \"Washington, D.C.\" :state nil}}]]\n;;;   :on-success #(prn \"Cities added to database.\")\n;;;   :on-failure #(prn \"Couldn't add cities to database. Error:\" %)}}\n;;;\n(re-frame/reg-fx :firestore/write-batch firestore/write-batch-effect)\n\n\n;;; Add a document to a Firestore collection.\n;;;\n;;; Key arguments: :path, :data, :on-success, :on-failure\n;;;\n;;; - :path       Should be a path to a collection.\n;;; - :on-success Will be provided with a vector of strings representing the path to the created document.\n;;;\n;;; Example FX:\n;;; {:firestore/add {:path [:my-collection]\n;;;                  :data my-data\n;;;                  :on-success #(prn \"Added document ID:\" (last %))}}\n;;;\n(re-frame/reg-fx :firestore/add firestore/add-effect)\n\n\n;;; Get a document or collection query from Firestore.\n;;; See https://firebase.google.com/docs/reference/js/firebase.firestore.DocumentReference#get\n;;; See https://firebase.google.com/docs/reference/js/firebase.firestore.CollectionReference#get\n;;; See https://firebase.google.com/docs/reference/js/firebase.firestore.Query\n;;;\n;;; When querying for a document, you can supply the following key arguments:\n;;; - :path-document    The same vector of keywords/strings as other effects.\n;;; - :get-options      Map containing additional options. See firestore/clj->GetOptions.\n;;; - :snapshot-options Map to be passed when retrieving data from Snapshots.\n;;;                     See firestore/clj->SnapshotOpions.\n;;; - :expose-objects   When set to true, the original Snapshot will be attached\n;;;                     under the :object key, see firestore/DocumentSnapshot->clj.\n;;; - :on-success       The clojure object will be passed as an argument to the event or fn.\n;;; - :on-failure\n;;;\n;;; When querying for a collection, you can supply the following key arguments:\n;;; - :path-collection\n;;; - :get-options\n;;; - :where          A seq of triples [field-path op value] where op should be\n;;;                   :>, :>=, :< :<=, or :==. You can also provide strings like \"<=\".\n;;; - :order-by       A seq of pairs [field-path direction] where direction should\n;;;                   either be :asc or :desc. Ascending is the default.\n;;;                   You can also provide strings like \"desc\".\n;;; - :limit          Limit the number of documents to the specified number.\n;;; - :start-at, :start-after, :end-at, :end-before\n;;;                   Limit the query at the provided document. Either by providing\n;;;                   a seq with a single DocumentSnapshot or multiple field values\n;;;                   in the same order as :order-by.\n;;; - :doc-changes    If set to true, a vector of parsed DocumentChanges will be\n;;;                   provided under :doc-changes. See firestore/DocumentChange->clj.\n;;; - :snapshot-options\n;;; - :snapshot-listen-options Map to be passed when retrieving doc changes.\n;;;                            See firestore/SnapshotListenOptions->clj.\n;;; - :expose-objects See firestore/QuerySnapshot->clj.\n;;; - :on-success, :on-failure\n;;;\n;;; Example FX:\n;;; {:firestore/get {:path-document [:my-collection :my-document]\n;;;                  :expose-objects false\n;;;                  :on-success #(prn \"Objects's contents:\" (:data %))}}\n;;; {:firestore/get {:path-collection [:cities]\n;;;                  :where [[:state :>= \"CA\"]\n;;;                          [:population :< 1000000]]\n;;;                  :limit 1000\n;;;                  :order-by [[:state :desc]\n;;;                             [:population :desc]]\n;;;                  :start-at [\"CA\" 1000]\n;;;                  :doc-changes false\n;;;                  :on-success #(prn \"Number of documents:\" (:size %))}}\n;;;\n(re-frame/reg-fx :firestore/get firestore/get-effect)\n\n\n;;; Set up a listener for changes in a Firestore collection/document query.\n;;; See https://firebase.google.com/docs/reference/js/firebase.firestore.DocumentReference#onSnapshot\n;;; See https://firebase.google.com/docs/reference/js/firebase.firestore.Query#onSnapshot\n;;;\n;;; You can provide the same key-arguments as to :firestore/get, except for :get-options,\n;;; :on-success and :on-failure. Instead, you can/should provide the following:\n;;; - :snapshot-listen-options Map containing additional options.\n;;;                            See firestore/clj->SnapshotListenOptions.\n;;; - :on-next  Event/function to be called every time a change happens.\n;;;             The clojure object will be passed as an argument to the event or fn.\n;;; - :on-error\n;;;\n(re-frame/reg-fx :firestore/on-snapshot firestore/on-snapshot-effect)\n\n\n;;; Subscribe to a Firestore collection/document query.\n;;;\n;;; Takes the same arguments as :firestore/on-snapshot effect, except for :on-next,\n;;; as it is meant to be used as a subscription.\n;;;\n;;; Example Subscription:\n;;; (re-frame/subscribe\n;;;   [:firestore/on-snapshot {:path-document [:my :document]}])\n;;;\n(re-frame/reg-sub-raw :firestore/on-snapshot firestore/on-snapshot-sub)\n\n\n;;; Start library and register callbacks.\n;;;\n;;;\n;;; In Iron style, most of the parameters can be either a function or a\n;;; re-frame event/sub vector. If there is a parameter, it will passed to the\n;;; function or conj'd onto the vector.\n;;;\n;;; - :firebase-app-info - Firebase application credentials. This is the one\n;;;   parameter that takes a map:\n;;;    {:apiKey \"MY-KEY-MY-KEY-MY-KEY-MY-KEY\"\n;;;     :authDomain \"my-app.firebaseapp.com\"\n;;;     :databaseURL \"https://my-app.firebaseio.com\"\n;;;     :projectId: \"my-app\"\n;;;     :storageBucket \"my-app.appspot.com\"\n;;;     :messagingSenderId: \"000000000000\"}\n;;;\n;;; - :set-user-event - Function or re-frame event that will be called back\n;;;     to receive and store the user object from us, when login succeeds.\n;;;     This object is a map that includes several fields that we need, plus\n;;;     the following that may be useful to the calling app:\n;;;       :display-name - The user's full name\n;;;       :email - The user's email address\n;;;       :photo-url - The user's photo\n;;;       :uid - The user's unique id, used by Firebase.\n;;;\n;;; - :get-user-sub - Function or re-frame subscription vector that this\n;;;   library will use to access the user object stored by :set-user-event\n;;;\n;;; - :default-error-handler - Function or re-frame event that will be called\n;;;   to handle any otherwise unhandled errors.\n;;;\n(defn init [& {:keys [firebase-app-info\n                      get-user-sub\n                      set-user-event\n                      default-error-handler]}]\n  (core/set-firebase-state :get-user-sub          get-user-sub\n                           :set-user-event        set-user-event\n                           :default-error-handler default-error-handler)\n  (core/initialize-app firebase-app-info)\n  (auth/init-auth))\n"]}