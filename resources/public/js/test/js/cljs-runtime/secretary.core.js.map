{"version":3,"file":"secretary.core.js","sources":["secretary/core.cljs"],"mappings":";;;;AAQA,AAAA;AAAA;;;+BAAA,/BAAaK;;AAAb,+BAAA,/BACGC,sEAAeC,MAAKC;AADvB,AAAA,GAAA,EAAA,EAAA,UAAA,YAAA,EAAA,CAAA,4DAAA,pFACkBD,wBAAAA;AADlB,OACkBA,yDAAAA,MAAKC;;AADvB,IAAAR,kBAAA,EAAA,UAAA,OAAA,hBACkBO,qBAAAA;IADlBN,kBAAA,CAAAC,6BAAA,AAAAC,YAAAH;AAAA,AAAA,GAAA,EAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,6DAAAA,fACkBM,yCAAAA,nCAAKC,yCAAAA;;AADvB,IAAAP,sBAAA,CAAAC,6BAAA;AAAA,AAAA,GAAA,EAAA,CAAAD,uBAAA;AAAA,QAAAA,oDAAAA,iEAAAA,fACkBM,6CAAAA,vCAAKC,6CAAAA;;AADvB,MAAA,AAAAJ,2BAAA,8BACkBG;;;;;;AADlB,AAGA,AAAA;AAAA;;;6BAAA,7BAAaG;;AAAb,6BAAA,7BACGC,kEAAaJ;AADhB,AAAA,GAAA,EAAA,EAAA,UAAA,YAAA,EAAA,CAAA,wDAAA,hFACgBA,wBAAAA;AADhB,OACgBA,qDAAAA;;AADhB,IAAAP,kBAAA,EAAA,UAAA,OAAA,hBACgBO,qBAAAA;IADhBN,kBAAA,CAAAQ,2BAAA,AAAAN,YAAAH;AAAA,AAAA,GAAA,EAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TACgBM,mCAAAA;;AADhB,IAAAN,sBAAA,CAAAQ,2BAAA;AAAA,AAAA,GAAA,EAAA,CAAAR,uBAAA;AAAA,QAAAA,oDAAAA,2DAAAA,TACgBM,uCAAAA;;AADhB,MAAA,AAAAH,2BAAA,0BACgBG;;;;;;AADhB,AAGA,AAAA;AAAA;;;8BAAA,9BAAaU;;AAAb,AAAA,8BAAA,sCAAAL,pEACGE;AADH,AAAA,IAAAD,UAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,0DAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,0DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,4DAAA,5DACGD,uEACEP;AAFL,AAAA,GAAA,EAAA,EAAA,UAAA,YAAA,EAAA,CAAA,0DAAA,lFAEKA,wBAAAA;AAFL,OAEKA,uDAAAA;;AAFL,IAAAP,kBAAA,EAAA,UAAA,OAAA,hBAEKO,qBAAAA;IAFLN,kBAAA,CAAAe,4BAAA,AAAAb,YAAAH;AAAA,AAAA,GAAA,EAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TAEKM,mCAAAA;;AAFL,IAAAN,sBAAA,CAAAe,4BAAA;AAAA,AAAA,GAAA,EAAA,CAAAf,uBAAA;AAAA,QAAAA,oDAAAA,2DAAAA,TAEKM,uCAAAA;;AAFL,MAAA,AAAAH,2BAAA,4BAEKG;;;;;;AAFL,AAAA,4DAAA,5DACGO,uEAEEP,MAAKW;AAHV,AAAA,GAAA,EAAA,EAAA,UAAA,YAAA,EAAA,CAAA,0DAAA,lFAGKX,wBAAAA;AAHL,OAGKA,uDAAAA,MAAKW;;AAHV,IAAAlB,kBAAA,EAAA,UAAA,OAAA,hBAGKO,qBAAAA;IAHLN,kBAAA,CAAAe,4BAAA,AAAAb,YAAAH;AAAA,AAAA,GAAA,EAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,8DAAAA,hBAGKM,0CAAAA,pCAAKW,0CAAAA;;AAHV,IAAAjB,sBAAA,CAAAe,4BAAA;AAAA,AAAA,GAAA,EAAA,CAAAf,uBAAA;AAAA,QAAAA,oDAAAA,kEAAAA,hBAGKM,8CAAAA,xCAAKW,8CAAAA;;AAHV,MAAA,AAAAd,2BAAA,4BAGKG;;;;;;AAHL,AAAA,sDAAA,tDACGO;;AADH;AAAA,AAQA,AAAeK,oCACb,6CAAA,2CAAA,yDAAA,jJAACC;AAEH;;;4BAAA,5BAAMC,gEAEHC;AAFH,AAGE,IAAMA,WAAK,0CAAA,xCAAI,AAACC,4BAAYD,OAAMA,wFAAMA;AAAxC,AACE,sDAAA,AAAAE,/CAACC,+DAAQN,mCAASG;;AAEtB;;;kCAAA,lCAAMI,4EAEHJ,KAAKK;AAFR,AAGE,IAAML,WAAK,0CAAA,xCAAI,AAACC,4BAAYD,OAAMA,wFAAMA;AAAxC,AACE,OAACM,mDAAMT,kCAASU,mBAASP,SAAKK;;AAKlC,AAAKG,wBAAOC;AAEZ,GAAA,QAAAC,sCAAAC,2CAAAC;AAAA;AAAA,AAAA;;;6BAAA,iBAAAC,6BAAA,AAAAf,6CAAA,xHAGEwB;IAHFR,6BAAA,AAAAhB,6CAAA;IAAAiB,6BAAA,AAAAjB,6CAAA;IAAAkB,iCAAA,AAAAlB,6CAAA;IAAAmB,0BAAA,AAAAC,4CAAA,mCAAA,gEAAA,AAAAC;AAAA,AAAA,YAAAC,kBAAA,AAAAC,+CAAA,iBAAA,eAIE;kBAAAE;AAAA,AAAA,IAAAC,YAAAD;QAAA,AAAAE,4CAAAD,UAAA,IAAA,9DAAME;QAAN,AAAAD,4CAAAD,UAAA,IAAA,9DAAQG;AAAR,AACE,GACC,EAAI,AAAC1B,4BAAY0B,QAAG,AAACC,qBAAKD;AAD3B;;AAAA,GAGC,iBAAAE,mBAAI,AAACC,qBAAKH;AAAV,AAAA,GAAAE;AAAAA;;AAAa,GAAA,EAAA,MAAA,LAAoBF;AAApB,GAAA,EAAA,CAAA,wCAAA,iBAAA,CAAAI,gCAAA,1FAAoBJ,0FAAAA;AAApB;;AAAA,GAAA,EAAA,AAAoBA;AAApB,OAAAK,kCAAYC,kBAAQN;;AAApB;;;;AAAA,OAAAK,kCAAYC,kBAAQN;;;;AAHlC;;AAAA;;;;CALJ,4DAAAV,wBAAAJ,2BAAAC,2BAAAC,2BAAAC;;;AAWA,AAAA,2BAAA,mCAAA1B,9DAAO6C;AAAP,AAAA,IAAAD,UAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,uDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,uDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA1C,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,yDAAA,zDAAO0C,oEACHT;AADJ,AACO,uEAAA,nBAAK,AAACU,eAAKV;;;AADlB,AAAA,yDAAA,zDAAOS,oEAEHT,EAAEW;AAFN,AAGK,uEAAA,uDAAA,1EAAK,AAACD,eAAKV,oDAAOW;;;AAHvB,AAAA,mDAAA,nDAAOF;;AAAP,AAKA,AAAAG,sBAAAhB,2BAAA,4FAAA,WAAAiB;AAAA,AAAA,IAAAC,YAAAD;QAAA,AAAAd,4CAAAe,UAAA,IAAA,9DAAsCd;QAAtC,AAAAD,4CAAAe,UAAA,IAAA,9DAAwCb;AAAxC,AACE,IAAMc,UAAQ,AAACC,oDACA;kBAAKC,EAAEC;AAAP,AACE,IAAMC,OAAK,4BAAA,yJAAA,nLAAI,AAACC,sBAAMF,uFACR,AAACG,uDAAUrB,EAAEiB,GAAGC,6FAChB,AAACI,uDAAUtB,GAAGkB;AAF5B,AAGE,QAACtB,2DAAAA,iEAAAA,RAAYuB,6CAAAA;;CACjBlB;AANf,AAOE,yDAAA,lDAACsB,sDAAeR;;AAEpB,AAAAH,sBAAAhB,2BAAA,6EAAA,WAAA4B;AAAA,AAAA,IAAAC,YAAAD;QAAA,AAAAzB,4CAAA0B,UAAA,IAAA,9DAA+BzB;QAA/B,AAAAD,4CAAA0B,UAAA,IAAA,9DAAiCxB;AAAjC,AACE,IAAMc,UAAQ,AAACW,4CACA;kBAAAC;AAAA,AAAA,IAAAC,YAAAD;SAAA,AAAA5B,4CAAA6B,UAAA,IAAA,/DAAMC;SAAN,AAAA9B,4CAAA6B,UAAA,IAAA,/DAASE;AAAT,AACE,IAAAC,UAAA,mFAAc,AAACV,uDAAUrB,EAAE,AAACU,eAAKmB,KAAKC;AAAtC,AAAA,4HAAAC,gDAAAA,pKAACnC,2DAAAA,oEAAAA;;CACHK;AAHf,AAIE,yDAAA,lDAACsB,sDAAeR;;AAEpB,AAAAH,sBAAAhB,2BAAA,4DAAA,WAAAoC;AAAA,AAAA,IAAAC,YAAAD;QAAA,AAAAjC,4CAAAkC,UAAA,IAAA,9DAAkCjC;QAAlC,AAAAD,4CAAAkC,UAAA,IAAA,9DAAoChC;AAApC,AACE,mHAAA,/DAAK,AAACS,eAAKV,iGAAM,iBAAAkC,UAAQ,6CAAKjC;AAAb,AAAA,kHAAAiC,2CAAAA,rJAACpD,sDAAAA,+DAAAA;;;AAEpB;;;qCAAA,rCAAMqD,kFAEHC;AAFH,AAGE,yDAAA,lDAACb,sDAAe,AAACG,4CAAI9B,2BAAYwC;;AAEnC;;;4BAAA,5BAAMC,gEAEHC;AAFH,+HAGO,uDAAA,vDAACC,mDAAaD,rHACd,AAACZ,4CAAI5C,zGACL,yDAAA,lDAACyC;;AAKR,AAAKiB,wBAAOC;AAEZ;;;;;4BAAA,5BAAOC,gEAIJpE;AAJH,AAKE,eAAA,XAAMqE;IACAC,QAAM,AAACC,iBAAOF,SAASrE;AAD7B,AAEE,OAACoD,4CACA;kBAAAoB;AAAA,AAAA,IAAAC,YAAAD;QAAA,AAAA/C,4CAAAgD,UAAA,IAAA,9DAAMC;WAAN,AAAAjD,4CAAAgD,UAAA,IAAA,jEAAQE;AAAR,AACE,GACC,AAACC,uBAAOD;AADT;;AAAA,oBAEC,qBAAA,rBAACE,2BAAkBF;AAAM,OAACG,SAAYH;;AAFvC,AAGOA;;;;;CACTL;;AAEL;;;;;;;;;2BAAA,3BAAOS,8DAQJrD;AARH,AASE,SAAA,LAAMuD;IAAND,YACmB,AAACH,qBAAWI,GAAGvD;QADlC,AAAAD,4CAAAuD,UAAA,IAAA,9DACON;UADP,AAAAjD,4CAAAuD,UAAA,IAAA,hEACSE;WADT,AAAAzD,4CAAAuD,UAAA,IAAA,jEACahF;IACPmF,cAAY,wBAAA,gCAAA,tCAAMnF,MAAK,AAACoE,0BAAWpE;AAFzC,AAGE,OAACoF,eAAKF,IAAIC;;AAEd;;;;;;;;;;;;uCAAA,vCAAOE,sFAWJC,EAAEtF,KAAK2B;AAXV,AAYE,IAAM4D,QAAM,WAAKC;AAAL,AACE,OAAC9C,oDACA,WAAKC,EAAE+B;AAAP,AACE,OAACe,6CAAK,KAAA,JAAK9C,SAAG6C;GAChBA;;IACTE,KAAG,AAACH,MAAMvF;IACVsF,QAAE,AAACK,+CACA;kBAAKL,MAAEM;AAAP,AACE,GAAI,EAAS,OAAS,AAACC,eAAKD,qBACnB,EAAK,AAACE,wBAAQ,AAAC3F,+CAAOmF,MAAE,AAACS,kBAAQH;AACxC,qDAAA,9CAACrF,mBAAS+E,MAAE,AAACS,kBAAQH;;AACrBN;;;CACJA,EACAI;AAbT,AAcE,GAAI,0BAAA,zBAAO,AAACG,eAAK7F;AACf,OAACgG,kDAAUV,MAAE,AAACS,kBAAQ/F,MAAMiG,eAAKtE;;AACjC,OAACpB,mBAAS+E,MAAEtF,KAAK2B;;;AAEvB;;;qCAAA,rCAAMuE,kFAEHC;AAFH,AAGE,IAAM7B,QAAM,gEAAA,hEAACL,mDAAakC;IACpBvG,SAAO,AAAC+F,+CACA;kBAAKL,EAAEX;AAAP,AAGE,IAAAyB,YAAY,wDAAA,IAAA,5DAACC,mDAAa1B;QAA1B,AAAAlD,4CAAA2E,UAAA,IAAA,9DAAO1E;QAAP,AAAAD,4CAAA2E,UAAA,IAAA,9DAASzE;AAAT,AACE,OAAC0D,qCAAsBC,EAAE,AAACP,yBAAUrD,GAAG,CAACwC,sDAAAA,yDAAAA,LAAOvC,qCAAAA;;CALpD,mCAOC2C;IACR1E,aAAO,AAAC0G,6BAAgB1G;AAT9B,AAUEA;;AASJ;;;;;;kCAAA,lCAAO2G,4EAKJtB,GAAGuB;AALN,AAME,IAAMC,KAAG,AAAC5B,qBAAwBI,GAAGuB;AAArC,AACE,oBAAMC;AAAN,AACE,GAAI,AAACxG,4BAAYwG;AAAIA;;AAArB,0FAAyBA,GAAGA;;;AAD9B;;;AAGJ,AAAeC,iCACb,cAAA,dAACC;AAEH,2BAAA,3BAAOC,8DAAWJ;AAAlB,AACC,OAACb,+CACA,WAAKa,MAAEK;AAAP,AACE,oBAAI,CAACH,+DAAAA,kEAAAA,LAAgBG,8CAAAA;AACnB,uGAAA,nDAAKL,qGAAKK;;AACV,oDAAKL,mDAAEK;;GAJZ,GAMCL;;AAEF;;;;;;;2BAAA,3BAAOM,8DAMJN,EAAEO;AANL,AAOE,OAACC,eACA,WAAAC;AAAA,AAAA,IAAAC,YAAAD;SAAA,AAAAxF,4CAAAyF,UAAA,IAAA,/DAAMjC;aAAN,AAAAxD,4CAAAyF,UAAA,IAAA,nEAASC;AAAT,AACE,IAAAC,qBAAiB,AAACE,kBAAQrC,GAAGuB;AAA7B,AAAA,oBAAAY;AAAA,AAAA,IAAAC,YAAAD;QAAA,AAAA3F,4CAAA4F,UAAA,IAAA,9DAAY/B;QAAZ,AAAA7D,4CAAA4F,UAAA,IAAA,9DAAcR;AAAd,AAAA,0FACG,AAACU,6CAAKf,EAAE,AAACgB,gBAAMlC,IAAI,CAAC6B,uCAAAA,0CAAAA,LAAON,sBAAAA;;AAD9B;;GAEFE;;AAEH;;;;;2BAAA,3BAAOU,8DAIJjB,EAAEO;AAJL,AAKE,IAAOP,QAAEA;cAAT,VAAWkB;aAAX,TAAsB9H;;AAAtB,AACE,GAAI,AAAC+H,cAAInB;AACP,IAAAoB,YAAgB,AAACd,yBAAKN,MAAEO;YAAxB,AAAAtF,4CAAAmG,UAAA,IAAA,lEAAOpB;IAAPqB,YAAA,AAAApG,4CAAAmG,UAAA,IAAA;QAAA,AAAAnG,4CAAAoG,UAAA,IAAA,9DAAUC;QAAV,AAAArG,4CAAAoG,UAAA,IAAA,9DAAYE;AAAZ,AACE,cAAOvB;cAAE,6CAAKkB,qDAAQI;cAAG,AAACE,6CAAKpI,OAAOmI;;;;;;AAF1C,0FAGG,AAACE,qBAAW,6CAAA,sGAAA,rDAAQP,qEAAa,AAACQ,+CAAOC,qBAAKvI;;;;;AAErD;;;+BAAA,/BAAOwI,sEAEJC;AAFH,AAGE,cAAA,mFAAA,mFAAA,hLAAMtB,mMACU,WAAKpF;AAAL,AACE,QAAA,JAAMmG;IACAC,IAAE,uEAAA,rEAAI,AAACJ,cAAIhG,IACP,AAAC4G,gDAAQ5G;AAFnB,AAAA,0FAIGmG,EAAEC;WANvB,mFAAA,mBAQgB,WAAKpG;AAAL,AACE,QAAA,JAAMmG;IACAC,IAAE,AAACQ,gDAAQ5G;AADjB,AAAA,0FAEGmG,EAAEC;WAXvB,mFAAA,YAagB,WAAKpG;AAAL,AACE,IAAMmG,IAAE,AAAClB,yBAAUjF;AAAnB,AAAA,0FACGmG;;IAfrBQ,YAgBiB,AAACb,yBAAUY,WAAWtB;SAhBvC,AAAAtF,4CAAA6G,UAAA,IAAA,/DAgBMrD;aAhBN,AAAAxD,4CAAA6G,UAAA,IAAA,nEAgBS1I;AAhBT,AAiBC,AAAA,GAAA,QAAAc,sCAAAC,2CAAA6H;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAAC,uFAAA;kBAAAC,MAAAC;;AAAA,AAAA,IAAAD,YAAA;gDAlBAL,kBACKtB,gCAgBA9B,UAAGrF,5GACR,AAAA,YAAA6I,qEAAAH,yCAAAK;;;;AAAA,AAAA,AAAA,AAAAF,8EAAA;kBAAAC;;AAAA,AAAA,IAAAA,YAAA;AAAA,AAAAC;;;;AAAA,AAAA,AAAA,AAAAF,4EAAA1G;;AAAA,AAAA,AAAA,AAAA0G,+FAAA;kBAEgBxJ;;AAFhB,AAAA,gBAAA,ZAEgBA;AAFhB,AAEsBoJ;;;;AAFtB,AAAA,AAAA,AAAAI,8EAAA1G;;AAAA,AAAA,AAAA,AAAA0G,mGAAA;kBAKkB/D,EAAExF;;AALpB,AAAA,YAAA,RAKkBwF;AALlB,AAMI,IAAA0C,qBAAoB,AAACb,gCAAYtB,UAAG/F;AAApC,AAAA,oBAAAkI;AAAA,AAAA,IAAA6B,YAAA7B;IAAA8B,YAAA,AAAAvB,cAAAsB;IAAAE,cAAA,AAAAC,gBAAAF;IAAAA,gBAAA,AAAAG,eAAAH;YAAAC,RAAYzE;SAAZwE,LAAgBzC;AAAhB,6NACO,AAAC6C,mDAAW1J,cAAO,AAACwD,4CAAIc,sBAAOuC,zLAC/B,kDAAA,lDAAC8C,vKACD,oIAAA,7HAACC,0DAAWC;;AAHnB;;;;;AANJ,AAAA,AAAAhB,+CAAA;;AAAA,AAAA,0FAAA,oEAAA,gEAAA,mEAAA,qDAAA,8DAAA;;;;AAAA,AAAA,AAAAA,qDAAA;;AAAA,AAAA,AAAAA,wDAAA;;AAAA,AAAA,AAAAA,6DAAA;kBAAAG,mBAAAC,qBAAAC;AAAA,AAAA,OAAAC,iBAAAF,qBAAA;;;;AAAA;;;AAAAG,2CAAA;0EAlBAX,eACKtB,0BAgBA9B,OAAGrF,rBACR0I,gCAAAK;gDAlBAN,eACKtB,0BAgBA9B,OAAGrF,hGACR,AAAA,YAAA6I,+DAAAH,gCAAAK;;;;AAAAF;;gDAlBAJ,WACKtB,kBAgBA9B,GAAGrF,hFACR,YAAA6I,uDAAAH,oBAAA;;AAcH,AAAA,oCAAA,4CAAAhJ,hFAAiByK;AAAjB,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,yBAAA,AAAA;AAAA,AAAA,IAAAC,uBAAA;;AAAA,AAAA,GAAA,CAAAA,uBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,cAAA,CAAAA,uBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,uEAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,AAAA,AAAAE,yEAAA,WAAgCI,IAAMC;AAAtC,AACE,GAAM,EAAA,EAAA,QAAA,QAAA,EAAA,EAAA,WAAA,CAAArI,gCAAA,qCAAA,KAAA,EAAA,EAAA,yCAAA,AAAAC,mEAAA,QAAA,AAAAA,zCAAYrC,2EAAAA,nQAAawK,+DAAAA,8CAAAA,uGAAAA,2EAAAA;AAA/B,AACE,OAACE,8CAAM7K,4BAAa2K,IAAIC;;AAD1B;;;;AADF,AAAA,AAAAL,4DAAA;;AAAA;AAAA,AAAA,AAAAA,sDAAA,WAAAC;AAAA,AAAA,IAAAC,UAAA,AAAAb,gBAAAY;IAAAA,cAAA,AAAAX,eAAAW;AAAA,AAAA,IAAAE,qBAAA;AAAA,AAAA,OAAAA,wDAAAD,QAAAD;;;AAAA,AAOA,AAAeM,oCACb,6CAAA,7CAACxK;AAEH,iCAAA,jCAAMyK,0EAAYJ,IAAIhD;AAAtB,AACE,IAAMgD,UAAI,EAAI,OAASA,kBACX,AAAC/B,6BAAc+B,KACfA;AAFZ,AAGE,2GAAA,pGAACK,mDAAMF,kCAASrE,kGAAMkE,QAAIhD;;AAE9B,oCAAA,pCAAMsD,gFAAeN;AAArB,AACE,OAACO,mDAAMJ,kCACA,WAAKK;AAAL,AACE,OAACC,kBACA,WAAAC;AAAA,AAAA,IAAAC,YAAAD;QAAA,AAAApJ,4CAAAqJ,UAAA,IAAA,9DAAMlI;QAAN,AAAAnB,4CAAAqJ,UAAA,IAAA,9DAAQpG;AAAR,AACE,OAACqG,gDAAKnI,EAAEuH;GACVQ;;;AAEZ,oCAAA,pCAAMK;AAAN,AACE,+DAAA,xDAACC,sBAAOX;;AAKV,8BAAA,9BAAMY,oEAAchM;AAApB,AACE,OAAC8H,eACA,WAAAmE;AAAA,AAAA,IAAAC,YAAAD;qBAAA,AAAA1J,4CAAA2J,UAAA,IAAA,3EAAMC;aAAN,AAAA5J,4CAAA2J,UAAA,IAAA,nEAAqBjE;AAArB,AACE,IAAAC,qBAAkB,AAACpI,6BAAcqM,eAAenM;AAAhD,AAAA,oBAAAkI;AAAA,AAAA,aAAAA,TAAWxH;AAAX,AAAA,kDAAA,gEAAA,+DAAA,tEACWuH,+DAAevH,6DAAcyL;;AADxC;;GAFH,AAAAnL,gBAIEoK;;AAEJ;;;oCAAA,pCAAMgB,gFAEHtH;AAFH,AAGE,kCAAA,AAAA,oFAAA,4BAAIA,5BAAIkH,/GAAoB7L;;AAE9B,wBAAA,xBAAOkM;AAAP,AAEE,oDAAK,0BAAA,mFAAA,7GAACxL;;AAER,oCAAA,pCAAOyL,gFACJxH;AADH,AAEE,4IAAA,rIAACyH,uBAAezH,IAAI,AAACiE,qBAAW,CAAA,gDAAS,AAACsD;;AAE5C;;;wCAAA,xCAAOG,wFAEJ1H;AAFH,AAGE,GAAI,6CAAA,7CAAC2H,iDAAM,AAACvC,gBAAMpF;AAChBA;;AACA,QAAA,gDAASA;;;AAEb;;;gCAAA,hCAAM4H,wEAEH5H;AAFH,AAGE,IAAA6H,YAA8B,0FAAA,1FAAC5H,mDAAa,AAACuH,kCAAmBxH;eAAhE,AAAAvC,4CAAAoK,UAAA,IAAA,rEAAOK;mBAAP,AAAAzK,4CAAAoK,UAAA,IAAA,zEAAgB1F;IACV+F,eAAS,AAACR,sCAAuBQ;IACjCpI,eAAa,gCAAA,AAAA,2CAAA,6HAAA,tLAAMqC,6HACW,AAACD,mCAAoBC;IAHzD2F,YAI8B,AAACZ,4BAAagB;IAJ5CJ,gBAAA,EAAA,EAAA,EAAA,CAAAA,aAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,gDAAA,WAAA,CAAA/J,gCAAA,AAAA+J,8BAAA,KAAA,OAAA,QAAA,AAAAC,8CAAAC,mBAAAF,WAAAA;aAAA,AAAAG,4CAAAH,cAAA,nEAIc3E;aAJd,AAAA8E,4CAAAH,cAAA,nEAIqBlM;IACfuH,aAAO,iBAAAtF,mBAAIsF;AAAJ,AAAA,oBAAAtF;AAAAA;;AAAWsK;;;IAClBvM,aAAO,AAACwM,uGAAMxM,OAAOkE;AAN3B,AAOE,QAACqD,2CAAAA,uDAAAA,dAAOvH,mCAAAA;;AAEZ,gCAAA,hCAAMyM,wEAAgBzM,OAAO0M;AAA7B,AACE,OAAC3G,+CAAO,aAAA4G,FAAKjH;AAAL,AAAA,IAAAkH,YAAAD;UAAA,AAAA9K,4CAAA+K,UAAA,IAAA,hEAAQtH;iBAAR,AAAAzD,4CAAA+K,UAAA,IAAA,vEAAYC;AAAZ,AACE,IAAMC,QAAM,AAACT,4CAAIrM,OAAOsF;AAAxB,AACE,oBAAI,AAACL,qBAAW4H,WAAWC;AACzBpH;;AACA,2DAAA,pDAACqH,8CAAMrH,EAAEJ,uFAAKwH,MAAMD;;GAJlC,mCAKW,kDAAA,lDAAClD,sDAAY+C;;AAE1B,qCAAA,rCAAOM,kFAAehN,OAAO0M;AAA7B,AACE,OAAC1H,uBAAO,AAACyH,8BAAezM,OAAO0M;;AAKjC,AAAA,AAAA,AAAAO,gBAAA9N,6BAAA,SAAA;;AAAA,IAAA+N,eAAA9N;IAAA+N,eAAA;IAAAC,eAEE;kBAAgB/N,MAAKC;AAArB,AACE,OAACF,6BAAc,AAACoJ,6BAAcnJ,OAAMC;;;AAHxC,AAAA,AAAA2N,gBAAAC,aAAAC,aAAAC;;AAAA,AAAA,AAAA,AAAA,iDAAAjL,jDAKEkL;;AALF,AAAA,AAAA,AAKEA,sEACA,WAAgBhO,MAAKC;AAArB,AAAA,gBAAA,ZAAgBD;AAAhB,AACE,IAAAmI,qBAAoB,AAACb,gCAAYtH,UAAKC;AAAtC,AAAA,oBAAAkI;AAAA,AAAA,IAAA8F,YAAA9F;IAAA+F,YAAA,AAAAxF,cAAAuF;IAAAE,cAAA,AAAAhE,gBAAA+D;IAAAA,gBAAA,AAAA9D,eAAA8D;QAAAC,JAAY1I;SAAZyI,LAAgB1G;AAAhB,AACE,OAAC4G,cAAI5G;;AADP;;;;AAPJ,AAAA,AAAA,AAAA,qEAAA1E,rEAUEuL;;AAVF,AAAA,AAAA,AAUEA,0FACA,WAAAC,QAA6CrO;AAA7C,AAAA,IAAAsO,YAAAD;IAAAE,YAAA,AAAA9F,cAAA6F;IAAAE,cAAA,AAAAtE,gBAAAqE;IAAAA,gBAAA,AAAApE,eAAAoE;mBAAAC,fAAiBI;kBAAjBL,dAAgCnB;AAAhC,AAAA,IAAAqB,YAAA;IAAAC,YAAA,AAAAjG,cAAAgG;IAAAE,cAAA,AAAAzE,gBAAAwE;IAAAA,gBAAA,AAAAvE,eAAAuE;uBAAAC,nBAAiBC;sBAAjBF,lBAAgCtB;AAAhC,AACE,IAAM1M,SAAO,AAACZ,6BAAc,AAACoJ,6BAAc0F,kBAAc5O;AAAzD,AACE,oBAAM,AAAC0N,mCAAchN,OAAO0M;AAA5B,AACE1M;;AADF;;;AAGN,AAAA,AAAA,AAAAiN,gBAAAzN,2BAAA,SAAA;;AAAA,IAAA2O,eAAA1O;IAAA2O,eAAA;IAAAC,eAEE;kBAAchP;AAAd,AACE,OAACI,2BAAY,AAAC+I,6BAAcnJ;;;AAHhC,AAAA,AAAA4N,gBAAAkB,aAAAC,aAAAC;;AAAA,AAAA,AAAA,AAAA,+CAAAlM,/CAKEkL;;AALF,AAAA,AAAA,AAKEA,kEACA,WAAchO;AAAd,AAAA,gBAAA,ZAAcA;AAAd,AAAoBA;;;AANtB,AAAA,AAAA,AAAA,mEAAA8C,nEAQEuL;;AARF,AAAA,AAAA,AAQEA,sFACA,WAAAY;AAAA,AAAA,IAAAC,YAAAD;IAAAE,YAAA,AAAAzG,cAAAwG;IAAAE,cAAA,AAAAjF,gBAAAgF;IAAAA,gBAAA,AAAA/E,eAAA+E;mBAAAC,fAAeP;kBAAfM,dAA8B9B;AAA9B,AAAA,IAAAgC,YAAA;IAAAC,YAAA,AAAA5G,cAAA2G;IAAAE,cAAA,AAAApF,gBAAAmF;IAAAA,gBAAA,AAAAlF,eAAAkF;uBAAAC,nBAAeV;sBAAfS,lBAA8BjC;AAA9B,AACE,OAACe,cAAI,AAACjI,eAAK,AAAC/F,2BAAYyO,kBAAcxB;;AAE1C,AAAA,AAAA,AAAAO,gBAAAlN,4BAAA,SAAA;;AAAA,IAAA8O,eAAAjP;IAAAkP,eAAA;IAAAC,eAEE;;;4BACI1P;AADJ,AAEK,uEAAA,hEAAC2P,0DAAa3P;;4BACfA,MAAKW;AAHT,AAIK,IAAAiP,YAAmCjP;IAAnCiP,gBAAA,EAAA,EAAA,EAAA,CAAAA,aAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,gDAAA,WAAA,CAAA9M,gCAAA,AAAA8M,8BAAA,KAAA,OAAA,QAAA,AAAA9C,8CAAAC,mBAAA6C,WAAAA;QAAAA,JAAgCvJ;mBAAhC,AAAA2G,4CAAA4C,cAAA,zEAAc/K;IACRgL,IAAE,AAAChP,6CAAKwF;IACRtF,OAAK,AAAUf,cAAK,KAAAgO,OAAA,8BAAA,MACL;kBAAK8B;AAAL,AACE,IAAMC,SAAO,AAACzG,gDAAQ,EAAI,gDAAA,hDAACoD,6CAAEoD,SACLA,GACA,gDAAA,hDAACxH,6CAAKwH;IACxBpN,IAAE,4CAAA,AAAAzB,5CAAC+L,4DAAK6C,GAAEE;IACVC,cAAY,EAAI,AAAChP,4BAAY0B,IACf;AACE,AAACrB,mDAAMwO,EAAEI,gBAAMF,OAAO,AAAC3F,eAAK1H;;AAC5B,OAACoC,0BAAW,AAACqF,gBAAMzH;;CACrB,kBAAIA,GAAE,AAACoC,0BAAWpC,GAAGoN;AARzC,AASEE;;;IACnBjP,WAAK,6CAAK,0BAAA,mFAAA,7GAACD,4NAAsBC;AAdvC,AAeE,IAAAmP,qBAAsB,iBAAAC,oBAAKtL;AAAL,AAAA,oBAAAsL;AACK,OAACvL,mCAAoBC;;AAD1BsL;;;AAAtB,AAAA,oBAAAD;AAAA,mBAAAA,fAAShJ;AAAT,AAEE,8DAAA,VAAKnG,0DAASmG;;AACdnG;;;mBAnBLf,MAAKW;;;4BAALX;;4BAAAA,MAAKW;;;;;;;;;;AALX,AAAA,AAAAiN,gBAAA4B,aAAAC,aAAAC;;AAAA,AAAA,AAAA,AAAA,oEAAA5M,pEA0BEuL;;AA1BF,AAAA,AAAA,AA0BEA,wFACA,WACIrO;AADJ,AAAA,gBAAA,ZACIA;AADJ,AAEK,2EAAA,pEAAC2P,0DAAa3P;;;AA7BrB,AAAA,AAAA,AA0BEqO,wFACA,WAAA+B,QAGiCzP;AAHjC,AAAA,IAAA0P,YAAAD;IAAAE,YAAA,AAAA5H,cAAA2H;IAAAE,cAAA,AAAApG,gBAAAmG;IAAAA,gBAAA,AAAAlG,eAAAkG;mBAAAC,fAGK1B;kBAHLyB,dAGoBjD;AAHpB,AAAA,IAAAmD,YAAA;IAAAC,YAAA,AAAA/H,cAAA8H;IAAAE,cAAA,AAAAvG,gBAAAsG;IAAAA,gBAAA,AAAArG,eAAAqG;uBAAAC,nBAGK7B;sBAHL4B,lBAGoBpD;AAHpB,AAIK,IAAMsD,UAAQ,AAACvD,8BAAezM,OAAO0M;AAArC,AACE,GAAI,AAAC1H,uBAAOgL;AACV,OAAChB,0DAAad,iBAAalO;;AAC3B,MAAO,gDAAA,hDAACiQ,wFAAgDD","names":["x__4243__auto__","m__4244__auto__","secretary/core.route-matches","goog/typeOf","cljs.core/missing-protocol","secretary.core/IRouteMatches","secretary.core/route-matches","this","route","secretary/core.route-value","secretary.core/IRouteValue","secretary.core/route-value","var_args","G__6369","secretary.core/render-route","js/Error","secretary/core.render-route","secretary.core/IRenderRoute","params","secretary.core/*config*","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","secretary.core/get-config","path","cljs.core/sequential?","cljs.core/deref","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","secretary.core/set-config!","val","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc-in","secretary.core/encode","js/encodeURIComponent","js/secretary","js/secretary.core","js/secretary.core.encode-pair","method-table__4414__auto__","prefer-table__4415__auto__","method-cache__4416__auto__","cached-hierarchy__4417__auto__","hierarchy__4418__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core/get-global-hierarchy","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","secretary.core/encode-pair","p__6390","vec__6391","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","k","v","cljs.core/set?","or__3949__auto__","cljs.core/map?","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IRecord","G__6409","secretary.core/key-index","cljs.core/name","index","cljs.core/-add-method","p__6417","vec__6419","encoded","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","i","x","pair","cljs.core/coll?","secretary.core.key_index.cljs$core$IFn$_invoke$arity$2","secretary.core.key_index.cljs$core$IFn$_invoke$arity$1","clojure.string.join.cljs$core$IFn$_invoke$arity$2","p__6428","vec__6429","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__6432","vec__6433","ik","iv","G__6436","p__6440","vec__6441","G__6444","secretary.core/encode-query-params","query-params","secretary.core/encode-uri","uri","clojure.string.split.cljs$core$IFn$_invoke$arity$2","secretary.core/decode","js/decodeURIComponent","secretary.core/parse-path","index-re","parts","cljs.core/re-seq","p__6460","vec__6461","_","part","cljs.core/empty?","cljs.core/re-matches","js/parseInt","secretary.core/key-parse","vec__6474","re","key","parsed-path","cljs.core/cons","secretary.core/assoc-in-query-params","m","heads","xs","cljs.core.take.cljs$core$IFn$_invoke$arity$2","hs","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","h","cljs.core/last","cljs.core/vector?","cljs.core/butlast","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","secretary.core/decode-query-params","query-string","vec__6492","clojure.string.split.cljs$core$IFn$_invoke$arity$3","clojure.walk/keywordize-keys","secretary.core/re-matches*","s","ms","secretary.core/re-escape-chars","cljs.core/set","secretary.core/re-escape","c","secretary.core/lex*","clauses","cljs.core/some","p__6513","vec__6514","action","temp__5457__auto__","vec__6517","cljs.core/re-find","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.core/count","secretary.core/lex-route","pattern","cljs.core/seq","vec__6523","vec__6526","r","p","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/re-pattern","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","secretary.core/compile-route","orig-route","vec__6542","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","js/secretary.core.t_secretary$core6546","secretary.core/t_secretary$core6546","_6548","meta6547","this__4192__auto__","writer__4193__auto__","opt__4194__auto__","cljs.core/-write","secretary.core/->t_secretary$core6546","vec__6549","seq__6550","first__6551","cljs.core/first","cljs.core/next","cljs.core.interleave.cljs$core$IFn$_invoke$arity$2","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic","cljs.core/vector","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","secretary.core/render-route*","seq6569","G__6570","self__4518__auto__","obj","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","secretary.core/*routes*","secretary.core/add-route!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","secretary.core/remove-route!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","rs","cljs.core/filterv","p__6597","vec__6602","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","secretary.core/reset-routes!","cljs.core/reset!","secretary.core/locate-route","p__6623","vec__6624","compiled-route","secretary.core/locate-route-value","secretary.core/prefix","secretary.core/uri-without-prefix","clojure.string/replace","secretary.core/uri-with-leading-slash","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","secretary.core/dispatch!","vec__6632","map__6635","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","uri-path","cljs.core/identity","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","secretary.core/invalid-params","validations","p__6641","vec__6642","validation","value","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","secretary.core/params-valid?","goog.object/set","G__6667","G__6668","G__6669","js/RegExp","vec__6684","seq__6685","first__6686","cljs.core/vec","cljs.core/PersistentVector","p__6690","vec__6691","seq__6692","first__6693","vec__6698","seq__6699","first__6700","route-string","G__6729","G__6730","G__6731","p__6734","vec__6735","seq__6736","first__6737","vec__6743","seq__6744","first__6745","G__6764","G__6765","G__6766","secretary.core.render_route.cljs$core$IFn$_invoke$arity$2","map__6775","a","$1","lookup","replacement","cljs.core/assoc","temp__5455__auto__","and__3938__auto__","p__6781","vec__6782","seq__6783","first__6784","vec__6787","seq__6788","first__6789","invalid","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns secretary.core\n  (:require [clojure.string :as string]\n            [clojure.walk :refer [keywordize-keys]])\n  (:require-macros [secretary.core :refer [defroute]]))\n\n;;----------------------------------------------------------------------\n;; Protocols\n\n(defprotocol IRouteMatches\n  (route-matches [this route]))\n\n(defprotocol IRouteValue\n  (route-value [this]))\n\n(defprotocol IRenderRoute\n  (render-route\n    [this]\n    [this params]))\n\n;;----------------------------------------------------------------------\n;; Configuration\n\n(def ^:dynamic *config*\n  (atom {:prefix \"\"}))\n\n(defn get-config\n  \"Gets a value for *config* at path.\"\n  [path]\n  (let [path (if (sequential? path) path [path])]\n    (get-in @*config* path)))\n\n(defn set-config!\n  \"Associates a value val for *config* at path.\"\n  [path val]\n  (let [path (if (sequential? path) path [path])]\n    (swap! *config* assoc-in path val)))\n\n;;----------------------------------------------------------------------\n;; Parameter encoding\n\n(def encode js/encodeURIComponent)\n\n(defmulti\n  ^{:private true\n    :doc \"Given a key and a value return and encoded key-value pair.\"}\n  encode-pair\n  (fn [[k v]]\n    (cond\n     (or (sequential? v) (set? v))\n     ::sequential\n     (or (map? v) (satisfies? IRecord v))\n     ::map)))\n\n(defn- key-index\n  ([k] (str (name k) \"[]\"))\n  ([k index]\n     (str (name k) \"[\" index \"]\")))\n\n(defmethod encode-pair ::sequential [[k v]]\n  (let [encoded (map-indexed\n                 (fn [i x]\n                   (let [pair (if (coll? x)\n                                [(key-index k i) x]\n                                [(key-index k) x])]\n                     (encode-pair pair)))\n                 v)]\n    (string/join \\& encoded)))\n\n(defmethod encode-pair ::map [[k v]]\n  (let [encoded (map\n                 (fn [[ik iv]]\n                   (encode-pair [(key-index k (name ik)) iv]))\n                 v)]\n    (string/join \\& encoded)))\n\n(defmethod encode-pair :default [[k v]]\n  (str (name k) \\= (encode (str v))))\n\n(defn encode-query-params\n  \"Convert a map of query parameters into url encoded string.\"\n  [query-params]\n  (string/join \\& (map encode-pair query-params)))\n\n(defn encode-uri\n  \"Like js/encodeURIComponent excepts ignore slashes.\"\n  [uri]\n  (->> (string/split uri #\"/\")\n       (map encode)\n       (string/join \"/\")))\n\n;;----------------------------------------------------------------------\n;; Parameter decoding\n\n(def decode js/decodeURIComponent)\n\n(defn- parse-path\n  \"Parse a value from a serialized query-string key index. If the\n  index value is empty 0 is returned, if it's a digit it returns the\n  js/parseInt value, otherwise it returns the extracted index.\"\n  [path]\n  (let [index-re #\"\\[([^\\]]*)\\]*\" ;; Capture the index value.\n        parts (re-seq index-re path)]\n    (map\n     (fn [[_ part]]\n       (cond\n        (empty? part) 0\n        (re-matches #\"\\d+\" part) (js/parseInt part)\n        :else part))\n     parts)))\n\n(defn- key-parse\n  \"Return a key path for a serialized query-string entry.\n\n  Ex.\n\n    (key-parse \\\"foo[][a][][b]\\\")\n    ;; => (\\\"foo\\\" 0 \\\"a\\\" 0 \\\"b\\\")\n  \"\n  [k]\n  (let [re #\"([^\\[\\]]+)((?:\\[[^\\]]*\\])*)?\"\n        [_ key path] (re-matches re k)\n        parsed-path (when path (parse-path path))]\n    (cons key parsed-path)))\n\n(defn- assoc-in-query-params\n  \"Like assoc-in but numbers in path create vectors instead of maps.\n\n  Ex.\n\n    (assoc-in-query-params {} [\\\"foo\\\" 0] 1)\n    ;; => {\\\"foo\\\" [1]}\n\n    (assoc-in-query-params {} [\\\"foo\\\" 0 \\\"a\\\"] 1)\n    ;; => {\\\"foo\\\" [{\\\"a\\\" 1}]}\n  \"\n  [m path v]\n  (let [heads (fn [xs]\n                (map-indexed\n                 (fn [i _]\n                   (take (inc i) xs))\n                 xs))\n        hs (heads path)\n        m (reduce\n           (fn [m h]\n             (if (and (or (number? (last h)))\n                      (not (vector? (get-in m (butlast h)))))\n               (assoc-in m (butlast h) [])\n               m))\n           m\n           hs)]\n    (if (zero? (last path))\n      (update-in m (butlast path) conj v)\n      (assoc-in m path v))))\n\n(defn decode-query-params\n  \"Extract a map of query parameters from a query string.\"\n  [query-string]\n  (let [parts (string/split query-string #\"&\")\n        params (reduce\n                (fn [m part]\n                  ;; We only want two parts since the part on the right hand side\n                  ;; could potentially contain an =.\n                  (let [[k v] (string/split part #\"=\" 2)]\n                    (assoc-in-query-params m (key-parse k) (decode v))))\n                {}\n                parts)\n        params (keywordize-keys params)]\n    params))\n\n;;----------------------------------------------------------------------\n;; Route compilation\n\n;; The implementation for route compilation was inspired by Clout and\n;; modified to suit JavaScript and Secretary.\n;; SEE: https://github.com/weavejester/clout\n\n(defn- re-matches*\n  \"Like re-matches but result is a always vector. If re does not\n  capture matches then it will return a vector of [m m] as if it had a\n  single capture. Other wise it maintains consistent behavior with\n  re-matches. \"\n  [re s]\n  (let [ms (clojure.core/re-matches re s)]\n    (when ms\n      (if (sequential? ms) ms [ms ms]))))\n\n(def ^:private re-escape-chars\n  (set \"\\\\.*+|?()[]{}$^\"))\n\n(defn- re-escape [s]\n (reduce\n  (fn [s c]\n    (if (re-escape-chars c)\n      (str s \\\\ c)\n      (str s c)))\n  \"\"\n  s))\n\n(defn- lex*\n  \"Attempt to lex a single token from s with clauses. Each clause is a\n  pair of [regexp action] where action is a function. regexp is\n  expected to begin with ^ and contain a single capture. If the\n  attempt is successful a vector of [s-without-token (action capture)]\n  is returned. Otherwise the result is nil.\"\n  [s clauses]\n  (some\n   (fn [[re action]]\n     (when-let [[m c] (re-find re s)]\n       [(subs s (count m)) (action c)]))\n   clauses))\n\n(defn- lex-route\n  \"Return a pair of [regex params]. regex is a compiled regular\n  expression for matching routes. params is a list of route param\n  names (:*, :id, etc.). \"\n  [s clauses]\n  (loop [s s pattern \"\" params []]\n    (if (seq s)\n      (let [[s [r p]] (lex* s clauses)]\n        (recur s (str pattern r) (conj params p)))\n      [(re-pattern (str \\^ pattern \\$)) (remove nil? params)])))\n\n(defn- compile-route\n  \"Given a route return an instance of IRouteMatches.\"\n  [orig-route]\n  (let [clauses [[#\"^\\*([^\\s.:*/]*)\" ;; Splats, named splates\n                  (fn [v]\n                    (let [r \"(.*?)\"\n                          p (if (seq v)\n                              (keyword v)\n                              :*)]\n                      [r p]))]\n                 [#\"^\\:([^\\s.:*/]+)\" ;; Params\n                  (fn [v]\n                    (let [r \"([^,;?/]+)\"\n                          p (keyword v)]\n                      [r p]))]\n                 [#\"^([^:*]+)\" ;; Literals\n                  (fn [v]\n                    (let [r (re-escape v)]\n                      [r]))]]\n       [re params] (lex-route orig-route clauses)]\n   (reify\n     IRouteValue\n     (route-value [this] orig-route)\n\n     IRouteMatches\n     (route-matches [_ route]\n       (when-let [[_ & ms] (re-matches* re route)]\n         (->> (interleave params (map decode ms))\n              (partition 2)\n              (merge-with vector {})))))))\n\n;;----------------------------------------------------------------------\n;; Route rendering\n\n(defn ^:internal render-route* [obj & args]\n  (when (satisfies? IRenderRoute obj)\n    (apply render-route obj args)))\n\n;;----------------------------------------------------------------------\n;; Routes adding/removing\n\n(def ^:dynamic *routes*\n  (atom []))\n\n(defn add-route! [obj action]\n  (let [obj (if (string? obj)\n              (compile-route obj)\n              obj)]\n    (swap! *routes* conj [obj action])))\n\n(defn remove-route! [obj]\n  (swap! *routes*\n         (fn [rs]\n           (filterv\n            (fn [[x _]]\n              (not= x obj))\n            rs))))\n\n(defn reset-routes! []\n  (reset! *routes* []))\n\n;;----------------------------------------------------------------------\n;; Route lookup and dispatch\n\n(defn locate-route [route]\n  (some\n   (fn [[compiled-route action]]\n     (when-let [params (route-matches compiled-route route)]\n       {:action action :params params :route compiled-route}))\n   @*routes*))\n\n(defn locate-route-value\n  \"Returns original route value as set in defroute when passed a URI path.\"\n  [uri]\n  (-> uri locate-route :route route-value))\n\n(defn- prefix\n  []\n  (str (get-config [:prefix])))\n\n(defn- uri-without-prefix\n  [uri]\n  (string/replace uri (re-pattern (str \"^\" (prefix))) \"\"))\n\n(defn- uri-with-leading-slash\n  \"Ensures that the uri has a leading slash\"\n  [uri]\n  (if (= \"/\" (first uri))\n    uri\n    (str \"/\" uri)))\n\n(defn dispatch!\n  \"Dispatch an action for a given route if it matches the URI path.\"\n  [uri]\n  (let [[uri-path query-string] (string/split (uri-without-prefix uri) #\"\\?\")\n        uri-path (uri-with-leading-slash uri-path)\n        query-params (when query-string\n                       {:query-params (decode-query-params query-string)})\n        {:keys [action params]} (locate-route uri-path)\n        action (or action identity)\n        params (merge params query-params)]\n    (action params)))\n\n(defn invalid-params [params validations]\n  (reduce (fn [m [key validation]]\n            (let [value (get params key)]\n              (if (re-matches validation value)\n                m\n                (assoc m key [value validation]))))\n          {} (partition 2 validations)))\n\n(defn- params-valid? [params validations]\n  (empty? (invalid-params params validations)))\n\n;;----------------------------------------------------------------------\n;; Protocol implementations\n\n(extend-protocol IRouteMatches\n  string\n  (route-matches [this route]\n    (route-matches (compile-route this) route))\n\n  js/RegExp\n  (route-matches [this route]\n    (when-let [[_ & ms] (re-matches* this route)]\n      (vec ms)))\n\n  cljs.core/PersistentVector\n  (route-matches [[route-string & validations] route]\n    (let [params (route-matches (compile-route route-string) route)]\n      (when (params-valid? params validations)\n        params))))\n\n(extend-protocol IRouteValue\n  string\n  (route-value [this]\n    (route-value (compile-route this)))\n\n  js/RegExp\n  (route-value [this] this)\n\n  cljs.core/PersistentVector\n  (route-value [[route-string & validations]]\n    (vec (cons (route-value route-string) validations))))\n\n(extend-protocol IRenderRoute\n  string\n  (render-route\n    ([this]\n       (render-route this {}))\n    ([this params]\n       (let [{:keys [query-params] :as m} params\n             a (atom m)\n             path (.replace this (js/RegExp. \":[^\\\\s.:*/]+|\\\\*[^\\\\s.:*/]*\" \"g\")\n                            (fn [$1]\n                              (let [lookup (keyword (if (= $1 \"*\")\n                                                      $1\n                                                      (subs $1 1)))\n                                    v (get @a lookup)\n                                    replacement (if (sequential? v)\n                                                  (do\n                                                    (swap! a assoc lookup (next v))\n                                                    (encode-uri (first v)))\n                                                  (if v (encode-uri v) $1))]\n                                replacement)))\n             path (str (get-config [:prefix]) path)]\n         (if-let [query-string (and query-params\n                                    (encode-query-params query-params))]\n           (str path \"?\" query-string)\n           path))))\n\n  cljs.core/PersistentVector\n  (render-route\n    ([this]\n       (render-route this {}))\n    ([[route-string & validations] params]\n       (let [invalid (invalid-params params validations)]\n         (if (empty? invalid)\n           (render-route route-string params)\n           (throw (ex-info \"Could not build route: invalid params\" invalid)))))))\n"]}