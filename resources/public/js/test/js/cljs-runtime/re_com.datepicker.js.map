{"version":3,"file":"re_com.datepicker.js","sources":["re_com/datepicker.cljs"],"mappings":"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","names":["re-com.datepicker/month-format","cljs_time.format.formatter.cljs$core$IFn$_invoke$arity$1","re-com.datepicker/week-format","re-com.datepicker/date-format","re-com.datepicker/iso8601->date","iso8601","cljs.core/seq","cljs_time.format.parse.cljs$core$IFn$_invoke$arity$2","G__8722","cljs-time.format/formatters","re-com.datepicker/month-label","date","cljs-time.format/unparse","re-com.datepicker/dec-month","cljs_time.core.minus.cljs$core$IFn$_invoke$arity$2","cljs_time.core.months.cljs$core$IFn$_invoke$arity$1","re-com.datepicker/inc-month","cljs_time.core.plus.cljs$core$IFn$_invoke$arity$2","re-com.datepicker/inc-date","n","cljs_time.core.days.cljs$core$IFn$_invoke$arity$1","var_args","G__8737","re-com.datepicker/previous","js/Error","pred","re_com.datepicker.previous.cljs$core$IFn$_invoke$arity$2","re-com.util/now->utc","re_com.datepicker.previous.cljs$core$IFn$_invoke$arity$3","period","re-com.datepicker/=date","date1","date2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs-time.core/year","cljs-time.core/month","cljs-time.core/day","re-com.datepicker/<=date","or__3949__auto__","cljs-time.core/before?","re-com.datepicker/>=date","cljs-time.core/after?","re-com.datepicker/days-vector","re-com.datepicker/rotate","coll","c","cljs.core/count","cljs.core.take.cljs$core$IFn$_invoke$arity$2","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","cljs.core/mod","cljs.core/cycle","p1__8775#","re-com.datepicker/is-day-pred","d","cljs-time.core/day-of-week","re-com.datepicker/main-div-with","table-div","hide-border?","class","style","attr","re-com.box/h-box","re-com.box/border","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","p__8776","map__8777","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","re-com.datepicker/table-thead","display-month","show-weeks?","minimum","maximum","start-of-week","prev-date","cljs.core/deref","re-com.util/deref-or-value","prev-enabled?","next-date","next-enabled?","template-row","cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic","event","cljs.core/reset!","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","iter__4324__auto__","s__8781","cljs.core/LazySeq","temp__5457__auto__","cljs.core/chunked-seq?","c__4322__auto__","size__4323__auto__","b__8783","cljs.core/chunk-buffer","i__8782","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__8780","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","day","re-com.datepicker/selection-changed","selection","change-callback","p__8866","map__8868","re-com.datepicker/table-td","focus-month","selected","today","attributes","disabled?","on-change","enabled-min","enabled-max","enabled-day","and__3938__auto__","disabled-day?","cljs.core/not","fexpr__8871","classes","on-click","re-com.datepicker/week-td","re-com.datepicker/table-tr","table-row","row-dates","p1__8919#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.range.cljs$core$IFn$_invoke$arity$1","cljs.core.into.cljs$core$IFn$_invoke$arity$2","p1__8920#","re-com.datepicker/table-tbody","current-start","row-start-dates","p1__8933#","p1__8934#","re-com.datepicker/configure","selectable-fn","cljs.core/fn?","re-com.datepicker/datepicker-args-desc","re-com.validate/goog-date?","cljs.core/string?","re-com.validate/css-style?","re-com.validate/html-attr?","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","re-com.datepicker/datepicker","p__8997","map__8998","seq8992","self__4519__auto__","model","args","js/goog.DEBUG","re_com.validate.validate_args.cljs$core$IFn$_invoke$arity$variadic","re-com.validate/extract-arg-data","external-model","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","internal-model","cljs_time.core.first_day_of_the_month.cljs$core$IFn$_invoke$arity$1","cljs-time.core/now","p__9011","map__9012","cljs.core.get.cljs$core$IFn$_invoke$arity$3","latest-ext-model","props-with-defaults","configuration","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","re-com.datepicker/anchor-button","shown?","format","re-com.box/flex-child-style","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","js/goog.date.Date","re-com.datepicker/datepicker-dropdown-args-desc","re-com.datepicker/datepicker-dropdown","p__9067","map__9068","seq9060","cancel-popover","position","p__9071","map__9072","no-clip?","passthrough-args","collapse-on-select","new-model","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/vec","cljs.core/flatten","re-com.popover/popover-anchor-wrapper","re-com.popover/popover-content-wrapper","cljs.core/chunk-first"],"sourcesContent":["(ns re-com.datepicker\r\n  (:require-macros [re-com.core :refer [handler-fn]])\r\n  (:require\r\n    [reagent.core         :as    reagent]\r\n    [cljs-time.core       :refer [now minus plus months days year month day day-of-week first-day-of-the-month before? after?]]\r\n    [re-com.validate      :refer [goog-date? css-style? html-attr?] :refer-macros [validate-args-macro]]\r\n    [cljs-time.predicates :refer [sunday?]]\r\n    [cljs-time.format     :refer [parse unparse formatters formatter]]\r\n    [re-com.box           :refer [border h-box flex-child-style]]\r\n    [re-com.util          :refer [deref-or-value now->utc]]\r\n    [re-com.popover       :refer [popover-anchor-wrapper popover-content-wrapper]]))\r\n\r\n;; Loosely based on ideas: https://github.com/dangrossman/bootstrap-daterangepicker\r\n\r\n;; --- cljs-time facades ------------------------------------------------------\r\n\r\n(def ^:const month-format (formatter \"MMMM yyyy\"))\r\n\r\n(def ^:const week-format (formatter \"ww\"))\r\n\r\n(def ^:const date-format (formatter \"yyyy MMM dd\"))\r\n\r\n(defn iso8601->date [iso8601]\r\n  (when (seq iso8601)\r\n    (parse (formatters :basic-date) iso8601)))\r\n\r\n(defn- month-label [date] (unparse month-format date))\r\n\r\n(defn- dec-month [date] (minus date (months 1)))\r\n\r\n(defn- inc-month [date] (plus date (months 1)))\r\n\r\n(defn- inc-date [date n] (plus date (days n)))\r\n\r\n(defn previous\r\n  \"If date fails pred, subtract period until true, otherwise answer date\"\r\n  ;; date   - a goog.date.UtcDateTime now if ommited\r\n  ;; pred   - can be one of cljs-time.predicate e.g. sunday? but anything that can deal with goog.date.UtcDateTime\r\n  ;; period - a period which will be subtracted see cljs-time.core periods\r\n  ;; Note:  If period and pred do not represent same granularity, some steps may be skipped\r\n  ;         e.g Pass a Wed date, specify sunday? as pred and a period (days 2) will skip one Sunday.\r\n  ([pred]\r\n   (previous pred (now->utc)))\r\n  ([pred date]\r\n   (previous pred date (days 1)))\r\n  ([pred date period]\r\n   (if (pred date)\r\n    date\r\n   (recur pred (minus date period) period))))\r\n\r\n(defn- =date [date1 date2]\r\n  (and\r\n    (= (year date1)  (year date2))\r\n    (= (month date1) (month date2))\r\n    (= (day date1)   (day date2))))\r\n\r\n(defn- <=date [date1 date2]\r\n  (or (=date date1 date2) (before? date1 date2)))\r\n\r\n(defn- >=date [date1 date2]\r\n  (or (=date date1 date2) (after? date1 date2)))\r\n\r\n\r\n(def ^:private days-vector\r\n  [{:key :Mo :short-name \"M\" :name \"MON\"}\r\n   {:key :Tu :short-name \"T\" :name \"TUE\"}\r\n   {:key :We :short-name \"W\" :name \"WED\"}\r\n   {:key :Th :short-name \"T\" :name \"THU\"}\r\n   {:key :Fr :short-name \"F\" :name \"FRI\"}\r\n   {:key :Sa :short-name \"S\" :name \"SAT\"}\r\n   {:key :Su :short-name \"S\" :name \"SUN\"}])\r\n\r\n(defn- rotate\r\n  [n coll]\r\n  (let [c (count coll)]\r\n    (take c (drop (mod n c) (cycle coll)))))\r\n\r\n(defn- is-day-pred [d]\r\n  #(= (day-of-week %) (inc d)))\r\n\r\n;; ----------------------------------------------------------------------------\r\n\r\n\r\n(defn- main-div-with\r\n  [table-div hide-border? class style attr]\r\n  ;;extra h-box is currently necessary so that calendar & border do not strecth to width of any containing v-box\r\n  [h-box\r\n   :children [[border\r\n               :radius \"4px\"\r\n               :size   \"none\"\r\n               :border (when hide-border? \"none\")\r\n               :child  [:div\r\n                        (merge\r\n                          {:class (str \"rc-datepicker datepicker noselect \" class)\r\n                           ;; override inherrited body larger 14px font-size\r\n                           ;; override position from css because we are inline\r\n                           :style (merge {:font-size \"13px\"\r\n                                          :position  \"static\"}\r\n                                          style)}\r\n                          attr)\r\n                        table-div]]]])\r\n\r\n\r\n(defn- table-thead\r\n  \"Answer 2 x rows showing month with nav buttons and days NOTE: not internationalized\"\r\n  [display-month {show-weeks? :show-weeks? minimum :minimum maximum :maximum start-of-week :start-of-week}]\r\n  (let [prev-date     (dec-month @display-month)\r\n        minimum       (deref-or-value minimum)\r\n        maximum       (deref-or-value maximum)\r\n        prev-enabled? (if minimum (after? prev-date (dec-month minimum)) true)\r\n        next-date     (inc-month @display-month)\r\n        next-enabled? (if maximum (before? next-date maximum) true)\r\n        template-row  (if show-weeks? [:tr [:th]] [:tr])]\r\n    [:thead\r\n     (conj template-row\r\n           [:th {:class (str \"prev \" (if prev-enabled? \"available selectable\" \"disabled\"))\r\n                 :style {:padding \"0px\"}\r\n                 :on-click (handler-fn (when prev-enabled? (reset! display-month prev-date)))}\r\n            [:i.zmdi.zmdi-chevron-left\r\n             {:style {:font-size \"24px\"}}]]\r\n           [:th {:class \"month\" :col-span \"5\"} (month-label @display-month)]\r\n           [:th {:class (str \"next \" (if next-enabled? \"available selectable\" \"disabled\"))\r\n                 :style {:padding \"0px\"}\r\n                 :on-click (handler-fn (when next-enabled? (reset! display-month next-date)))}\r\n            [:i.zmdi.zmdi-chevron-right\r\n             {:style {:font-size \"24px\"}}]])\r\n     (conj template-row\r\n           (for [day (rotate start-of-week days-vector)]\r\n             ^{:key (:key day)} [:th {:class \"day-enabled\"} (str (:name day))]))]))\r\n\r\n\r\n(defn- selection-changed\r\n  [selection change-callback]\r\n  (change-callback selection))\r\n\r\n\r\n(defn- table-td\r\n  [date focus-month selected today {minimum :minimum maximum :maximum :as attributes} disabled? on-change]\r\n  ;;following can be simplified and terse\r\n  (let [minimum       (deref-or-value minimum)\r\n        maximum       (deref-or-value maximum)\r\n        enabled-min   (if minimum (>=date date minimum) true)\r\n        enabled-max   (if maximum (<=date date maximum) true)\r\n        enabled-day   (and enabled-min enabled-max)\r\n        disabled-day? (if enabled-day\r\n                        (not ((:selectable-fn attributes) date))\r\n                        true)\r\n        classes       (cond disabled?                    \"off\"\r\n                            disabled-day?                \"off\"\r\n                            (= focus-month (month date)) \"available\"\r\n                            :else                        \"available off\")\r\n        classes       (cond (and selected (=date selected date)) (str classes \" active start-date end-date\")\r\n                            (and today (=date date today))       (str classes \" today\")\r\n                            :else                                classes)\r\n        on-click      #(when-not (or disabled? disabled-day?) (selection-changed date on-change))]\r\n    [:td {:class    classes\r\n          :on-click (handler-fn (on-click))} (day date)]))\r\n\r\n\r\n(defn- week-td [date]\r\n  [:td {:class \"week\"} (unparse week-format date)])\r\n\r\n\r\n(defn- table-tr\r\n  \"Return 7 columns of date cells from date inclusive\"\r\n  [date focus-month selected attributes disabled? on-change]\r\n;  {:pre [(sunday? date)]}\r\n  (let [table-row (if (:show-weeks? attributes) [:tr (week-td date)] [:tr])\r\n        row-dates (map #(inc-date date %) (range 7))\r\n        today     (if (:show-today? attributes) (:today attributes) nil)]\r\n    (into table-row (map #(table-td % focus-month selected today attributes disabled? on-change) row-dates))))\r\n\r\n\r\n(defn- table-tbody\r\n  \"Return matrix of 6 rows x 7 cols table cells representing 41 days from start-date inclusive\"\r\n  [display-month selected attributes disabled? on-change]\r\n  (let [start-of-week   (:start-of-week attributes)\r\n        current-start   (previous (is-day-pred start-of-week) display-month)\r\n        focus-month     (month display-month)\r\n        row-start-dates (map #(inc-date current-start (* 7 %)) (range 6))]\r\n    (into [:tbody] (map #(table-tr % focus-month selected attributes disabled? on-change) row-start-dates))))\r\n\r\n\r\n(defn- configure\r\n  \"Augment passed attributes with extra info/defaults\"\r\n  [attributes]\r\n  (let [selectable-fn (if (-> attributes :selectable-fn fn?)\r\n                        (:selectable-fn attributes)\r\n                        (fn [date] true))]\r\n    (merge attributes {:selectable-fn selectable-fn :today (now->utc)})))\r\n\r\n(def datepicker-args-desc\r\n  [{:name :model         :required false                             :type \"goog.date.UtcDateTime | atom\"   :validate-fn goog-date? :description \"the selected date. If provided, should pass pred :selectable-fn\"}\r\n   {:name :on-change     :required true                              :type \"goog.date.UtcDateTime -> nil\"   :validate-fn fn?        :description \"called when a new selection is made\"}\r\n   {:name :disabled?     :required false :default false              :type \"boolean | atom\"                                         :description \"when true, the can't select dates but can navigate\"}\r\n   {:name :selectable-fn :required false :default \"(fn [date] true)\" :type \"pred\"                           :validate-fn fn?        :description \"Predicate is passed a date. If it answers false, day will be shown disabled and can't be selected.\"}\r\n   {:name :show-weeks?   :required false :default false              :type \"boolean\"                                                :description \"when true, week numbers are shown to the left\"}\r\n   {:name :show-today?   :required false :default false              :type \"boolean\"                                                :description \"when true, today's date is highlighted\"}\r\n   {:name :minimum       :required false                             :type \"goog.date.UtcDateTime | atom\"   :validate-fn goog-date? :description \"no selection or navigation before this date\"}\r\n   {:name :maximum       :required false                             :type \"goog.date.UtcDateTime | atom\"   :validate-fn goog-date? :description \"no selection or navigation after this date\"}\r\n   {:name :start-of-week :required false :default 6                  :type \"int\"                                                    :description \"first day of week (Monday = 0 ... Sunday = 6)\"}\r\n   {:name :hide-border?  :required false :default false              :type \"boolean\"                                                :description \"when true, the border is not displayed\"}\r\n   {:name :class         :required false                             :type \"string\"                         :validate-fn string?    :description \"CSS class names, space separated\"}\r\n   {:name :style         :required false                             :type \"CSS style map\"                  :validate-fn css-style? :description \"CSS styles to add or override\"}\r\n   {:name :attr          :required false                             :type \"HTML attr map\"                  :validate-fn html-attr? :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed\"]}])\r\n\r\n(defn datepicker\r\n  [& {:keys [model] :as args}]\r\n  {:pre [(validate-args-macro datepicker-args-desc args \"datepicker\")]}\r\n  (let [external-model (reagent/atom (deref-or-value model))  ;; Holds the last known external value of model, to detect external model changes\r\n        internal-model (reagent/atom @external-model) ;; Create a new atom from the model to be used internally \r\n        display-month  (reagent/atom (first-day-of-the-month (or @internal-model (now))))]\r\n    (fn datepicker-component\r\n      [& {:keys [model on-change disabled? start-of-week hide-border? class style attr]\r\n          :or   {start-of-week 6} ;; Default to Sunday\r\n          :as   args}]\r\n      {:pre [(validate-args-macro datepicker-args-desc args \"datepicker\")]}\r\n      (let [latest-ext-model    (deref-or-value model)\r\n            props-with-defaults (merge args {:start-of-week start-of-week})\r\n            configuration       (configure props-with-defaults)]\r\n        (when (not= @external-model latest-ext-model) ;; Has model changed externally?\r\n          (reset! external-model latest-ext-model)\r\n          (reset! internal-model latest-ext-model)\r\n          (reset! display-month  (first-day-of-the-month (or @internal-model (now)))))\r\n        [main-div-with\r\n         [:table {:class \"table-condensed\"}\r\n          [table-thead display-month configuration]\r\n          [table-tbody\r\n           @display-month\r\n           @internal-model\r\n           configuration\r\n           (if (nil? disabled?) false (deref-or-value disabled?))\r\n           on-change]]\r\n         hide-border?\r\n         class\r\n         style\r\n         attr]))))\r\n\r\n\r\n(defn- anchor-button\r\n  \"Provide clickable field with current date label and dropdown button e.g. [ 2014 Sep 17 | # ]\"\r\n  [shown? model format]\r\n  [:div {:class    \"input-group display-flex noselect\"\r\n         :style    (flex-child-style \"none\")\r\n         :on-click (handler-fn (swap! shown? not))}\r\n   [h-box\r\n    :align     :center\r\n    :class     \"noselect\"\r\n    :min-width \"10em\"\r\n    :children  [[:label {:class \"form-control dropdown-button\"}\r\n                 (if (instance? js/goog.date.Date (deref-or-value model))\r\n                   (unparse (if (seq format) (formatter format) date-format) (deref-or-value model))\r\n                   \"\")]\r\n                [:span.dropdown-button.activator.input-group-addon\r\n                 {:style {:padding \"3px 0px 0px 0px\"}}\r\n                 [:i.zmdi.zmdi-apps {:style {:font-size \"24px\"}}]]]]])\r\n\r\n(def datepicker-dropdown-args-desc\r\n  (conj datepicker-args-desc\r\n        {:name :format    :required false  :default \"yyyy MMM dd\"  :type \"string\"   :description \"[datepicker-dropdown only] a represenatation of a date format. See cljs_time.format\"}\r\n        {:name :no-clip?  :required false  :default true           :type \"boolean\"  :description \"[datepicker-dropdown only] when an anchor is in a scrolling region (e.g. scroller component), the popover can sometimes be clipped. When this parameter is true (which is the default), re-com will use a different CSS method to show the popover. This method is slightly inferior because the popover can't track the anchor if it is repositioned\"}))\r\n\r\n(defn datepicker-dropdown\r\n  [& {:as args}]\r\n  {:pre [(validate-args-macro datepicker-dropdown-args-desc args \"datepicker-dropdown\")]}\r\n  (let [shown?         (reagent/atom false)\r\n        cancel-popover #(reset! shown? false)\r\n        position       :below-left]\r\n    (fn\r\n      [& {:keys [model show-weeks? on-change format no-clip?]\r\n          :or {no-clip? true}\r\n          :as passthrough-args}]\r\n      (let [collapse-on-select (fn [new-model]\r\n                                 (reset! shown? false)\r\n                                 (when on-change (on-change new-model)))    ;; wrap callback to collapse popover\r\n            passthrough-args   (dissoc passthrough-args :format :no-clip?)  ;; :format and :no-clip? only valid at this API level\r\n            passthrough-args   (->> (assoc passthrough-args :on-change collapse-on-select)\r\n                                    (merge {:hide-border? true})            ;; apply defaults\r\n                                    vec\r\n                                    flatten)]\r\n        [popover-anchor-wrapper\r\n         :showing? shown?\r\n         :position position\r\n         :anchor   [anchor-button shown? model format]\r\n         :popover  [popover-content-wrapper\r\n                    :position-offset (if show-weeks? 43 44)\r\n                    :no-clip?       no-clip?\r\n                    :arrow-length    0\r\n                    :arrow-width     0\r\n                    :arrow-gap       3\r\n                    :padding         \"0px\"\r\n                    :on-cancel       cancel-popover\r\n                    :body            (into [datepicker] passthrough-args)]]))))\r\n"]}