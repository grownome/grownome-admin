{"version":3,"file":"re_frame.trace.js","sources":["re_frame/trace.cljc"],"mappings":"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","names":["re-frame.trace/id","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","re-frame.trace/*current-trace*","re-frame.trace/reset-tracing!","cljs.core/reset!","goog/define","re-frame.trace/is-trace-enabled?","re-frame.trace/trace-enabled?","re-frame.trace/trace-cbs","js/re-frame","js/re-frame.trace","js/re-frame.trace.traces","re-frame.trace/traces","js/re-frame.trace.next-delivery","re-frame.trace/next-delivery","re-frame.trace/register-trace-cb","key","f","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","re-frame.trace/remove-trace-cb","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","re-frame.trace/next-id","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/inc","p__6009","map__6010","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","re-frame.trace/start-trace","operation","op-type","tags","child-of","or__3949__auto__","re-frame.interop/now","re-frame.trace/debounce-time","re-frame.trace/debounce","interval","goog.functions/debounce","re-frame.trace/schedule-debounce","seq__6022","cljs.core/seq","cljs.core/deref","chunk__6023","count__6024","i__6025","vec__6026","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","temp__5457__auto__","cljs.core/chunked-seq?","c__4351__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__6032","cljs.core/first","cljs.core/next","k","cb","e6029","e6035","G__6030","G__6037","e","re-frame.trace/run-tracing-callbacks!","now"],"sourcesContent":["(ns re-frame.trace\n  \"Tracing for re-frame.\n  Alpha quality, subject to change/break at any time.\"\n  #?(:cljs (:require-macros [net.cgrand.macrovich :as macros]\n                            [re-frame.trace :refer [finish-trace with-trace merge-trace!]]))\n  (:require [re-frame.interop :as interop]\n            [re-frame.loggers :refer [console]]\n            #?(:clj [net.cgrand.macrovich :as macros])\n            #?(:cljs [goog.functions])))\n\n(def id (atom 0))\n(def ^:dynamic *current-trace* nil)\n\n(defn reset-tracing! []\n  (reset! id 0))\n\n#?(:cljs (goog-define trace-enabled? false)\n   :clj  (def ^boolean trace-enabled? false))\n\n(defn ^boolean is-trace-enabled?\n  \"See https://groups.google.com/d/msg/clojurescript/jk43kmYiMhA/IHglVr_TPdgJ for more details\"\n  []\n  trace-enabled?)\n\n(def trace-cbs (atom {}))\n(defonce traces (atom []))\n(defonce next-delivery (atom 0))\n\n(defn register-trace-cb\n  \"Registers a tracing callback function which will receive a collection of one or more traces.\n  Will replace an existing callback function if it shares the same key.\"\n  [key f]\n  (if trace-enabled?\n    (swap! trace-cbs assoc key f)\n    (console :warn \"Tracing is not enabled. Please set {\\\"re_frame.trace.trace_enabled_QMARK_\\\" true} in :closure-defines. See: https://github.com/Day8/re-frame-trace#installation.\")))\n\n(defn remove-trace-cb [key]\n  (swap! trace-cbs dissoc key)\n  nil)\n\n(defn next-id [] (swap! id inc))\n\n(defn start-trace [{:keys [operation op-type tags child-of]}]\n  {:id        (next-id)\n   :operation operation\n   :op-type   op-type\n   :tags      tags\n   :child-of  (or child-of (:id *current-trace*))\n   :start     (interop/now)})\n\n;; On debouncing\n;;\n;; We debounce delivering traces to registered cbs so that\n;; we can deliver them in batches. This aids us in efficiency\n;; but also importantly lets us avoid slowing down the host\n;; application by running any trace code in the critical path.\n;;\n;; We add a lightweight check on top of goog.functions/debounce\n;; to avoid constant setting and cancelling of timeouts. This\n;; means that we will deliver traces between 10-50 ms from the\n;; last trace being created, which still achieves our goals.\n\n(def debounce-time 50)\n\n(defn debounce [f interval]\n  #?(:cljs (goog.functions/debounce f interval)\n     :clj  (f)))\n\n(def schedule-debounce\n  (debounce\n    (fn tracing-cb-debounced []\n      (doseq [[k cb] @trace-cbs]\n        (try (cb @traces)\n             #?(:clj (catch Exception e\n                       (console :error \"Error thrown from trace cb\" k \"while storing\" @traces e)))\n             #?(:cljs (catch :default e\n                        (console :error \"Error thrown from trace cb\" k \"while storing\" @traces e)))))\n      (reset! traces []))\n    debounce-time))\n\n(defn run-tracing-callbacks! [now]\n  ;; Optimised debounce, we only re-debounce\n  ;; if we are close to delivery time\n  ;; to avoid constant setting and cancelling\n  ;; timeouts.\n\n  ;; If we are within 10 ms of next delivery\n  (when (< (- @next-delivery 10) now)\n    (schedule-debounce)\n    ;; The next-delivery time is not perfectly accurate\n    ;; as scheduling the debounce takes some time, but\n    ;; it's good enough for our purposes here.\n    (reset! next-delivery (+ now debounce-time))))\n\n(macros/deftime\n  (defmacro finish-trace [trace]\n     `(when (is-trace-enabled?)\n        (let [end#      (interop/now)\n              duration# (- end# (:start ~trace))]\n          (swap! traces conj (assoc ~trace\n                               :duration duration#\n                               :end (interop/now)))\n          (run-tracing-callbacks! end#))))\n\n (defmacro with-trace\n     \"Create a trace inside the scope of the with-trace macro\n\n          Common keys for trace-opts\n          :op-type - what kind of operation is this? e.g. :sub/create, :render.\n          :operation - identifier for the operation, for an subscription it would be the subscription keyword\n          tags - a map of arbitrary kv pairs\"\n     [{:keys [operation op-type tags child-of] :as trace-opts} & body]\n     `(if (is-trace-enabled?)\n        (binding [*current-trace* (start-trace ~trace-opts)]\n          (try ~@body\n               (finally (finish-trace *current-trace*))))\n        (do ~@body)))\n\n  (defmacro merge-trace! [m]\n     ;; Overwrite keys in tags, and all top level keys.\n     `(when (is-trace-enabled?)\n        (let [new-trace# (-> (update *current-trace* :tags merge (:tags ~m))\n                             (merge (dissoc ~m :tags)))]\n          (set! *current-trace* new-trace#))\n        nil)))\n"]}