{"version":3,"file":"com.degel.re_frame_firebase.firestore.js","sources":["com/degel/re_frame_firebase/firestore.cljs"],"mappings":"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","names":["com.degel.re-frame-firebase.firestore/server-timestamp","js/firebase.firestore.FieldValue","com.degel.re-frame-firebase.firestore/delete-field-value","com.degel.re-frame-firebase.firestore/document-id-field-path","firebase/firestore.FieldPath","js/Error","com.degel.re-frame-firebase.firestore/clj->CollectionReference","path","iron.utils/validate","js/firebase.firestore.CollectionReference","js/firebase.firestore","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core/clj->js","com.degel.re-frame-firebase.firestore/clj->DocumentReference","js/firebase.firestore.DocumentReference","com.degel.re-frame-firebase.firestore/clj->FieldPath","field-path","js/firebase.firestore.FieldPath","cljs.core/coll?","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","js/firebase.firestore.FieldPath.","com.degel.re-frame-firebase.firestore/clj->SetOptions","set-options","$","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","cljs.core.map.cljs$core$IFn$_invoke$arity$2","com.degel.re-frame-firebase.firestore/clj->GetOptions","get-options","com.degel.re-frame-firebase.firestore/clj->SnapshotListenOptions","snapshot-listen-options","com.degel.re-frame-firebase.firestore/clj->SnapshotOptions","snapshot-options","com.degel.re-frame-firebase.firestore/PathReference->clj","reference","ref","result","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/vec","com.degel.re-frame-firebase.firestore/SnapshotMetadata->clj","metadata","var_args","G__9958","com.degel.re-frame-firebase.firestore/DocumentSnapshot->clj","doc","com.degel.re_frame_firebase.firestore.DocumentSnapshot__GT_clj.cljs$core$IFn$_invoke$arity$4","expose-objects","sure-exists","or__3949__auto__","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","G__9969","com.degel.re-frame-firebase.firestore/DocumentChange->clj","change","com.degel.re_frame_firebase.firestore.DocumentChange__GT_clj.cljs$core$IFn$_invoke$arity$3","G__9974","com.degel.re-frame-firebase.firestore/QuerySnapshot->clj","query","com.degel.re_frame_firebase.firestore.QuerySnapshot__GT_clj.cljs$core$IFn$_invoke$arity$5","doc-changes","p1__9971#","p1__9972#","com.degel.re-frame-firebase.firestore/document-parser-wrapper","callback","cljs.spec.alpha/nilable-impl","p1__9982#","G__9985","fexpr__9984","iron.re-utils/event->fn","com.degel.re-frame-firebase.firestore/collection-parser-wrapper","p1__9987#","G__9994","fexpr__9993","com.degel.re-frame-firebase.firestore/reference-parser-wrapper","p1__9995#","G__9997","fexpr__9996","G__9999","com.degel.re-frame-firebase.firestore/setter","data","instance","G__10006","com.degel.re-frame-firebase.firestore/updater","G__10009","com.degel.re-frame-firebase.firestore/deleter","p__10011","map__10012","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","com.degel.re-frame-firebase.firestore/set-effect","on-success","on-failure","com.degel.re-frame-firebase.helpers/promise-wrapper","com.degel.re_frame_firebase.firestore.setter.cljs$core$IFn$_invoke$arity$3","p__10014","map__10015","com.degel.re-frame-firebase.firestore/update-effect","com.degel.re_frame_firebase.firestore.updater.cljs$core$IFn$_invoke$arity$2","p__10017","map__10018","com.degel.re-frame-firebase.firestore/delete-effect","com.degel.re_frame_firebase.firestore.deleter.cljs$core$IFn$_invoke$arity$1","p__10020","map__10021","com.degel.re-frame-firebase.firestore/write-batch-effect","operations","batch-instance","cljs.core/run!","p__10023","vec__10024","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","map__10027","event-type","G__10029","cljs.core/Keyword","com.degel.re_frame_firebase.firestore.deleter.cljs$core$IFn$_invoke$arity$2","com.degel.re_frame_firebase.firestore.setter.cljs$core$IFn$_invoke$arity$4","com.degel.re_frame_firebase.firestore.updater.cljs$core$IFn$_invoke$arity$3","js/alert","com.degel.re-frame-firebase.firestore/adder","p__10031","map__10032","com.degel.re-frame-firebase.firestore/add-effect","com.degel.re-frame-firebase.firestore/query","where","order-by","limit","start-at","start-after","end-at","end-before","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__10034","vec__10035","$$","op","value","order","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","com.degel.re-frame-firebase.firestore/getter-document","com.degel.re-frame-firebase.firestore/getter-collection","p__10038","map__10039","com.degel.re-frame-firebase.firestore/get-effect","path-document","path-collection","com.degel.re-frame-firebase.firestore/on-snapshotter","reference-or-query","on-next","on-error","com.degel.re-frame-firebase.core/default-error-handler","p__10041","map__10042","com.degel.re-frame-firebase.firestore/on-snapshot","com.degel.re-frame-firebase.firestore/on-snapshot-effect","p__10045","vec__10046","com.degel.re-frame-firebase.firestore/on-snapshot-sub","app-db","_","params","p1__10044#","uuid","cljs.core/random-uuid","iron.re_utils._GT_evt.cljs$core$IFn$_invoke$arity$1","unsubscribe","reagent.ratom.make_reaction.cljs$core$IFn$_invoke$arity$variadic","cljs.core/deref","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","p__10049","vec__10050","cljs.core/assoc-in","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/dissoc"],"sourcesContent":["(ns com.degel.re-frame-firebase.firestore\n  (:require\n   [clojure.spec.alpha :as s]\n   [clojure.string :as str]\n   [re-frame.core :as re-frame]\n   [reagent.ratom :as ratom :refer [make-reaction]]\n   [iron.re-utils :as re-utils :refer [<sub >evt event->fn sub->fn]]\n   [iron.utils :as utils]\n   [firebase.app :as firebase-app]\n   [firebase.firestore :as firebase-firestore]\n   [com.degel.re-frame-firebase.core :as core]\n   [com.degel.re-frame-firebase.specs :as specs]\n   [com.degel.re-frame-firebase.helpers :refer [promise-wrapper]]))\n\n\n;; Extra public functions\n(defn server-timestamp\n  \"Returns a field value to be used to store the server timestamp.\n  See https://firebase.google.com/docs/firestore/manage-data/add-data#update_fields_in_nested_objects\n  You should use this as a field value when setting/updating/adding a document.\n\n  Example usage:\n  {:firestore/add {:path [:some-colection]\n                   :data {:name \\\"document-with-timestamp\\\"\n                          :timestamp (server-timestamp)}}\"\n  []\n  (.serverTimestamp js/firebase.firestore.FieldValue))\n\n(defn delete-field-value\n  \"Returns a field value to be used to delete a field.\n  See https://firebase.google.com/docs/firestore/manage-data/delete-data#fields\n  When updating a document, you should use this as a field value if you want to\n  delete such field.\n\n  Example usage:\n  {:firestore/update {:path [:my \\\"document\\\"]\n                      :data {:field-to-delete (delete-field-value)}}}\"\n  []\n  (.delete js/firebase.firestore.FieldValue))\n\n(defn document-id-field-path\n  \"Returns a field path which can be used to refer to ID of a document.\n  See https://firebase.google.com/docs/reference/js/firebase.firestore.FieldPath#.documentId\n  It can be used in queries to sort or filter by the document ID.\n\n  Example usage:\n  {:firestore/get {:path-collection [:my-collection]\n                   :where [[(document-id-field-path) :>= \\\"start\\\"]]}}\"\n  []\n  (.documentId firebase.firestore.FieldPath))\n\n\n;; Type Conversion/Parsing\n(defn clj->CollectionReference\n  \"Converts a seq of keywords and/or strings into a CollectionReference.\n  The seq represents the path to the collection (e.g. [:path \\\"to\\\" :collection]).\n  See https://firebase.google.com/docs/reference/js/firebase.firestore.CollectionReference\"\n  [path]\n  {:pre [(utils/validate ::specs/path-collection path)]}\n  (if (instance? js/firebase.firestore.CollectionReference path)\n    path\n    (.collection (js/firebase.firestore)\n                 (str/join \"/\" (clj->js path)))))\n\n(defn clj->DocumentReference\n  \"Converts a seq of keywords and/or strings into a DocumentReference.\n  The seq represents the path to the document (e.g. [:path-to \\\"document\\\"]).\n  See https://firebase.google.com/docs/reference/js/firebase.firestore.DocumentReference\"\n  [path]\n  {:pre [(utils/validate ::specs/path-document path)]}\n  (if (instance? js/firebase.firestore.DocumentReference path)\n    path\n    (.doc (js/firebase.firestore)\n          (str/join \"/\" (clj->js path)))))\n\n(defn clj->FieldPath\n  \"Converts a string/keyword or a seq of string/keywords into a FieldPath.\n  Uses the FieldPath contructor.\n  Only tries conversion if the argument isn't a FieldPath already.\n  Possible arguments: \\\"string.dotted.path\\\", :keyword-path, [:path :in-a :seq], a FieldPath object.\n  See https://firebase.google.com/docs/reference/js/firebase.firestore.FieldPath\"\n  [field-path]\n  (cond\n    (nil? field-path) nil\n    (instance? js/firebase.firestore.FieldPath field-path) field-path\n    (coll? field-path) (apply js/firebase.firestore.FieldPath. (clj->js field-path))\n    :else (js/firebase.firestore.FieldPath. (clj->js field-path))))\n\n(defn clj->SetOptions\n  \"Converts a clojure-style map into a SetOptions satisfying one.\n  The provided map can contain a :merge key with either true or false, and a\n  :merge-fields key with a seq of field paths to be passed to clj->FieldPath.\n  See https://firebase.google.com/docs/reference/js/firebase.firestore.SetOptions\"\n  [set-options]\n  (as-> {} $\n    (if (:merge set-options) (assoc $ :merge (:merge set-options)) $)\n    (if (:marge-fields set-options)\n      (assoc $ :mergeFields (into-array (map clj->FieldPath (:merge-fields set-options))))\n      $)\n    (clj->js $)))\n\n(defn clj->GetOptions\n  \"Converts a clojure-style map into a GetOptions satisfying one.\n  The provided map can contain a :source key with one of the following values:\n  :default, :server or :cache. You can also provide a string like \\\"server\\\".\n  See https://firebase.google.com/docs/reference/js/firebase.firestore.GetOptions\"\n  [get-options]\n  (if get-options\n    (clj->js {:source (:source get-options :default)})\n    #js {}))\n\n(defn clj->SnapshotListenOptions\n  \"Converts a clojure-style map into a SnapshotListenOptions satisfying one.\n  The provided map can contain a :include-metadata-changes key with either true or false.\n  See https://firebase.google.com/docs/reference/js/firebase.firestore.SnapshotListenOptions\"\n  [snapshot-listen-options]\n  (if snapshot-listen-options\n    (clj->js {:includeMetadataChanges (:include-metadata-changes snapshot-listen-options false)})\n    #js {}))\n\n(defn clj->SnapshotOptions\n  \"Converts a clojure-style map into a SnapshotOptions satisfying one.\n  The provided map can containe a :server-timestamps key with one of the following values:\n  :estimate, :previous or :none. You can also provide a string like \\\"estimate\\\".\n  See https://firebase.google.com/docs/reference/js/firebase.firestore.SnapshotOptions\"\n  [snapshot-options]\n  (clj->js {:serverTimestamps (:server-timestamps snapshot-options :none)}))\n\n(defn PathReference->clj [reference]\n  ;; [TODO]: Can this be optimized through some internal property of a Reference?\n  \"Converts a CollectionReference/DocumentReference into a vector of strings representing its path.\"\n  (loop [ref reference\n         result '()]\n    (if ref\n      (recur (.-parent ref) (conj result (.-id ref)))\n      (vec result))))\n\n(defn SnapshotMetadata->clj [metadata]\n  \"Converts a SnapshotMetadata object into a clojure-style map.\"\n  {:from-cache (.-fromCache metadata)\n   :has-pending-writes (.-hasPendingWrites metadata)})\n\n(defn DocumentSnapshot->clj\n  \"Converts a DocumentSnapshot object into a clojure-style map.\n  :data      the document's contents (nil if it doesn't exist).\n  :id        a string representing document's id.\n  :metadata  metadata converted with SnapshotMetadata->clj.\n  :ref       the object's path converted with PathReference->clj.\n  :object    the original DocumentSnapshot if expose-objects argument\n             is set to true (nil otherwise).\n  See https://firebase.google.com/docs/reference/js/firebase.firestore.DocumentSnapshot\"\n  ([doc]\n   (DocumentSnapshot->clj doc nil nil nil))\n  ([doc snapshot-options]\n   (DocumentSnapshot->clj doc snapshot-options nil nil))\n  ([doc snapshot-options expose-objects]\n   (DocumentSnapshot->clj doc snapshot-options expose-objects nil))\n  ([doc snapshot-options expose-objects sure-exists]\n   {:data (when (or sure-exists (.-exists doc))\n            (js->clj (.data doc (clj->SnapshotOptions snapshot-options))))\n    :id (.-id doc)\n    :metadata (SnapshotMetadata->clj (.-metadata doc))\n    :ref (PathReference->clj (.-ref doc))\n    :object (when expose-objects doc)}))\n\n(defn DocumentChange->clj\n  \"Converts a DocumentChange object into a clojure-style map.\n  :doc       the DocumentSnapshot converted with DocumentSnapshot->clj.\n  :new-index a number.\n  :old-index a number.\n  :type      a string.\n  :object    the original DocumentChange if expose-objects argument\n             is set to true (nil otherwise).\n  See https://firebase.google.com/docs/reference/js/firebase.firestore.DocumentChange\"\n  ([change] (DocumentChange->clj change nil nil))\n  ([change snapshot-options] (DocumentChange->clj change snapshot-options nil))\n  ([change snapshot-options expose-objects]\n   {:doc (DocumentSnapshot->clj (.-doc change) snapshot-options expose-objects true)\n    :new-index (.-newIndex change)\n    :old-index (.-oldIndex change)\n    :type (.-type change)\n    :object (when expose-objects change)}))\n\n(defn QuerySnapshot->clj\n  \"Converts a QuerySnapshot object into a clojure-style map.\n  :docs        vector of documents converted with DocumentSnapshot->clj.\n  :metadata    metadata converted with SnapshotMetadata->clj.\n  :size        the number of documents.\n  :doc-changes vector of DocumentChanges converted with DocumentChange->clj if\n               doc-changes argument is set to true (nil otherwise).\n  :object      the original DocumentSnapshot if expose-objects argument\n               is set to true (nil otherwise).\n  See https://firebase.google.com/docs/reference/js/firebase.firestore.QuerySnapshot\"\n  ([query]\n   (QuerySnapshot->clj query nil nil nil nil))\n  ([query snapshot-options]\n   (QuerySnapshot->clj query snapshot-options nil nil nil))\n  ([query snapshot-options snapshot-listen-options]\n   (QuerySnapshot->clj query snapshot-options snapshot-listen-options nil nil))\n  ([query snapshot-options snapshot-listen-options doc-changes]\n   (QuerySnapshot->clj query snapshot-options snapshot-listen-options doc-changes nil))\n  ([query snapshot-options snapshot-listen-options doc-changes expose-objects]\n   {:docs (vec (map #(DocumentSnapshot->clj % snapshot-options expose-objects true)\n                    (.-docs query)))\n    :metadata (SnapshotMetadata->clj (.-metadata query))\n    :size (.-size query)\n    :doc-changes (when doc-changes\n                   (vec (map #(DocumentChange->clj % snapshot-options expose-objects)\n                             (.docChanges query (clj->SnapshotListenOptions snapshot-listen-options)))))\n    :object (when expose-objects query)}))\n\n\n(defn- document-parser-wrapper [callback snapshot-options expose-objects]\n  {:pre [(utils/validate (s/nilable :re-frame/vec-or-fn) callback)]}\n  (when callback\n    #((re-utils/event->fn callback)\n      (DocumentSnapshot->clj % snapshot-options expose-objects false))))\n\n(defn- collection-parser-wrapper [callback snapshot-options snapshot-listen-options doc-changes expose-objects]\n  {:pre [(utils/validate (s/nilable :re-frame/vec-or-fn) callback)]}\n  (when callback\n    #((re-utils/event->fn callback)\n      (QuerySnapshot->clj % snapshot-options snapshot-listen-options doc-changes expose-objects))))\n\n(defn- reference-parser-wrapper [callback]\n  {:pre [(utils/validate (s/nilable :re-frame/vec-or-fn) callback)]}\n  (when callback #((re-utils/event->fn callback) (PathReference->clj %))))\n\n\n;; re-frame Effects/Subscriptions\n(defn- setter\n  ([path data set-options]\n   (.set (clj->DocumentReference path)\n         (clj->js data)\n         (clj->SetOptions set-options)))\n  ([instance path data set-options]\n   (.set instance\n         (clj->DocumentReference path)\n         (clj->js data)\n         (clj->SetOptions set-options))))\n\n(defn- updater\n  ([path data] (.update (clj->DocumentReference path) (clj->js data)))\n  ([instance path data] (.update instance (clj->DocumentReference path) (clj->js data))))\n\n(defn- deleter\n  ([path] (.delete (clj->DocumentReference path)))\n  ([instance path] (.delete instance (clj->DocumentReference path))))\n\n(defn- set-effect [{:keys [path data set-options on-success on-failure]}]\n  (promise-wrapper (setter path data set-options) on-success on-failure))\n\n(defn- update-effect [{:keys [path data on-success on-failure]}]\n  (promise-wrapper (updater path data) on-success on-failure))\n\n(defn- delete-effect [{:keys [path on-success on-failure]}]\n  (promise-wrapper (deleter path) on-success on-failure))\n\n(defn- write-batch-effect [{:keys [operations on-success on-failure]}]\n  (let [batch-instance (.batch (js/firebase.firestore))]\n    (run! (fn [[event-type {:keys [path data set-options]}]]\n            (case event-type\n              :firestore/delete (deleter batch-instance path)\n              :firestore/set    (setter batch-instance path data set-options)\n              :firestore/update (updater batch-instance path data)\n              (js/alert \"Internal error: unknown write effect: \" event-type)))\n          operations)\n    (promise-wrapper (.commit batch-instance) on-success on-failure)))\n\n(defn- adder [path data]\n  (.add (clj->CollectionReference path) (clj->js data)))\n\n(defn- add-effect [{:keys [path data on-success on-failure]}]\n  (promise-wrapper (adder path data) (reference-parser-wrapper on-success) on-failure))\n\n(defn- query [ref where order-by limit\n              start-at start-after end-at end-before]\n  (as-> ref $\n    (if where\n      (reduce\n        (fn [$$ [field-path op value]] (.where $$ (clj->FieldPath field-path) (clj->js op) (clj->js value)))\n        $ where)\n      $)\n    (if order-by\n      (reduce\n        (fn [$$ order] (.orderBy $$ (clj->js (nth order 0)) (clj->js (nth order 1 :asc))))\n        $ order-by)\n      $)\n    (if limit (.limit $ limit) $)\n    (if start-at (.apply (.-startAt $) $ (clj->js start-at)) $)\n    (if start-after (.apply (.-startAfter $) $ (clj->js start-after)) $)\n    (if end-at (.apply (.-endAt $) $ (clj->js end-at)) $)\n    (if end-before (.apply (.-endBefore $) $ (clj->js end-before)) $)))\n\n(defn- getter-document [path get-options]\n  (.get (clj->DocumentReference path) (clj->GetOptions get-options)))\n\n(defn- getter-collection [path get-options where order-by limit\n                          start-at start-after end-at end-before]\n  (.get (query (clj->CollectionReference path) where order-by limit\n               start-at start-after end-at end-before)\n        (clj->GetOptions get-options)))\n\n(defn- get-effect [{:keys [path-document\n                           path-collection where order-by limit\n                           start-at start-after end-at end-before\n                           doc-changes snapshot-listen-options\n                           get-options snapshot-options expose-objects\n                           on-success on-failure]}]\n  (if path-document\n    (promise-wrapper (getter-document path-document get-options)\n                     (document-parser-wrapper on-success snapshot-options expose-objects)\n                     on-failure)\n    (promise-wrapper (getter-collection path-collection get-options where order-by limit\n                                        start-at start-after end-at end-before)\n                     (collection-parser-wrapper on-success snapshot-options snapshot-listen-options\n                                                doc-changes expose-objects)\n                     on-failure)))\n\n(defn- on-snapshotter [reference-or-query snapshot-listen-options on-next on-error]\n  (.onSnapshot reference-or-query\n    (clj->SnapshotListenOptions snapshot-listen-options)\n    on-next\n    (if on-error (event->fn on-error) (core/default-error-handler))))\n\n(defn- on-snapshot [{:keys [path-document\n                            path-collection where order-by limit\n                            start-at start-after end-at end-before doc-changes\n                            snapshot-listen-options snapshot-options\n                            expose-objects\n                            on-next on-error]}]\n    {:pre [(utils/validate :re-frame/vec-or-fn on-next)\n           (utils/validate (s/nilable :re-frame/vec-or-fn) on-error)]}\n    (if path-document\n      (on-snapshotter (clj->DocumentReference path-document)\n                      snapshot-listen-options\n                      (document-parser-wrapper on-next snapshot-options expose-objects)\n                      on-error)\n      (on-snapshotter (query (clj->CollectionReference path-collection) where order-by limit\n                             start-at start-after end-at end-before)\n                      snapshot-listen-options\n                      (collection-parser-wrapper on-next snapshot-options snapshot-listen-options\n                                                 doc-changes expose-objects)\n                      on-error)))\n\n(def ^:private on-snapshot-effect on-snapshot)\n\n(defn- on-snapshot-sub [app-db [_ params]]\n  ;; [TODO] Potential bug alert:\n  ;;        This works the same way as database/on-value-sub, except for UUIDs.\n  (let [uuid (str (random-uuid))\n        callback #(>evt [::on-snapshot-handler uuid %])\n        unsubscribe (on-snapshot (assoc params :on-next callback))]\n    (ratom/make-reaction\n      (fn [] (get-in @app-db [::cache uuid] []))\n      :on-dispose #(do (unsubscribe) (>evt [::on-snapshot-handler uuid nil])))))\n\n(re-frame/reg-event-db\n ::on-snapshot-handler\n (fn [app-db [_ uuid value]]\n   (if value\n     (assoc-in app-db [::cache uuid] value)\n     (update app-db ::cache dissoc uuid))))\n"]}