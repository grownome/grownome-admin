{"version":3,"file":"iron.utils.js","sources":["iron/utils.cljc"],"mappings":"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","names":["iron.utils/negligible?","x","cljs.core/seqable?","cljs.core/empty?","cljs.core/boolean?","cljs.core/not","iron.utils/ci-compare","s1","s2","cljs.core/compare","clojure.string/upper-case","iron.utils/ci-sort","coll","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","iron.utils/ci-sort-by","keyfn","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","iron.utils/ci-includes?","s","substr","clojure.string/includes?","iron.utils/validate","spec","or__3949__auto__","cljs.spec.alpha.valid_QMARK_.cljs$core$IFn$_invoke$arity$2","cljs.spec.alpha/explain","var_args","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","iron.utils/vconcat","seq9375","self__4519__auto__","cljs.core/seq","vecs","cljs.core/vec","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/concat","cljs.spec.alpha/def-impl","cljs.spec.alpha/cat-impl","cljs.core/keyword?","cljs.spec.alpha/rep-impl","cljs.core/any?","iron.utils/unpredicate","clojure.string/ends-with?","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core/count","iron.utils/camelize-str","vec__9379","seq__9380","first__9381","cljs.core/first","cljs.core/next","first-word","more","clojure.string.split.cljs$core$IFn$_invoke$arity$2","clojure.string.join.cljs$core$IFn$_invoke$arity$1","cljs.core.map.cljs$core$IFn$_invoke$arity$2","clojure.string/capitalize","iron.utils/camelize-key","k","cljs.core.keyword.cljs$core$IFn$_invoke$arity$2","cljs.core/namespace","cljs.core/name","iron.utils/camelize-map-keys","p__9387","map__9388","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","seq9383","G__9384","self__4518__auto__","m","exclude","cljs.core/reduce-kv","v","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/some","iron.utils/err","seq9400","strings","js/console.error"],"sourcesContent":[";;; Author: David Goldfarb (deg@degel.com)\n;;; Copyright (c) 2017, David Goldfarb\n\n(ns iron.utils\n  (:require\n   [clojure.spec.alpha :as s]\n   [clojure.string :as str]))\n\n\n(defn negligible?\n  \"Variant of empty? that behaves reasonably for non-seqs too.\n  Note that nil is negligible but false is not negligible.\"\n  [x]\n  (cond (seqable? x) (empty? x)\n        (boolean? x) false\n        :else (not x)))\n\n\n(defn ci-compare\n  \"Case-insensitive string compare\"\n  [s1 s2]\n  (compare (str/upper-case s1) (str/upper-case s2)))\n\n(defn ci-sort\n  \"Case-insensitive string sort\"\n  [coll]\n  (sort-by str/upper-case coll))\n\n(defn ci-sort-by\n    \"Case-insensitive string sort-by\"\n  [keyfn coll]\n  (sort-by (comp str/upper-case keyfn)\n           coll))\n\n(defn ci-includes?\n  \"Case-insensitive string inclusion test\"\n  [s substr]\n  (str/includes? (str/upper-case s) (str/upper-case substr)))\n\n\n(defn validate\n  \"Like s/valid?, but show the error like s/assert. Useful for pre-conditions.\"\n  [spec x]\n  (or (s/valid? spec x)\n      (s/explain spec x)))\n\n(defn vconcat\n  \"Like concat, but return a vector.\"\n  [& vecs]\n  (vec (apply concat vecs)))\n\n(s/def ::event-vector (s/cat :event keyword? :params (s/* any?)))\n\n(defn unpredicate\n  \"Remove trailing '?' from predicate, to make suitable for JavaScript\"\n  [s]\n  (if (str/ends-with? s \"?\")\n    (subs s 0 (-> s count dec))\n    s))\n\n(defn camelize-str\n  \"Convert a string from ClojureScript to JavaScript conventions.\n  - Replace hyphens with camelCase\n  - Remove trailing '?'\"\n  [s]\n  (let [[first-word & more] (str/split (unpredicate s) \"-\")]\n    (if more\n      (str first-word (str/join (map str/capitalize more)))\n      first-word)))\n\n(defn camelize-key\n  \"Convert a keyword from ClojureScript to JavaScript conventions.\n  - Replace hyphens with camelCase\n  - Remove trailing '?'\n  - Preserve namespace\"\n  [k]\n  (keyword (namespace k)\n           (camelize-str (name k))))\n\n(defn camelize-map-keys\n  \"Convert a map from ClojureScript to JavaScript conventions. Change the map\n  keys, but leave the values alone.  For convenience, you can pass in a seq\n  of keywords that must be excluded (left unchanged).\"\n  [m & {:keys [exclude]}]\n  (reduce-kv (fn [m k v]\n               (assoc m\n                      (if (some #{k} exclude) k (camelize-key k))\n                      v))\n             {} m))\n\n;;; [TODO] Merge this with re-frame/console copy and chrome_utils.cljs\n(defn err\n  \"Simple helper to show an error message in Clojure or ClojureScript\"\n  [& strings]\n  (apply #?(:clj (partial println \"Error: \") :cljs js/console.error) strings))\n\n"]}