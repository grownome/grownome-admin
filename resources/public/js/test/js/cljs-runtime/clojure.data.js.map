{"version":3,"file":"clojure.data.js","sources":["clojure/data.cljs"],"mappings":"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","names":["clojure.data/atom-diff","a","b","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","clojure.data/vectorize","m","cljs.core/seq","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__4306","vec__4307","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","result","k","v","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/vec","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/max","cljs.core/keys","clojure.data/diff-associative-key","vec__4316","va","cljs.core.get.cljs$core$IFn$_invoke$arity$2","vb","a*","b*","ab","clojure.data/diff","in-a","cljs.core/contains?","in-b","same","var_args","G__4344","clojure.data/diff-associative","js/Error","clojure.data.diff_associative.cljs$core$IFn$_invoke$arity$3","clojure.set.union.cljs$core$IFn$_invoke$arity$2","ks","diff1","diff2","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core/merge","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","clojure.data/diff-sequential","cljs.core/vector?","cljs.core.range.cljs$core$IFn$_invoke$arity$1","x__4037__auto__","y__4038__auto__","cljs.core/count","clojure.data/diff-set","cljs.core/not-empty","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2","x__4243__auto__","m__4244__auto__","clojure/data.equality-partition","goog/typeOf","cljs.core/missing-protocol","clojure.data/EqualityPartition","clojure.data/equality-partition","x","clojure/data.diff-similar","clojure.data/Diff","clojure.data/diff-similar","goog.object/set","G__4412","G__4413","G__4414","G__4420","G__4421","G__4422","G__4425","G__4426","G__4427","G__4430","G__4431","G__4432","G__4437","G__4438","G__4439","G__4442","G__4443","G__4444","G__4449","G__4450","G__4451","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IMap","cljs.core/ISet","cljs.core/ISequential","G__4514","G__4515","G__4516","G__4519","G__4520","G__4521","G__4528","G__4529","G__4530","G__4533","G__4535","G__4536","G__4543","G__4544","G__4545","G__4549","G__4550","G__4551","G__4554","G__4555","G__4556","fexpr__4565","G__4567","cljs.core/Keyword"],"sourcesContent":[";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns \n  ^{:author \"Stuart Halloway\",\n    :doc \"Non-core data functions.\"}\n  clojure.data\n  (:require [clojure.set :as set]))\n\n(declare ^{:arglists '([a b])} diff)\n\n(defn- atom-diff\n  \"Internal helper for diff.\"\n  [a b]\n  (if (= a b) [nil nil a] [a b nil]))\n\n;; for big things a sparse vector class would be better\n(defn- vectorize\n  \"Convert an associative-by-numeric-index collection into\n   an equivalent vector, with nil for any missing keys\"\n  [m]\n  (when (seq m)\n    (reduce\n     (fn [result [k v]] (assoc result k v))\n     (vec (repeat (apply max (keys m))  nil))\n     m)))\n\n(defn- diff-associative-key\n  \"Diff associative things a and b, comparing only the key k.\"\n  [a b k]\n  (let [va (get a k)\n        vb (get b k)\n        [a* b* ab] (diff va vb)\n        in-a (contains? a k)\n        in-b (contains? b k)\n        same (and in-a in-b\n                  (or (not (nil? ab))\n                      (and (nil? va) (nil? vb))))]\n    [(when (and in-a (or (not (nil? a*)) (not same))) {k a*})\n     (when (and in-b (or (not (nil? b*)) (not same))) {k b*})\n     (when same {k ab})\n     ]))\n\n(defn- diff-associative\n  \"Diff associative things a and b, comparing only keys in ks (if supplied).\"\n  ([a b]\n     (diff-associative a b (set/union (keys a) (keys b))))\n  ([a b ks]\n     (reduce\n      (fn [diff1 diff2]\n        (doall (map merge diff1 diff2)))\n      [nil nil nil]\n      (map\n       (partial diff-associative-key a b)\n       ks))))\n\n(defn- diff-sequential\n  [a b]\n  (vec (map vectorize (diff-associative\n                       (if (vector? a) a (vec a))\n                       (if (vector? b) b (vec b))\n                       (range (max (count a) (count b)))))))\n\n(defn- diff-set\n  [a b]\n  [(not-empty (set/difference a b))\n   (not-empty (set/difference b a))\n   (not-empty (set/intersection a b))])\n\n(defprotocol EqualityPartition\n  \"Implementation detail. Subject to change.\"\n  (equality-partition [x] \"Implementation detail. Subject to change.\"))\n\n(defprotocol Diff\n  \"Implementation detail. Subject to change.\"\n  (diff-similar [a b] \"Implementation detail. Subject to change.\"))\n\n(extend-protocol EqualityPartition\n  nil\n  (equality-partition [x] :atom)\n\n  string\n  (equality-partition [x] :atom)\n\n  number\n  (equality-partition [x] :atom)\n\n  array\n  (equality-partition [x] :sequential)\n\n  function\n  (equality-partition [x] :atom)\n\n  boolean\n  (equality-partition [x] :atom)\n\n  default\n  (equality-partition [x]\n    (cond\n     (satisfies? IMap x) :map\n     (satisfies? ISet x) :set\n     (satisfies? ISequential x) :sequential\n     :default :atom)))\n\n(extend-protocol Diff\n  nil\n  (diff-similar [a b]\n    (atom-diff a b))\n\n  string\n  (diff-similar [a b]\n    (atom-diff a b))\n\n  number\n  (diff-similar [a b]\n    (atom-diff a b))\n\n  array\n  (diff-similar [a b]\n    (diff-sequential a b))\n\n  function\n  (diff-similar [a b]\n    (atom-diff a b))\n\n  boolean\n  (diff-similar [a b]\n    (atom-diff a b))\n\n  default\n  (diff-similar [a b]\n    ((case (equality-partition a)\n       :atom atom-diff\n       :set diff-set\n       :sequential diff-sequential\n       :map diff-associative)\n     a b)))\n\n(defn diff\n  \"Recursively compares a and b, returning a tuple of\n  [things-only-in-a things-only-in-b things-in-both].\n  Comparison rules:\n\n  * For equal a and b, return [nil nil a].\n  * Maps are subdiffed where keys match and values differ.\n  * Sets are never subdiffed.\n  * All sequential things are treated as associative collections\n    by their indexes, with results returned as vectors.\n  * Everything else (including strings!) is treated as\n    an atom and compared for equality.\"\n  [a b]\n  (if (= a b)\n    [nil nil a]\n    (if (= (equality-partition a) (equality-partition b))\n      (diff-similar a b)\n      (atom-diff a b))))\n  \n"]}