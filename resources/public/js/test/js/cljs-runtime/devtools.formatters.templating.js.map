{"version":3,"file":"devtools.formatters.templating.js","sources":["devtools/formatters/templating.cljs"],"mappings":"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","names":["devtools.formatters.templating/mark-as-group!","value","x7836","cljs.core/PROTOCOL_SENTINEL","devtools.formatters.templating/group?","cljs.core/native-satisfies?","devtools.protocols/IGroup","devtools.formatters.templating/mark-as-template!","x7847","devtools.formatters.templating/template?","devtools.protocols/ITemplate","devtools.formatters.templating/mark-as-surrogate!","x7860","devtools.formatters.templating/surrogate?","devtools.protocols/ISurrogate","devtools.formatters.templating/reference?","and__3938__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","var_args","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","devtools.formatters.templating/make-group","seq7865","self__4519__auto__","cljs.core/seq","items","group","seq__7866","chunk__7867","count__7868","i__7869","temp__5457__auto__","cljs.core/chunked-seq?","c__4351__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","item","cljs.core/coll?","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","devtools.formatters.helpers/pref","devtools.formatters.templating/make-template","seq7894","G__7895","G__7896","self__4518__auto__","tag","style","children","template","cljs.core/empty?","seq__7897","chunk__7898","count__7899","i__7900","child","cljs.core.keep.cljs$core$IFn$_invoke$arity$2","temp__5455__auto__","child-value","devtools.formatters.templating/concat-templates!","seq7929","G__7930","templates","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/into-array","devtools.formatters.templating/extend-template!","seq7936","G__7937","args","devtools.formatters.templating.concat_templates_BANG_.cljs$core$IFn$_invoke$arity$variadic","G__7955","devtools.formatters.templating/make-surrogate","js/Error","object","devtools.formatters.templating.make_surrogate.cljs$core$IFn$_invoke$arity$2","header","devtools.formatters.templating.make_surrogate.cljs$core$IFn$_invoke$arity$3","body","devtools.formatters.templating.make_surrogate.cljs$core$IFn$_invoke$arity$4","start-index","obj7957","or__3949__auto__","devtools.formatters.templating/get-surrogate-target","surrogate","devtools.formatters.templating/get-surrogate-header","devtools.formatters.templating/get-surrogate-body","devtools.formatters.templating/get-surrogate-start-index","devtools.formatters.templating/make-reference","p__7966","vec__7967","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","seq7964","G__7965","state-override-fn","cljs.core/fn?","devtools.formatters.templating.make_template.cljs$core$IFn$_invoke$arity$variadic","sub-state","G__7970","devtools.formatters.state/get-current-state","devtools.formatters.templating.make_group.cljs$core$IFn$_invoke$arity$variadic","devtools.formatters.templating/*current-render-stack*","devtools.formatters.templating/*current-render-path*","devtools.formatters.templating/print-preview","markup","*print-level*7974","cljs.core/*print-level*","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","devtools.formatters.templating/add-stack-separators","stack","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","devtools.formatters.templating/replace-fns-with-markers","f","v","clojure.walk/prewalk","devtools.formatters.templating/pprint-render-calls","devtools.util/pprint-str","devtools.formatters.templating/pprint-render-stack","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core/reverse","devtools.formatters.templating/pprint-render-path","path","devtools.util.pprint_str.cljs$core$IFn$_invoke$arity$variadic","devtools.formatters.templating/assert-markup-error","msg","devtools.formatters.templating/surrogate-markup?","cljs.core/sequential?","devtools.formatters.templating/render-special","name","G__7975","obj","converted-args","devtools.formatters.templating/render-json-ml*","cljs.core/rest","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","converted-obj","devtools.formatters.templating/emptyish?","cljs.core/seqable?","cljs.core/array?","devtools.formatters.templating/render-subtree","vec__7977","html-tag","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","*current-render-path*7980","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","devtools.formatters.templating/render-json-ml","*current-render-stack*7981","*current-render-path*7982","devtools.formatters.templating/assert-failed-markup-rendering","initial-value","devtools.formatters.templating/render-markup*","cljs.core/Keyword","devtools.formatters.templating/render-markup"],"sourcesContent":["(ns devtools.formatters.templating\n  (:require-macros [devtools.oops :refer [oget oset ocall oapply safe-call unchecked-aget]])\n  (:require [clojure.walk :refer [prewalk]]\n            [devtools.util :refer [pprint-str]]\n            [devtools.protocols :refer [ITemplate IGroup ISurrogate IFormat]]\n            [devtools.formatters.helpers :refer [pref cljs-value?]]\n            [devtools.formatters.state :refer [get-current-state prevent-recursion?]]\n            [clojure.string :as string]))\n\n; -- object marking support -------------------------------------------------------------------------------------------------\n\n(defn mark-as-group! [value]\n  (specify! value IGroup)\n  value)\n\n(defn group? [value]\n  (satisfies? IGroup value))\n\n(defn mark-as-template! [value]\n  (specify! value ITemplate)\n  value)\n\n(defn template? [value]\n  (satisfies? ITemplate value))\n\n(defn mark-as-surrogate! [value]\n  (specify! value ISurrogate)\n  value)\n\n(defn surrogate? [value]\n  (satisfies? ISurrogate value))\n\n(defn reference? [value]\n  (and (group? value)\n       (= (unchecked-aget value 0) \"object\")))\n\n; ---------------------------------------------------------------------------------------------------------------------------\n\n(defn make-group [& items]\n  (let [group (mark-as-group! #js [])]\n    (doseq [item items]\n      (if (some? item)\n        (if (coll? item)\n          (.apply (unchecked-aget group \"push\") group (mark-as-group! (into-array item)))                                               ; convenience helper to splat cljs collections\n          (.push group (pref item)))))\n    group))\n\n(defn make-template\n  [tag style & children]\n  (let [tag (pref tag)\n        style (pref style)\n        template (mark-as-template! #js [tag (if (empty? style)\n                                               #js {}\n                                               #js {\"style\" style})])]\n    (doseq [child children]\n      (if (some? child)\n        (if (coll? child)\n          (.apply (unchecked-aget template \"push\") template (mark-as-template! (into-array (keep pref child))))                         ; convenience helper to splat cljs collections\n          (if-let [child-value (pref child)]\n            (.push template child-value)))))\n    template))\n\n(defn concat-templates! [template & templates]\n  (mark-as-template! (.apply (oget template \"concat\") template (into-array (map into-array (keep pref templates))))))\n\n(defn extend-template! [template & args]\n  (concat-templates! template args))\n\n(defn make-surrogate\n  ; passing :target as body means that targt object body should be rendered using standard templates\n  ; see <surrogate-body> in markup.cljs\n  ([object] (make-surrogate object nil))\n  ([object header] (make-surrogate object header nil))\n  ([object header body] (make-surrogate object header body 0))\n  ([object header body start-index]\n   (mark-as-surrogate! (js-obj\n                         \"target\" object\n                         \"header\" header\n                         \"body\" body\n                         \"startIndex\" (or start-index 0)))))\n\n(defn get-surrogate-target [surrogate]\n  {:pre [(surrogate? surrogate)]}\n  (oget surrogate \"target\"))\n\n(defn get-surrogate-header [surrogate]\n  {:pre [(surrogate? surrogate)]}\n  (oget surrogate \"header\"))\n\n(defn get-surrogate-body [surrogate]\n  {:pre [(surrogate? surrogate)]}\n  (oget surrogate \"body\"))\n\n(defn get-surrogate-start-index [surrogate]\n  {:pre [(surrogate? surrogate)]}\n  (oget surrogate \"startIndex\"))\n\n(defn make-reference [object & [state-override-fn]]\n  {:pre [(or (nil? state-override-fn) (fn? state-override-fn))]}\n  (if (nil? object)\n    ; this code is duplicated in markup.cljs <nil>\n    (make-template :span :nil-style :nil-label)\n    (let [sub-state (if (some? state-override-fn)\n                      (state-override-fn (get-current-state))\n                      (get-current-state))]\n      (make-group \"object\" #js {\"object\" object\n                                \"config\" sub-state}))))\n\n; -- JSON ML support --------------------------------------------------------------------------------------------------------\n\n; a renderer from hiccup-like data markup to json-ml\n;\n; [[tag style] child1 child2 ...] -> #js [tag #js {\"style\" ...} child1 child2 ...]\n;\n\n(declare render-json-ml*)\n\n(def ^:dynamic *current-render-stack* [])\n(def ^:dynamic *current-render-path* [])\n\n(defn print-preview [markup]\n  (binding [*print-level* 1]\n    (pr-str markup)))\n\n(defn add-stack-separators [stack]\n  (interpose \"-------------\" stack))\n\n(defn replace-fns-with-markers [stack]\n  (let [f (fn [v]\n            (if (fn? v)\n              \"##fn##\"\n              v))]\n    (prewalk f stack)))\n\n(defn pprint-render-calls [stack]\n  (map pprint-str stack))\n\n(defn pprint-render-stack [stack]\n  (string/join \"\\n\" (-> stack\n                        reverse\n                        replace-fns-with-markers\n                        pprint-render-calls\n                        add-stack-separators)))\n\n(defn pprint-render-path [path]\n  (pprint-str path))\n\n(defn assert-markup-error [msg]\n  (assert false (str msg \"\\n\"\n                     \"Render path: \" (pprint-render-path *current-render-path*) \"\\n\"\n                     \"Render stack:\\n\"\n                     (pprint-render-stack *current-render-stack*))))\n\n(defn surrogate-markup? [markup]\n  (and (sequential? markup) (= (first markup) \"surrogate\")))\n\n(defn render-special [name args]\n  (case name\n    \"surrogate\" (let [obj (first args)\n                      converted-args (map render-json-ml* (rest args))]\n                  (apply make-surrogate (concat [obj] converted-args)))\n    \"reference\" (let [obj (first args)\n                      converted-obj (if (surrogate-markup? obj) (render-json-ml* obj) obj)]\n                  (apply make-reference (concat [converted-obj] (rest args))))\n    (assert-markup-error (str \"no matching special tag name: '\" name \"'\"))))\n\n(defn emptyish? [v]\n  (if (or (seqable? v) (array? v) (string? v))\n    (empty? v)\n    false))\n\n(defn render-subtree [tag children]\n  (let [[html-tag style] tag]\n    (apply make-template html-tag style (map render-json-ml* (remove emptyish? (map pref children))))))\n\n(defn render-json-ml* [markup]\n  (if-not (sequential? markup)\n    markup\n    (binding [*current-render-path* (conj *current-render-path* (first markup))]\n      (let [tag (pref (first markup))]\n        (cond\n          (string? tag) (render-special tag (rest markup))\n          (sequential? tag) (render-subtree tag (rest markup))\n          :else (assert-markup-error (str \"invalid json-ml markup at \" (print-preview markup) \":\")))))))\n\n(defn render-json-ml [markup]\n  (binding [*current-render-stack* (conj *current-render-stack* markup)\n            *current-render-path* (conj *current-render-path* \"<render-json-ml>\")]\n    (render-json-ml* markup)))\n\n; -- template rendering -----------------------------------------------------------------------------------------------------\n\n(defn ^:dynamic assert-failed-markup-rendering [initial-value value]\n  (assert false (str \"result of markup rendering must be a template,\\n\"\n                     \"resolved to \" (pprint-str value)\n                     \"initial value: \" (pprint-str initial-value))))\n\n(defn render-markup* [initial-value value]\n  (cond\n    (fn? value) (recur initial-value (value))\n    (keyword? value) (recur initial-value (pref value))\n    (sequential? value) (recur initial-value (render-json-ml value))\n    (template? value) value\n    (surrogate? value) value\n    (reference? value) value\n    :else (assert-failed-markup-rendering initial-value value)))\n\n(defn render-markup [value]\n  (render-markup* value value))\n"]}