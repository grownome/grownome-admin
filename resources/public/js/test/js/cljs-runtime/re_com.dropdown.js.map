{"version":3,"file":"re_com.dropdown.js","sources":["re_com/dropdown.cljs"],"mappings":"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","names":["re-com.dropdown/move-to-new-choice","choices","id-fn","id","offset","current-index","re_com.util.position_for_id.cljs$core$IFn$_invoke$arity$variadic","new-index","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","cljs.core/mod","and__3938__auto__","G__8150","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","re-com.dropdown/choices-with-group-headings","opts","group-fn","groups","cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2","group-headers","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/first","p1__8155#","cljs.core/PersistentHashMap","cljs.core.gensym.cljs$core$IFn$_invoke$arity$0","re-com.dropdown/filter-choices","label-fn","filter-text","lower-filter-text","clojure.string/lower-case","filter-fn","opt","group","label","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","re-com.dropdown/filter-choices-regex","re","e8164","js/RegExp","js/Object","e","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","or__3949__auto__","re-com.dropdown/filter-choices-by-keyword","keyword","value","re-com.dropdown/show-selected-item","node","item-offset-top","item-offset-bottom","parent","parent-height","parent-visible-top","parent-visible-bottom","new-scroll-top","x__4037__auto__","y__4038__auto__","re-com.dropdown/make-group-heading","m","re-com.dropdown/choice-item","on-click","internal-model","mouse-over?","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","reagent.core/create-class","this","reagent.core/dom-node","selected","cljs.core/deref","class","event","cljs.core/reset!","re-com.dropdown/make-choice-item","render-fn","callback","markup","re-com.dropdown/filter-text-box-base","filter-box?","key-handler","drop-showing?","set-filter-text","G__8233","re-com.dropdown/filter-text-box","p1__8249#","p1__8250#","cljs.core/with-meta","re-com.dropdown/dropdown-top","ignore-click","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","tab-index","placeholder","dropdown-click","title?","_","reagent.core/set-state","reagent.core/current-component","text","G__8254","re_com.util.item_for_id.cljs$core$IFn$_invoke$arity$variadic","re-com.dropdown/fn-or-vector-of-maps?","v","cljs.core/fn?","re-com.validate/vector-of-maps?","re-com.dropdown/load-choices*","choices-state","regex-filter?","p__8265","map__8266","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","result","error","args","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/assoc","G__8269","G__8270","p1__8261#","G__8271","p1__8262#","re-com.dropdown/load-choices","debounce-delay","debounce?","temp__5457__auto__","timer","js/clearTimeout","js/setTimeout","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","re-com.dropdown/single-dropdown-args-desc","cljs.core/ifn?","cljs.core/string?","re-com.validate/number-or-string?","cljs.core/number?","re-com.validate/css-style?","re-com.validate/html-attr?","var_args","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","re-com.dropdown/single-dropdown","p__8346","map__8348","cljs.core.get.cljs$core$IFn$_invoke$arity$3","js/Error","seq8344","self__4519__auto__","cljs.core/seq","model","js/goog.DEBUG","re_com.validate.validate_args.cljs$core$IFn$_invoke$arity$variadic","re-com.validate/extract-arg-data","external-model","re-com.util/deref-or-value","choices-fn?","load-choices","cljs.core.partial.cljs$core$IFn$_invoke$arity$4","p__8351","map__8352","p__8356","map__8357","on-change","disabled?","width","max-height","style","attr","p1__8337#","p1__8339#","latest-ext-model","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","changeable?","cljs.core/not","G__8362","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cancel","filtered-choices","press-enter","press-escape","press-tab","G__8370","press-up","press-down","press-home","press-end","G__8380","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","re-com.box/flex-child-style","re-com.box/align-style","p1__8340#","vec__8385","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","p1__8341#","group-names","group-opt-lists","make-a-choice","cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic","make-choices","make-h-then-choices","h","cljs.core/cons","has-no-group-names?","cljs.core/concat","cljs.core.map.cljs$core$IFn$_invoke$arity$3"],"sourcesContent":["(ns re-com.dropdown\r\n  (:require-macros [re-com.core :refer [handler-fn]])\r\n  (:require [re-com.util     :refer [deref-or-value position-for-id item-for-id]]\r\n            [re-com.box      :refer [align-style flex-child-style]]\r\n            [re-com.validate :refer [vector-of-maps? css-style? html-attr? number-or-string?] :refer-macros [validate-args-macro]]\r\n            [clojure.string  :as    string]\r\n            [reagent.core    :as    reagent]))\r\n\r\n;;  Inspiration: http://alxlit.name/bootstrap-chosen\r\n;;  Alternative: http://silviomoreto.github.io/bootstrap-select\r\n\r\n(defn- move-to-new-choice\r\n  \"In a vector of maps (where each map has an :id), return the id of the choice offset posititions away\r\n   from id (usually +1 or -1 to go to next/previous). Also accepts :start and :end\"\r\n  [choices id-fn id offset]\r\n  (let [current-index (position-for-id id choices :id-fn id-fn)\r\n        new-index     (cond\r\n                        (= offset :start)    0\r\n                        (= offset :end)      (dec (count choices))\r\n                        (nil? current-index) 0\r\n                        :else                (mod (+ current-index offset) (count choices)))]\r\n    (when (and new-index (pos? (count choices)))\r\n      (id-fn (nth choices new-index)))))\r\n\r\n\r\n(defn- choices-with-group-headings\r\n  \"If necessary, inserts group headings entries into the choices\"\r\n  [opts group-fn]\r\n  (let [groups         (partition-by group-fn opts)\r\n        group-headers  (->> groups\r\n                            (map first)\r\n                            (map group-fn)\r\n                            (map #(hash-map :id (gensym) :group %)))]\r\n    [group-headers groups]))\r\n\r\n\r\n(defn- filter-choices\r\n  \"Filter a list of choices based on a filter string using plain string searches (case insensitive). Less powerful\r\n   than regex's but no confusion with reserved characters\"\r\n  [choices group-fn label-fn filter-text]\r\n  (let [lower-filter-text (string/lower-case filter-text)\r\n        filter-fn         (fn [opt]\r\n                            (let [group (if (nil? (group-fn opt)) \"\" (group-fn opt))\r\n                                  label (str (label-fn opt))]\r\n                              (or\r\n                                (>= (.indexOf (string/lower-case group) lower-filter-text) 0)\r\n                                (>= (.indexOf (string/lower-case label) lower-filter-text) 0))))]\r\n    (filter filter-fn choices)))\r\n\r\n\r\n(defn- filter-choices-regex\r\n  \"Filter a list of choices based on a filter string using regex's (case insensitive). More powerful but can cause\r\n   confusion for users entering reserved characters such as [ ] * + . ( ) etc.\"\r\n  [choices group-fn label-fn filter-text]\r\n  (let [re        (try\r\n                    (js/RegExp. filter-text \"i\")\r\n                    (catch js/Object e nil))\r\n        filter-fn (partial (fn [re opt]\r\n                             (when-not (nil? re)\r\n                               (or (.test re (group-fn opt)) (.test re (label-fn opt)))))\r\n                           re)]\r\n    (filter filter-fn choices)))\r\n\r\n\r\n(defn filter-choices-by-keyword\r\n  \"Filter a list of choices extra data within the choices vector\"\r\n  [choices keyword value]\r\n  (let [filter-fn (fn [opt] (>= (.indexOf (keyword opt) value) 0))]\r\n    (filter filter-fn choices)))\r\n\r\n\r\n(defn show-selected-item\r\n  [node]\r\n  (let [item-offset-top       (.-offsetTop node)\r\n        item-offset-bottom    (+ item-offset-top (.-clientHeight node))\r\n        parent                (.-parentNode node)\r\n        parent-height         (.-clientHeight parent)\r\n        parent-visible-top    (.-scrollTop parent)\r\n        parent-visible-bottom (+ parent-visible-top parent-height)\r\n        new-scroll-top        (cond\r\n                                (> item-offset-bottom parent-visible-bottom) (max (- item-offset-bottom parent-height) 0)\r\n                                (< item-offset-top parent-visible-top)       item-offset-top)]\r\n    (when new-scroll-top (set! (.-scrollTop parent) new-scroll-top))))\r\n\r\n\r\n(defn- make-group-heading\r\n  \"Render a group heading\"\r\n  [m]\r\n  ^{:key (:id m)} [:li.group-result\r\n                   (:group m)])\r\n\r\n\r\n(defn- choice-item\r\n  \"Render a choice item and set up appropriate mouse events\"\r\n  [id label on-click internal-model]\r\n  (let [mouse-over? (reagent/atom false)]\r\n    (reagent/create-class\r\n      {:component-did-mount\r\n       (fn [this]\r\n         (let [node (reagent/dom-node this)\r\n               selected (= @internal-model id)]\r\n           (when selected (show-selected-item node))))\r\n\r\n       :component-did-update\r\n       (fn [this]\r\n         (let [node (reagent/dom-node this)\r\n               selected (= @internal-model id)]\r\n           (when selected (show-selected-item node))))\r\n\r\n       :display-name \"choice-item\"\r\n\r\n       :reagent-render\r\n       (fn\r\n         [id label on-click internal-model]\r\n         (let [selected (= @internal-model id)\r\n               class (if selected\r\n                       \"highlighted\"\r\n                       (when @mouse-over? \"mouseover\"))]\r\n           [:li\r\n            {:class         (str \"active-result group-option \" class)\r\n             :on-mouse-over (handler-fn (reset! mouse-over? true))\r\n             :on-mouse-out  (handler-fn (reset! mouse-over? false))\r\n             :on-mouse-down (handler-fn (on-click id))}\r\n            label]))})))\r\n\r\n\r\n(defn make-choice-item\r\n  [id-fn render-fn callback internal-model opt]\r\n  (let [id (id-fn opt)\r\n        markup (render-fn opt)]\r\n    ^{:key (str id)} [choice-item id markup callback internal-model]))\r\n\r\n\r\n(defn- filter-text-box-base\r\n  \"Base function (before lifecycle metadata) to render a filter text box\"\r\n  [filter-box? filter-text key-handler drop-showing? set-filter-text]\r\n  [:div.chosen-search\r\n   [:input\r\n    {:type          \"text\"\r\n     :auto-complete \"off\"\r\n     :style         (when-not filter-box? {:position \"absolute\" ;; When no filter box required, use it but hide it off screen\r\n                                           :width    \"0px\"      ;; The rest of these styles make the textbox invisible\r\n                                           :padding  \"0px\"\r\n                                           :border   \"none\"})\r\n     :value         @filter-text\r\n     :on-change     (handler-fn (set-filter-text (-> event .-target .-value)))\r\n     :on-key-down   (handler-fn (when-not (key-handler event)\r\n                                  (.preventDefault event))) ;; When key-handler returns false, preventDefault\r\n     :on-blur       (handler-fn (reset! drop-showing? false))}]])\r\n\r\n\r\n(def ^:private filter-text-box\r\n  \"Render a filter text box\"\r\n  (with-meta filter-text-box-base\r\n             {:component-did-mount #(let [node (.-firstChild (reagent/dom-node %))]\r\n                                     (.focus node))\r\n              :component-did-update #(let [node (.-firstChild (reagent/dom-node %))]\r\n                                      (.focus node))}))\r\n\r\n(defn- dropdown-top\r\n  \"Render the top part of the dropdown, with the clickable area and the up/down arrow\"\r\n  []\r\n  (let [ignore-click (atom false)]\r\n    (fn\r\n      [internal-model choices id-fn label-fn tab-index placeholder dropdown-click key-handler filter-box? drop-showing? title?]\r\n      (let [_    (reagent/set-state (reagent/current-component) {:filter-box? filter-box?})\r\n            text (if @internal-model\r\n                   (label-fn (item-for-id @internal-model choices :id-fn id-fn))\r\n                   placeholder)]\r\n        [:a.chosen-single.chosen-default\r\n         {:href          \"javascript:\"   ;; Required to make this anchor appear in the tab order\r\n          :tab-index     (when tab-index tab-index)\r\n          :on-click      (handler-fn\r\n                           (if @ignore-click\r\n                             (reset! ignore-click false)\r\n                             (dropdown-click)))\r\n          :on-mouse-down (handler-fn\r\n                           (when @drop-showing?\r\n                             (reset! ignore-click true)))  ;; TODO: Hmmm, have a look at calling preventDefault (and stopProp?) and removing the ignore-click stuff\r\n          :on-key-down   (handler-fn\r\n                           (key-handler event)\r\n                           (when (= (.-which event) 13)  ;; Pressing enter on an anchor also triggers click event, which we don't want\r\n                             (reset! ignore-click true)))  ;; TODO: Hmmm, have a look at calling preventDefault (and stopProp?) and removing the ignore-click stuff\r\n          }\r\n         [:span (when title?\r\n                  {:title text})\r\n          text]\r\n         [:div [:b]]])))) ;; This odd bit of markup produces the visual arrow on the right\r\n\r\n(defn- fn-or-vector-of-maps? ;; Would normally move this to re-com.validate but this is very specific to this component\r\n  [v]\r\n  (or (fn? v)\r\n      (vector-of-maps? v)))\r\n\r\n(defn- load-choices*\r\n  \"Load choices if choices is callback.\"\r\n  [choices-state choices text regex-filter?]\r\n  (let [id (inc (:id @choices-state))\r\n        callback (fn [{:keys [result error] :as args}]\r\n                   (println \"single-dropdown callback\" id args @choices-state)\r\n                   (when (= id (:id @choices-state))\r\n                     (swap! choices-state assoc\r\n                            :loading? false\r\n                            :error error\r\n                            :choices result)))]\r\n    (swap! choices-state assoc\r\n           :loading? true\r\n           :error nil\r\n           :id id\r\n           :timer nil)\r\n    (choices {:filter-text   text\r\n              :regex-filter? regex-filter?}\r\n             #(callback {:result %})\r\n             #(callback {:error %}))))\r\n\r\n(defn- load-choices\r\n  \"Load choices or schedule lodaing depending on debounce?\"\r\n  [choices-state choices debounce-delay text regex-filter? debounce?]\r\n  (when (fn? choices)\r\n    (when-let [timer (:timer @choices-state)]\r\n      (js/clearTimeout timer))\r\n    (if debounce?\r\n      (let [timer (js/setTimeout #(load-choices* choices-state choices text regex-filter?) debounce-delay)]\r\n        (swap! choices-state assoc :timer timer))\r\n      (load-choices* choices-state choices text regex-filter?))))\r\n\r\n;;--------------------------------------------------------------------------------------------------\r\n;; Component: single-dropdown\r\n;;--------------------------------------------------------------------------------------------------\r\n\r\n(def single-dropdown-args-desc\r\n  [{:name :choices       :required true                   :type \"vector of choices | atom | (opts, done, fail) -> nil\" :validate-fn fn-or-vector-of-maps? :description [:span \"Each is expected to have an id, label and, optionally, a group, provided by \" [:code \":id-fn\"] \", \" [:code \":label-fn\"] \" & \" [:code \":group-fn\"] \". May also be a callback \" [:code \"(opts, done, fail)\"] \" where opts is map of \" [:code \":filter-text\"] \" and \" [:code \":regex-filter?.\"]]}\r\n   {:name :model         :required true                   :type \"the id of a choice | atom\"                                    :description [:span \"the id of the selected choice. If nil, \" [:code \":placeholder\"] \" text is shown\"]}\r\n   {:name :on-change     :required true                   :type \"id -> nil\"                     :validate-fn fn?               :description [:span \"called when a new choice is selected. Passed the id of new choice\"] }\r\n   {:name :id-fn         :required false :default :id     :type \"choice -> anything\"            :validate-fn ifn?              :description [:span \"given an element of \" [:code \":choices\"] \", returns its unique identifier (aka id)\"]}\r\n   {:name :label-fn      :required false :default :label  :type \"choice -> string\"              :validate-fn ifn?              :description [:span \"given an element of \" [:code \":choices\"] \", returns its displayable label.\"]}\r\n   {:name :group-fn      :required false :default :group  :type \"choice -> anything\"            :validate-fn ifn?              :description [:span \"given an element of \" [:code \":choices\"] \", returns its group identifier\"]}\r\n   {:name :render-fn     :required false                  :type \"choice -> string | hiccup\"     :validate-fn ifn?              :description [:span \"given an element of \" [:code \":choices\"] \", returns the markup that will be rendered for that choice. Defaults to the label if no custom markup is required.\"]}\r\n   {:name :disabled?     :required false :default false   :type \"boolean | atom\"                                               :description \"if true, no user selection is allowed\"}\r\n   {:name :filter-box?   :required false :default false   :type \"boolean\"                                                      :description \"if true, a filter text field is placed at the top of the dropdown\"}\r\n   {:name :regex-filter? :required false :default false   :type \"boolean | atom\"                                               :description \"if true, the filter text field will support JavaScript regular expressions. If false, just plain text\"}\r\n   {:name :placeholder   :required false                  :type \"string\"                        :validate-fn string?           :description \"background text when no selection\"}\r\n   {:name :title?        :required false :default false   :type \"boolean\"                                                      :description \"if true, allows the title for the selected dropdown to be displayed via a mouse over. Handy when dropdown width is small and text is truncated\"}\r\n   {:name :width         :required false :default \"100%\"  :type \"string\"                        :validate-fn string?           :description \"the CSS width. e.g.: \\\"500px\\\" or \\\"20em\\\"\"}\r\n   {:name :max-height    :required false :default \"240px\" :type \"string\"                        :validate-fn string?           :description \"the maximum height of the dropdown part\"}\r\n   {:name :tab-index     :required false                  :type \"integer | string\"              :validate-fn number-or-string? :description \"component's tabindex. A value of -1 removes from order\"}\r\n   {:name :debounce-delay :required false                 :type \"integer\"                       :validate-fn number?           :description [:span \"delay to debounce loading requests when using callback \" [:code \":choices\"]]}\r\n   {:name :class         :required false                  :type \"string\"                        :validate-fn string?           :description \"CSS class names, space separated\"}\r\n   {:name :style         :required false                  :type \"CSS style map\"                 :validate-fn css-style?        :description \"CSS styles to add or override\"}\r\n   {:name :attr          :required false                  :type \"HTML attr map\"                 :validate-fn html-attr?        :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed\"]}])\r\n\r\n(defn single-dropdown\r\n  \"Render a single dropdown component which emulates the bootstrap-choosen style. Sample choices object:\r\n     [{:id \\\"AU\\\" :label \\\"Australia\\\"      :group \\\"Group 1\\\"}\r\n      {:id \\\"US\\\" :label \\\"United States\\\"  :group \\\"Group 1\\\"}\r\n      {:id \\\"GB\\\" :label \\\"United Kingdom\\\" :group \\\"Group 1\\\"}\r\n      {:id \\\"AF\\\" :label \\\"Afghanistan\\\"    :group \\\"Group 2\\\"}]\"\r\n  [& {:keys [choices model regex-filter? debounce-delay]\r\n      :or {debounce-delay 250}\r\n      :as args}]\r\n  {:pre [(validate-args-macro single-dropdown-args-desc args \"single-dropdown\")]}\r\n  (let [external-model (reagent/atom (deref-or-value model))  ;; Holds the last known external value of model, to detect external model changes\r\n        internal-model (reagent/atom @external-model)         ;; Create a new atom from the model to be used internally\r\n        drop-showing?  (reagent/atom false)\r\n        filter-text    (reagent/atom \"\")\r\n        choices-fn?    (fn? choices)\r\n        choices-state (reagent/atom {:loading? choices-fn?\r\n                                     ; loading error\r\n                                     :error nil\r\n                                     :choices []\r\n                                     ; request id to ignore handling response when new request was already made\r\n                                     :id 0\r\n                                     ; to debounce requests\r\n                                     :timer nil})\r\n        load-choices (partial load-choices choices-state choices debounce-delay)\r\n        set-filter-text (fn [text {:keys [regex-filter?] :as args} debounce?]\r\n                          (load-choices text regex-filter? debounce?)\r\n                          (reset! filter-text text))]\r\n    (load-choices \"\" regex-filter? false)\r\n    (fn [& {:keys [choices model on-change id-fn label-fn group-fn render-fn disabled? filter-box? regex-filter? placeholder title? width max-height tab-index debounce-delay class style attr]\r\n            :or {id-fn :id label-fn :label group-fn :group render-fn label-fn}\r\n            :as args}]\r\n      {:pre [(validate-args-macro single-dropdown-args-desc args \"single-dropdown\")]}\r\n      (let [choices          (if choices-fn? (:choices @choices-state) (deref-or-value choices))\r\n            disabled?        (deref-or-value disabled?)\r\n            regex-filter?    (deref-or-value regex-filter?)\r\n            latest-ext-model (reagent/atom (deref-or-value model))\r\n            _                (when (not= @external-model @latest-ext-model) ;; Has model changed externally?\r\n                               (reset! external-model @latest-ext-model)\r\n                               (reset! internal-model @latest-ext-model))\r\n            changeable?      (and on-change (not disabled?))\r\n            callback         #(do\r\n                               (reset! internal-model %)\r\n                               (when (and changeable? (not= @internal-model @latest-ext-model))\r\n                                 (on-change @internal-model))\r\n                               (swap! drop-showing? not) ;; toggle to allow opening dropdown on Enter key\r\n                               (set-filter-text \"\" args false))\r\n            cancel           #(do\r\n                               (reset! drop-showing? false)\r\n                               (set-filter-text \"\" args false)\r\n                               (reset! internal-model @external-model))\r\n            dropdown-click   #(when-not disabled?\r\n                               (swap! drop-showing? not))\r\n            filtered-choices (if choices-fn?\r\n                               choices\r\n                               (if regex-filter?\r\n                                 (filter-choices-regex choices group-fn label-fn @filter-text)\r\n                                 (filter-choices choices group-fn label-fn @filter-text)))\r\n            press-enter      (fn []\r\n                               (if disabled?\r\n                                 (cancel)\r\n                                 (callback @internal-model))\r\n                               true)\r\n            press-escape      (fn []\r\n                                (cancel)\r\n                                true)\r\n            press-tab         (fn []\r\n                                (if disabled?\r\n                                  (cancel)\r\n                                  (do  ;; Was (callback @internal-model) but needed a customised version\r\n                                    (when changeable? (on-change @internal-model))\r\n                                    (reset! drop-showing? false)\r\n                                    (set-filter-text \"\" args false)))\r\n                                (reset! drop-showing? false)\r\n                                true)\r\n            press-up          (fn []\r\n                                (if @drop-showing?  ;; Up arrow\r\n                                  (reset! internal-model (move-to-new-choice filtered-choices id-fn @internal-model -1))\r\n                                  (reset! drop-showing? true))\r\n                                true)\r\n            press-down        (fn []\r\n                                (if @drop-showing?  ;; Down arrow\r\n                                  (reset! internal-model (move-to-new-choice filtered-choices id-fn @internal-model 1))\r\n                                  (reset! drop-showing? true))\r\n                                true)\r\n            press-home        (fn []\r\n                                (reset! internal-model (move-to-new-choice filtered-choices id-fn @internal-model :start))\r\n                                true)\r\n            press-end         (fn []\r\n                                (reset! internal-model (move-to-new-choice filtered-choices id-fn @internal-model :end))\r\n                                true)\r\n            key-handler      #(if disabled?\r\n                               false\r\n                               (case (.-which %)\r\n                                 13 (press-enter)\r\n                                 27 (press-escape)\r\n                                 9  (press-tab)\r\n                                 38 (press-up)\r\n                                 40 (press-down)\r\n                                 36 (press-home)\r\n                                 35 (press-end)\r\n                                 filter-box?))]  ;; Use this boolean to allow/prevent the key from being processed by the text box\r\n        [:div\r\n         (merge\r\n           {:class (str \"rc-dropdown chosen-container chosen-container-single noselect \" (when @drop-showing? \"chosen-container-active chosen-with-drop \") class)\r\n            :style (merge (flex-child-style (if width \"0 0 auto\" \"auto\"))\r\n                          (align-style :align-self :start)\r\n                          {:width (when width width)}\r\n                          style)}\r\n           attr)          ;; Prevent user text selection\r\n         [dropdown-top internal-model choices id-fn label-fn tab-index placeholder dropdown-click key-handler filter-box? drop-showing? title?]\r\n         (when (and @drop-showing? (not disabled?))\r\n           (println \"render\" choices-fn? @choices-state)\r\n           [:div.chosen-drop\r\n            [filter-text-box filter-box? filter-text key-handler drop-showing? #(set-filter-text % args true)]\r\n            [:ul.chosen-results\r\n             (when max-height {:style {:max-height max-height}})\r\n             (cond\r\n               (and choices-fn? (:loading? @choices-state))\r\n               [:li.loading (str \"Loading...\")]\r\n               (and choices-fn? (:error @choices-state))\r\n               [:li.error (:error @choices-state)]\r\n               (-> filtered-choices count pos?)\r\n               (let [[group-names group-opt-lists] (choices-with-group-headings filtered-choices group-fn)\r\n                     make-a-choice                 (partial make-choice-item id-fn render-fn callback internal-model)\r\n                     make-choices                  #(map make-a-choice %1)\r\n                     make-h-then-choices           (fn [h opts]\r\n                                                     (cons (make-group-heading h)\r\n                                                           (make-choices opts)))\r\n                     has-no-group-names?           (nil? (:group (first group-names)))]\r\n                 (if (and (= 1 (count group-opt-lists)) has-no-group-names?)\r\n                   (make-choices (first group-opt-lists)) ;; one group means no headings\r\n                   (apply concat (map make-h-then-choices group-names group-opt-lists))))\r\n               :else\r\n               [:li.no-results (str \"No results match \\\"\" @filter-text \"\\\"\")])]])]))))\r\n"]}