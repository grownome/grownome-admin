{"version":3,"file":"cljs_time.coerce.js","sources":["cljs_time/coerce.cljs"],"mappings":"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","names":["x__4243__auto__","m__4244__auto__","cljs-time/coerce.to-date-time","goog/typeOf","cljs.core/missing-protocol","cljs-time.coerce/ICoerce","cljs-time.coerce/to-date-time","obj","cljs-time.coerce/from-long","millis","G__8534","goog.date.UtcDateTime/fromTimestamp","cljs-time.coerce/from-string","s","cljs.core/first","iter__4324__auto__","s__8537","cljs.core/LazySeq","temp__5457__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4322__auto__","size__4323__auto__","cljs.core/count","b__8539","cljs.core/chunk-buffer","i__8538","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__8536","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","f","cljs.core/vals","cljs-time.format/formatters","d","e8543","e8545","cljs_time.format.parse.cljs$core$IFn$_invoke$arity$2","js/Error","_","cljs-time.coerce/from-date","date","G__8551","cljs-time.coerce/to-long","G__8553","cljs-time.coerce/to-epoch","and__3938__auto__","cljs.core/quot","cljs-time.coerce/to-date","G__8554","js/Date","cljs-time.coerce/to-string","G__8569","cljs-time.format/unparse","cljs-time.coerce/to-local-date","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","goog/date.Date","cljs.core/type","temp__5455__auto__","dt","cljs-time.coerce/to-local-date-time","G__8583","goog/date.DateTime","goog.object/set","G__8593","G__8594","G__8595","cljs.core/PROTOCOL_SENTINEL","G__8599","G__8600","G__8601","G__8602","G__8603","G__8604","local-date","cljs-time.core/to-utc-time-zone","local-date-time","goog/date.UtcDateTime","date-time","long","string","cljs.core/chunk-first"],"sourcesContent":["(ns cljs-time.coerce\n  \"### Utilites to coerce goog.date DateTime instances to and from\n  various other types.\n\n  For example, to convert a goog.date DateTime to and from a js number:\n\n```clojure\n=> (to-long (date-time 1998 4 25))\n893462400000\n\n=> (from-long 893462400000)\n#<19980425T000000>\n```\"\n  (:refer-clojure :exclude [extend second])\n  (:require\n    [cljs-time.core :refer\n     [date-time to-utc-time-zone from-default-time-zone year month day\n      hour minute second milli]]\n    [cljs-time.format :as time-fmt])\n  (:import [goog.date UtcDateTime]))\n\n(defprotocol ICoerce\n  (to-date-time [obj] \"Convert `obj` to a goog.date.DateTime instance.\"))\n\n(defn from-long\n  \"Returns a DateTime instance in the UTC time zone corresponding to the given\n  number of milliseconds after the Unix epoch.\"\n  [millis]\n  (some-> millis UtcDateTime.fromTimestamp))\n\n(defn from-string\n  \"Returns DateTime instance from string using formatters in cljs-time.format,\n  returning first which parses\"\n  [s]\n  (when s\n    (first\n     (for [f (vals time-fmt/formatters)\n           :let [d (try (time-fmt/parse f s) (catch js/Error _))]\n           :when d] d))))\n\n(defn from-date\n  \"Returns a DateTime instance in the UTC time zone corresponding to the given\n  js Date object.\"\n  [date]\n  (some-> date .getTime from-long))\n\n(defn to-long\n  \"Convert `obj` to the number of milliseconds after the Unix epoch.\"\n  [obj]\n  (some-> obj to-date-time .getTime))\n\n(defn to-epoch\n  \"Convert `obj` to Unix epoch.\"\n  [obj]\n  (let [millis (to-long obj)]\n    (and millis (quot millis 1000))))\n\n(defn to-date\n  \"Convert `obj` to a JavaScript Date instance.\"\n  [obj]\n  (some-> obj to-date-time .getTime js/Date.))\n\n(defn to-string\n  \"Returns a string representation of obj in UTC time-zone\n  using \\\"yyyy-MM-dd'T'HH:mm:ss.SSSZZ\\\" date-time representation.\"\n  [obj]\n  (some->> obj\n           to-date-time\n           (time-fmt/unparse (:date-time time-fmt/formatters))))\n\n(defn to-local-date\n  \"Convert `obj` to a goog.date.Date instance\"\n  [obj]\n  (when obj\n    (if (= goog.date.Date (type obj))\n      obj\n      (if-let [dt (to-date-time obj)]\n        (goog.date.Date. (.getYear dt) (.getMonth dt) (.getDate dt))))))\n\n(defn to-local-date-time\n  \"Convert `obj` to a goog.date.DateTime instance\"\n  [obj]\n  (when obj\n    (if-let [dt (to-date-time obj)]\n      (doto (goog.date.DateTime. (.getYear dt) (.getMonth dt) (.getDate dt))\n        (.setHours (.getHours dt))\n        (.setMinutes (.getMinutes dt))\n        (.setSeconds (.getSeconds dt))\n        (.setMilliseconds (.getMilliseconds dt))))))\n\n(extend-protocol ICoerce\n  nil\n  (to-date-time [_]\n    nil)\n\n  js/Date\n  (to-date-time [date]\n    (from-date date))\n\n  goog.date.Date\n  (to-date-time [local-date]\n    (when local-date\n      (to-utc-time-zone local-date)))\n\n  goog.date.DateTime\n  (to-date-time [local-date-time]\n    (when local-date-time\n      (to-utc-time-zone local-date-time)))\n\n  goog.date.UtcDateTime\n  (to-date-time [date-time]\n    date-time)\n\n  number\n  (to-date-time [long]\n    (from-long long))\n\n  string\n  (to-date-time [string]\n    (from-string string)))\n"]}