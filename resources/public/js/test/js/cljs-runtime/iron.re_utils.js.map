{"version":3,"file":"iron.re_utils.js","sources":["iron/re_utils.cljs"],"mappings":"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","names":["iron.re-utils/sub2","key","db-path","G__9892","G__9893","re-frame.core/reg-sub","db","_","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","var_args","G__9895","iron.re-utils/>evt","js/Error","p__9897","map__9898","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.get.cljs$core$IFn$_invoke$arity$3","event","re-frame.core/dispatch","value","G__9896","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","default","coercer","cljs.core/identity","iron.re_utils._GT_evt.cljs$core$IFn$_invoke$arity$2","G__9900","iron.utils/negligible?","G__9903","iron.re-utils/<sub","subscription","re-frame.core/subscribe","cljs.core/deref","or__3949__auto__","iron.re_utils._LT_sub.cljs$core$IFn$_invoke$arity$1","cljs.spec.alpha/def-impl","cljs.spec.alpha/or-spec-impl","cljs.core/vector?","cljs.core/fn?","%","iron.re-utils/vec->fn","vec-or-fn","key-fn","iron.utils/validate","cljs.spec.alpha/nilable-impl","p1__9905#","G__9906","iron.re-utils/event->fn","event-or-fn","iron.re-utils/sub->fn","sub-or-fn","iron.re-utils/check-and-throw","a-spec","iron.closure-utils/debug?","cljs.core/not","cljs.spec.alpha.valid_QMARK_.cljs$core$IFn$_invoke$arity$2","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","*explain-out*9907","cljs.spec.alpha/*explain-out*","expound.alpha/printer","cljs.spec.alpha/explain"],"sourcesContent":[";;; Author: David Goldfarb (deg@degel.com)\n;;; Copyright (c) 2017, David Goldfarb\n\n(ns iron.re-utils\n  (:require\n   [clojure.spec.alpha :as s]\n   [expound.alpha :as expound]\n   [clojure.string :as str]\n   [re-frame.core :as re-frame]\n   [iron.closure-utils :refer [debug?]]\n   [iron.utils :as utils]))\n\n\n(defn sub2\n  \"Shorthand for simple 'layer 2` usage of re-sub\"\n  [key db-path]\n  (re-frame/reg-sub\n   key\n   (fn [db _] (get-in db db-path))))\n\n\n;; Ideas based on https://lambdaisland.com/blog/11-02-2017-re-frame-form-1-subscriptions\n\n(defn >evt\n  \"Shorthand for re-frame dispatch to event.\n  The two-argument form appends a value into the event.\n  The three-argument form offers more control over this value, letting\n  you specify a default value for it and/or a coercer (casting) function\"\n  ([event]\n   (re-frame/dispatch event))\n  ([event value]\n   (re-frame/dispatch (conj event value)))\n  ([event value {:keys [default coercer] :or {coercer identity}}]\n   (>evt event\n         (coercer (if (utils/negligible? value)\n                    default\n                    value)))))\n\n(defn <sub\n  \"Shorthand for re-frame subscribe and deref.\"\n  ([subscription]\n   (-> subscription re-frame/subscribe deref))\n  ([subscription default]\n   (or (<sub subscription) default)))\n\n\n\n(s/def :re-frame/vec-or-fn (s/or :event-or-sub vector? :function fn?))\n\n(defn- vec->fn [vec-or-fn key-fn]\n  {:pre [(utils/validate (s/nilable :re-frame/vec-or-fn) vec-or-fn)]\n   :post (fn? %)}\n  (if (vector? vec-or-fn)\n    #(key-fn (conj vec-or-fn %))\n    vec-or-fn))\n\n\n(defn event->fn\n  \"For contexts that want to pass an argument to a sink function: accept\n  either a function or a re-frame event vector.\n  If a vector is received, convert it to a function that dispatches to that\n  event, with the parameter conj'd on to the end.\"\n  [event-or-fn]\n  (vec->fn event-or-fn >evt))\n\n\n(defn sub->fn\n  \"Accept either a re-frame sub or a function, for contexts that demand\n  a function.\"\n  [sub-or-fn]\n  (vec->fn sub-or-fn <sub))\n\n\n;;; (See https://github.com/Day8/re-frame/blob/master/examples/todomvc/src/todomvc/events.cljs)\n(defn check-and-throw\n  \"Throws an exception if `db` doesn't match the Spec `a-spec`.\"\n  [a-spec db]\n  (when (and debug?\n             (not (s/valid? a-spec db)))\n    (throw (ex-info (binding [s/*explain-out* expound/printer]\n                      (s/explain a-spec db))\n                    {}))))\n"]}