{"version":3,"file":"expound.printer.js","sources":["expound/printer.cljc"],"mappings":"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","names":["expound.printer/indent-level","expound.printer/max-spec-str-width","expound.printer/anon-fn-str","cljs.spec.alpha/def-impl","cljs.spec.alpha/cat-impl","cljs.spec.alpha/rep+impl","cljs.spec.alpha/or-spec-impl","cljs.core/qualified-keyword?","cljs.spec.alpha/rep-impl","cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4","G__9217","cljs.core/coll?","cljs.core/keyword?","expound.printer/keywords","form","cljs.core/tree-seq","cljs.core/seq","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","expound.printer/singleton?","xs","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","expound.printer/specs-from-form","via","G__9242","cljs.core/last","cljs.spec.alpha/form","conformed","cljs.spec.alpha/conform","and__3938__auto__","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","x","cljs.core/vector?","cljs.core/first","cljs.core/second","cljs.core/set","expound.printer/key->spec","keys","problems","seq__9259","chunk__9260","count__9261","i__9262","temp__5457__auto__","cljs.core/chunked-seq?","c__4351__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/next","p","js/Error","expound.util/assert-message","vias","specs","cljs.core/every?","temp__5455__auto__","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","clojure.set/union","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","m","k","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","p1__9258#","cljs.core/name","expound.printer/expand-spec","spec","!seen-specs","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","clojure.walk/prewalk","sp","cljs.spec.alpha/get-spec","cljs.core/deref","cljs.core/contains?","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/conj","p__9297","vec__9298","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","expound.printer/summarize-key-clause","branch","match","G__9301","cljs.core/Keyword","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/list","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","expound.printer/missing-key","vec__9303","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","G__9306","expound.printer/elide-core-ns","s","clojure.string/replace","expound.printer/elide-spec-ns","expound.printer/pprint-fn","f","fn-parts","clojure.string.split.cljs$core$IFn$_invoke$arity$2","cljs.core/re-find","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","ns-n","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core/butlast","fn-n","cljs.core/empty?","cljs.core/demunge-str","var_args","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","expound.printer/format","seq9326","G__9327","self__4518__auto__","fmt","args","goog.string/format","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4","cljs.core/any?","cljs.core/string?","expound.printer/pprint-str","cljs.core/fn?","cljs.pprint.write.cljs$core$IFn$_invoke$arity$variadic","expound.printer/simple-spec-or-name","spec-name","spec-str","clojure.string/includes?","expound.printer/print-spec-keys","p1__9349#","cljs.core/some","cljs.core/simple-keyword?","sb__4462__auto__","goog.string/StringBuffer","*print-newline*9351","cljs.core/*print-newline*","*print-fn*9352","cljs.core/*print-fn*","x__4463__auto__","p__9353","vec__9354","v","p1__9350#","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.pprint.print_table.cljs$core$IFn$_invoke$arity$2","clojure.string/trim","expound.printer/print-missing-keys","keys-clauses","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","p1__9373#","expound.ansi.color.cljs$core$IFn$_invoke$arity$variadic","cljs.core.sort.cljs$core$IFn$_invoke$arity$1","expound.printer/no-trailing-whitespace","s'","clojure.string/split-lines","clojure.string/trimr","cljs.spec.alpha/maybe-impl","cljs.core/nat-int?","G__9386","expound.printer/indent","expound.printer.indent.cljs$core$IFn$_invoke$arity$2","indent-level","expound.printer.indent.cljs$core$IFn$_invoke$arity$3","first-line-indent","rest-lines-indent","vec__9390","seq__9391","first__9392","line","lines","p1__9382#","cljs.core/str","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","cljs.core.into.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns expound.printer\n  (:require [clojure.string :as string]\n            [clojure.spec.alpha :as s]\n            [clojure.pprint :as pprint]\n            [clojure.walk :as walk]\n            [clojure.set :as set]\n            [expound.util :as util]\n            [expound.ansi :as ansi]\n            #?(:clj [clojure.main :as clojure.main]))\n  (:refer-clojure :exclude [format]))\n\n(def indent-level 2)\n(def max-spec-str-width 100)\n(def anon-fn-str \"<anonymous function>\")\n\n(s/def :expound.spec/spec-conjunction\n  (s/cat\n   :op #{'or 'and}\n   :specs (s/+ :expound.spec/kw-or-conjunction)))\n(s/def :expound.spec/kw-or-conjunction\n  (s/or\n   :kw qualified-keyword?\n   :conj :expound.spec/spec-conjunction))\n(s/def :expound.spec/key-spec\n  (s/cat :keys #{'clojure.spec.alpha/keys\n                 'cljs.spec.alpha/keys}\n         :clauses (s/*\n                   (s/cat :qualifier #{:req-un :req :opt-un :opt}\n                          :specs (s/coll-of :expound.spec/kw-or-conjunction)))))\n(s/def :expound.spec/contains-key-pred (s/or\n                                        :simple (s/cat\n                                                 :contains #{`contains? 'contains?}\n                                                 :arg #{'%}\n                                                 :kw keyword?)\n                                        :compound (s/cat\n                                                   :op #{`or `and}\n                                                   :clauses (s/+ :expound.spec/contains-key-pred))))\n\n;;;; private\n\n(defn keywords [form]\n  (->> form\n       (tree-seq coll? seq)\n       (filter keyword?)))\n\n(defn singleton? [xs]\n  (= 1 (count xs)))\n\n(defn specs-from-form [via]\n  (let [form (some-> via last s/form)\n        conformed (s/conform :expound.spec/key-spec form)]\n    ;; The containing spec might not be\n    ;; a simple 'keys' call, in which case we give up\n    (if (and form\n             (not= ::s/invalid conformed))\n      (->> (:clauses conformed)\n           (map :specs)\n           (tree-seq coll? seq)\n           (filter\n            (fn [x]\n              (and (vector? x) (= :kw (first x)))))\n           (map second)\n           set)\n      [])))\n\n(defn key->spec [keys problems]\n  (doseq [p problems]\n    (assert (some? (:expound/via p)) util/assert-message))\n  (let [vias (map :expound/via problems)\n        specs (if (every? qualified-keyword? keys)\n                keys\n                (if-let [specs (apply set/union (map specs-from-form vias))]\n                  specs\n                  keys))]\n    (reduce\n     (fn [m k]\n       (assoc m\n              k\n              (if (qualified-keyword? k)\n                k\n                (->> specs\n                     (filter #(= (name k) (name %)))\n                     first))))\n     {}\n     keys)))\n\n(defn expand-spec [spec]\n  (let [!seen-specs (atom #{})]\n    (walk/prewalk\n     (fn [x]\n       (if-not (qualified-keyword? x)\n         x\n         (if-let [sp (s/get-spec x)]\n           (if-not (contains? @!seen-specs x)\n             (do\n               (swap! !seen-specs conj x)\n               (s/form sp))\n             x)\n           x)))\n     (if (s/get-spec spec)\n       (s/form spec)\n       spec))))\n\n(defn summarize-key-clause [[branch match]]\n  (case branch\n    :simple\n    (:kw match)\n\n    :compound\n    (apply list\n           (symbol (name (:op match)))\n           (map summarize-key-clause (:clauses match)))))\n\n(defn missing-key [form]\n  (let [[branch match] (s/conform :expound.spec/contains-key-pred (nth form 2))]\n    (case branch\n      :simple\n      (:kw match)\n\n      :compound\n      (summarize-key-clause [branch match]))))\n\n;;;; public\n\n(defn elide-core-ns [s]\n  #?(:cljs (-> s\n               (string/replace \"cljs.core/\" \"\")\n               (string/replace \"cljs/core/\" \"\"))\n     :clj (string/replace s \"clojure.core/\" \"\")))\n\n(defn elide-spec-ns [s]\n  #?(:cljs (-> s\n               (string/replace \"cljs.spec.alpha/\" \"\")\n               (string/replace \"cljs/spec/alpha\" \"\"))\n     :clj (string/replace s \"clojure.spec.alpha/\" \"\")))\n\n(defn pprint-fn [f]\n  (-> #?(:clj\n         (let [[_ ns-n f-n] (re-matches #\"(.*)\\$(.*?)(__[0-9]+)?\" (str f))]\n           (if (re-matches #\"^fn__\\d+\\@.*$\" f-n)\n             anon-fn-str\n             (str\n              (clojure.main/demunge ns-n) \"/\"\n              (clojure.main/demunge f-n))))\n         :cljs\n         (let [fn-parts (string/split (second (re-find\n                                               #\"object\\[([^\\( \\]]+).*(\\n|\\])?\"\n                                               (pr-str f)))\n                                      #\"\\$\")\n               ns-n (string/join \".\" (butlast fn-parts))\n               fn-n  (last fn-parts)]\n           (if (empty? ns-n)\n             anon-fn-str\n             (str\n              (demunge-str ns-n) \"/\"\n              (demunge-str fn-n)))))\n      (elide-core-ns)\n      (string/replace #\"--\\d+\" \"\")\n      (string/replace #\"@[a-zA-Z0-9]+\" \"\")))\n\n#?(:cljs\n   (defn format [fmt & args]\n     (apply goog.string/format fmt args))\n   :clj (def format clojure.core/format))\n\n(s/fdef pprint-str\n        :args (s/cat :x any?)\n        :ret string?)\n(defn pprint-str\n  \"Returns the pretty-printed string\"\n  [x]\n  (if (fn? x)\n    (pprint-fn x)\n    (pprint/write x :stream nil)))\n\n(defn simple-spec-or-name [spec-name]\n  (let [spec-str (elide-spec-ns (elide-core-ns (pr-str (expand-spec spec-name))))]\n    (if (or\n         (< max-spec-str-width (count spec-str))\n         (string/includes? spec-str \"\\n\"))\n      spec-name\n      spec-str)))\n\n(defn print-spec-keys [problems]\n  (let [keys (keywords (map #(missing-key (:pred %)) problems))]\n    (if (and (empty? (:expound/via (first problems)))\n             (some simple-keyword? keys))\n      ;; The containing spec is not present in the problems\n      ;; and at least one key is not namespaced, so we can't figure out\n      ;; the spec they intended.\n      nil\n\n      (->> (key->spec keys problems)\n           (map (fn [[k v]] {\"key\" k \"spec\" (simple-spec-or-name v)}))\n           (sort-by #(get % \"key\"))\n           (pprint/print-table [\"key\" \"spec\"])\n           with-out-str\n           string/trim))))\n\n(defn print-missing-keys [problems]\n  (let [keys-clauses (distinct (map (comp missing-key :pred) problems))]\n    (if (every? keyword? keys-clauses)\n      (string/join \", \" (map #(ansi/color % :correct-key) (sort keys-clauses)))\n      (str \"\\n\\n\"\n           (ansi/color (pprint-str\n                        (if (singleton? keys-clauses)\n                          (first keys-clauses)\n                          (apply list\n                                 'and\n                                 keys-clauses))) :correct-key)))))\n\n(s/fdef no-trailing-whitespace\n        :args (s/cat :s string?)\n        :ret string?)\n(defn no-trailing-whitespace\n  \"Given an potentially multi-line string, returns that string with all\n  trailing whitespace removed.\"\n  [s]\n  (let [s' (->> s\n                string/split-lines\n                (map string/trimr)\n                (string/join \"\\n\"))]\n    (if (= \\newline (last s))\n      (str s' \"\\n\")\n      s')))\n\n(s/fdef indent\n        :args (s/cat\n               :first-line-indent-level (s/? nat-int?)\n               :indent-level (s/? nat-int?)\n               :s string?)\n        :ret string?)\n(defn indent\n  \"Given an potentially multi-line string, returns that string indented by\n   'indent-level' spaces. Optionally, can indent first line and other lines\n   different amounts.\"\n  ([s]\n   (indent indent-level s))\n  ([indent-level s]\n   (indent indent-level indent-level s))\n  ([first-line-indent rest-lines-indent s]\n   (let [[line & lines] (string/split-lines (str s))]\n     (->> lines\n          (map #(str (apply str (repeat rest-lines-indent \" \")) %))\n          (into [(str (apply str (repeat first-line-indent \" \")) line)])\n          (string/join \"\\n\")))))\n"]}