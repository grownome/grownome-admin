{"version":3,"file":"expound.ansi.js","sources":["expound/ansi.cljc"],"mappings":"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","names":["expound.ansi/sgr-code","expound.ansi/*enable-color*","expound.ansi/esc","codes","cljs.core.map.cljs$core$IFn$_invoke$arity$3","clojure.string.join.cljs$core$IFn$_invoke$arity$2","var_args","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","expound.ansi/escape","seq9095","self__4519__auto__","cljs.core/seq","expound.ansi/sgr","seq9100","G__9101","cljs.core/first","cljs.core/next","self__4518__auto__","string","expound.ansi.escape.cljs$core$IFn$_invoke$arity$variadic","expound.ansi/strip","clojure.string/replace","expound.ansi/ansi-code?","expound.ansi/*print-styles*","expound.ansi/resolve-styles","styles","temp__5455__auto__","res","cljs.core/not-empty","p1__9111#","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","or__3949__auto__","temp__5457__auto__","expound.ansi/color","seq9129","G__9130","s","cljs.core.apply.cljs$core$IFn$_invoke$arity$3"],"sourcesContent":["(ns expound.ansi\n  (:require [clojure.string :as str]))\n\n;; Copied from strictly-specking, since I see no reason\n;; to deviate from the colors displayed in figwheel\n;; https://github.com/bhauman/strictly-specking/blob/f102c9bd604f0c238a738ac9e2b1f6968fdfd2d8/src/strictly_specking/ansi_util.clj\n\n(def sgr-code\n  \"Map of symbols to numeric SGR (select graphic rendition) codes.\"\n  {:none        0\n   :bold        1\n   :underline   3\n   :blink       5\n   :reverse     7\n   :hidden      8\n   :strike      9\n   :black      30\n   :red        31\n   :green      32\n   :yellow     33\n   :blue       34\n   :magenta    35\n   :cyan       36\n   :white      37\n   :fg-256     38\n   :fg-reset   39\n   :bg-black   40\n   :bg-red     41\n   :bg-green   42\n   :bg-yellow  43\n   :bg-blue    44\n   :bg-magenta 45\n   :bg-cyan    46\n   :bg-white   47\n   :bg-256     48\n   :bg-reset   49})\n\n(def ^:dynamic *enable-color* false)\n\n(defn esc\n  \"Returns an ANSI escope string which will apply the given collection of SGR\n  codes.\"\n  [codes]\n  (let [codes (map sgr-code codes codes)\n        codes (str/join \\; codes)]\n    (str \\u001b \\[ codes \\m)))\n\n(defn escape\n  \"Returns an ANSI escope string which will enact the given SGR codes.\"\n  [& codes]\n  (esc codes))\n\n(defn sgr\n  \"Wraps the given string with SGR escapes to apply the given codes, then reset\n  the graphics.\"\n  [string & codes]\n  (str (esc codes) string (escape :none)))\n\n(defn strip\n  \"Removes color codes from the given string.\"\n  [string]\n  (str/replace string #\"\\u001b\\[[0-9;]*[mK]\" \"\"))\n\n(defmacro with-color [& body]\n  `(binding [*enable-color* true]\n     ~@body))\n\n(defmacro with-color-when [b & body]\n  `(if ~b\n     (with-color ~@body)\n     (do ~@body)))\n\n(def ansi-code? sgr-code)\n\n(def ^:dynamic *print-styles*\n  {:highlight   [:bold]\n   :good        [:green]\n   :good-pred   [:green]\n   :good-key    [:green]\n   :bad         [:red]\n   :bad-value   [:red]\n   :error-key   [:red]\n   :focus-key   [:bold]\n   :correct-key [:green]\n   :header      [:cyan]\n   :footer      [:cyan]\n   :warning-key [:bold]\n   :focus-path  [:magenta]\n   :message     [:magenta]\n   :pointer     [:magenta]\n   :none        [:none]})\n\n(defmacro black-and-white [body]\n  (binding [*print-styles* {}]\n    ~body))\n\n(defn resolve-styles [styles]\n  (if-let [res (not-empty\n                (mapcat #(or\n                          (when-let [res (*print-styles* %)]\n                            res)\n                          [%])\n                        styles))]\n    res\n    ;; fall back to bright\n    [:bold]))\n\n(defn color [s & styles]\n  (if *enable-color*\n    (apply sgr s (resolve-styles styles))\n    s))\n\n(defmacro print-color-text\n  [codes body]\n  `(if *enable-color*\n     (do\n       (.write ^java.io.Writer *out* (apply str (esc (resolve-styles ~codes))))\n       ~body\n       (.write ^java.io.Writer *out* (escape :none)))\n     ~body))\n"]}