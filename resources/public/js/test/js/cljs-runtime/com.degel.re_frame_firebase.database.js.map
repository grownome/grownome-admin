{"version":3,"file":"com.degel.re_frame_firebase.database.js","sources":["com/degel/re_frame_firebase/database.cljs"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.spec.alpha/nilable-impl","cljs.spec.alpha/map-spec-impl","G__9947","cljs.core/map?","js/Error","com.degel.re-frame-firebase.database/fb-ref","path","iron.utils/validate","js/firebase.database","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core/clj->js","p__9948","map__9949","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","com.degel.re-frame-firebase.database/setter","value","on-success","on-failure","com.degel.re-frame-firebase.helpers/success-failure-wrapper","com.degel.re-frame-firebase.database/write-effect","p__9951","map__9952","com.degel.re-frame-firebase.database/push-effect","all","key","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","fexpr__9954","iron.re-utils/event->fn","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","p__9961","map__9962","com.degel.re-frame-firebase.database/once-effect","p1__9959#","p1__9960#","G__9965","fexpr__9964","com.degel.re-frame-firebase.helpers/js->clj-tree","fexpr__9967","p__9986","vec__9988","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","map__9991","com.degel.re-frame-firebase.database/on-value-sub","app-db","_","p1__9983#","ref","id","callback","iron.re_utils._GT_evt.cljs$core$IFn$_invoke$arity$1","or__3949__auto__","com.degel.re-frame-firebase.core/default-error-handler","reagent.ratom.make_reaction.cljs$core$IFn$_invoke$arity$variadic","cljs.core/deref","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","reagent.ratom/make-reaction","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","p__10001","vec__10002","cljs.core/assoc-in","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/dissoc"],"sourcesContent":[";;; Author: David Goldfarb (deg@degel.com)\n;;; Copyright (c) 2017, David Goldfarb\n\n(ns com.degel.re-frame-firebase.database\n  (:require\n   [clojure.spec.alpha :as s]\n   [clojure.string :as str]\n   [re-frame.core :as re-frame]\n   [re-frame.loggers :refer [console]]\n   [reagent.ratom :as ratom :refer [make-reaction]]\n   [iron.re-utils :refer [<sub >evt event->fn sub->fn]]\n   [iron.utils :as utils]\n   [firebase.app :as firebase-app]\n   [firebase.database :as firebase-database]\n   [com.degel.re-frame-firebase.helpers :refer [js->clj-tree success-failure-wrapper]]\n   [com.degel.re-frame-firebase.core :as core]\n   [com.degel.re-frame-firebase.specs :as specs]))\n\n\n(s/def ::cache (s/nilable (s/keys)))\n\n(defn- fb-ref [path]\n  {:pre [(utils/validate ::specs/path path)]}\n  (.ref (js/firebase.database)\n        (str/join \"/\" (clj->js path))))\n\n(defn- setter [{:keys [path value on-success on-failure]}]\n  (.set (fb-ref path)\n        (clj->js value)\n        (success-failure-wrapper on-success on-failure)))\n\n(def ^:private write-effect setter)\n\n(defn- push-effect [{:keys [path value on-success on-failure] :as all}]\n  (let [key (.-key (.push (fb-ref path)))]\n    (setter (assoc all\n              :on-success #((event->fn on-success) key)\n              :path (conj path key)))))\n\n(defn- once-effect [{:keys [path on-success on-failure]}]\n  (.once (fb-ref path)\n         \"value\"\n         #((event->fn on-success) (js->clj-tree %))\n         #((event->fn on-failure) %)))\n\n(defn- on-value-sub [app-db [_ {:keys [path on-failure]}]]\n  (if path\n    (let [ref (fb-ref path)\n          ;; [TODO] Potential bug alert:\n          ;;        We are caching the results, keyed only by path, and we clear\n          ;;        the cache entry in :on-dispose.  I can imagine situations\n          ;;        where this would be problematic if someone tried watching the\n          ;;        same path from two code locations. If this becomes an issue, we\n          ;;        might need to add an optional disambiguation argument to the\n          ;;        subscription.\n          ;;        Note that firebase itself seems to guard against this by using\n          ;;        the callback itself as a unique key to .off.  We can't do that\n          ;;        (modulo some reflection hack), since we use the id as part of\n          ;;        the callback closure.\n          id path\n          callback #(>evt [::on-value-handler id (js->clj-tree %)])]\n      (.on ref \"value\" callback (event->fn (or on-failure (core/default-error-handler))))\n      (make-reaction\n       (fn [] (get-in @app-db [::cache id] []))\n       :on-dispose #(do (.off ref \"value\" callback)\n                        (>evt [::on-value-handler id nil]))))\n    (do\n      (console :error \"Received null Firebase on-value request\")\n      (make-reaction\n       (fn []\n         ;; Minimal dummy response, to avoid blowing up caller\n         nil)))))\n\n(re-frame/reg-event-db\n ::on-value-handler\n (fn [app-db [_ id value]]\n   (if value\n     (assoc-in app-db [::cache id] value)\n     (update app-db ::cache dissoc id))))\n"]}