shadow$provide.module$node_modules$$firebase$logger$dist$index_cjs=function(global,process,require,module,exports,shadow$shims){Object.defineProperty(exports,"__esModule",{value:!0});var instances=[];(function(LogLevel){LogLevel[LogLevel.DEBUG=0]="DEBUG";LogLevel[LogLevel.VERBOSE=1]="VERBOSE";LogLevel[LogLevel.INFO=2]="INFO";LogLevel[LogLevel.WARN=3]="WARN";LogLevel[LogLevel.ERROR=4]="ERROR";LogLevel[LogLevel.SILENT=5]="SILENT"})(exports.LogLevel||(exports.LogLevel={}));var defaultLogLevel=exports.LogLevel.INFO,
defaultLogHandler=function(instance,logType){for(var args=[],_i=2;_i<arguments.length;_i++)args[_i-2]=arguments[_i];if(!(logType<instance.logLevel))switch(_i=(new Date).toISOString(),logType){case exports.LogLevel.DEBUG:console.log.apply(console,["["+_i+"]  "+instance.name+":"].concat(args));break;case exports.LogLevel.VERBOSE:console.log.apply(console,["["+_i+"]  "+instance.name+":"].concat(args));break;case exports.LogLevel.INFO:console.info.apply(console,["["+_i+"]  "+instance.name+":"].concat(args));
break;case exports.LogLevel.WARN:console.warn.apply(console,["["+_i+"]  "+instance.name+":"].concat(args));break;case exports.LogLevel.ERROR:console.error.apply(console,["["+_i+"]  "+instance.name+":"].concat(args));break;default:throw Error("Attempted to log a message with an invalid logType (value: "+logType+")");}};global=function(){function Logger(name){this.name=name;this._logLevel=defaultLogLevel;this._logHandler=defaultLogHandler;instances.push(this)}Object.defineProperty(Logger.prototype,
"logLevel",{get:function(){return this._logLevel},set:function(val){if(!(val in exports.LogLevel))throw new TypeError("Invalid value assigned to `logLevel`");this._logLevel=val},enumerable:!0,configurable:!0});Object.defineProperty(Logger.prototype,"logHandler",{get:function(){return this._logHandler},set:function(val){if("function"!==typeof val)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=val},enumerable:!0,configurable:!0});Logger.prototype.debug=function(){for(var args=
[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];this._logHandler.apply(this,[this,exports.LogLevel.DEBUG].concat(args))};Logger.prototype.log=function(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];this._logHandler.apply(this,[this,exports.LogLevel.VERBOSE].concat(args))};Logger.prototype.info=function(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];this._logHandler.apply(this,[this,exports.LogLevel.INFO].concat(args))};Logger.prototype.warn=
function(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];this._logHandler.apply(this,[this,exports.LogLevel.WARN].concat(args))};Logger.prototype.error=function(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];this._logHandler.apply(this,[this,exports.LogLevel.ERROR].concat(args))};return Logger}();exports.setLogLevel=function(level){instances.forEach(function(inst){inst.logLevel=level})};exports.Logger=global}
//# sourceMappingURL=module$node_modules$$firebase$logger$dist$index_cjs.js.map
