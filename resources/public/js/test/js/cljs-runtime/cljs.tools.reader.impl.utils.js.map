{"version":3,"file":"cljs.tools.reader.impl.utils.js","sources":["cljs/tools/reader/impl/utils.cljs"],"mappings":"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","names":["cljs.tools.reader.impl.utils/char","x","cljs.core/char","cljs.tools.reader.impl.utils/ex-info?","ex","cljs/core.ExceptionInfo","this__4203__auto__","k__4204__auto__","cljs.core._lookup.cljs$core$IFn$_invoke$arity$3","this__4205__auto__","k7817","else__4206__auto__","G__7835","cljs.core/Keyword","splicing?","form","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4217__auto__","writer__4218__auto__","opts__4219__auto__","pr-pair__4220__auto__","keyval__4221__auto__","cljs.core/pr-sequential-writer","cljs.core/pr-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__7816","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4201__auto__","__meta","this__4198__auto__","__hash","this__4207__auto__","cljs.core/count","this__4199__auto__","h__4061__auto__","fexpr__7845","coll__4200__auto__","cljs.core/hash-unordered-coll","this7818","other7819","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","this__4212__auto__","k__4213__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4210__auto__","k__4211__auto__","pred__7849","cljs.core/keyword-identical?","expr__7850","G__7853","G__7854","G__7855","G__7856","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4215__auto__","cljs.core/seq","cljs/core.MapEntry","this__4202__auto__","this__4208__auto__","entry__4209__auto__","cljs.core/vector?","cljs.core/-assoc","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/-conj","cljs.tools.reader.impl.utils/ReaderConditional","this__4240__auto__","cljs.core/List","writer__4241__auto__","cljs.core/-write","G__7824","extmap__4236__auto__","G__7863","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/record?","cljs.tools.reader.impl.utils/->ReaderConditional","cljs.tools.reader.impl.utils/map->ReaderConditional","cljs.tools.reader.impl.utils/reader-conditional?","value","cljs.tools.reader.impl.utils/reader-conditional","cljs.core/PROTOCOL_SENTINEL","coll","writer","opts","cljs.tools.reader.impl.utils/ws-rx","cljs.tools.reader.impl.utils/whitespace?","ch","cljs.tools.reader.impl.utils/numeric?","goog.string/isNumeric","cljs.tools.reader.impl.utils/newline?","c","cljs.tools.reader.impl.utils/desugar-meta","f","cljs.core/Symbol","cljs.tools.reader.impl.utils/last-id","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.tools.reader.impl.utils/next-id","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/inc","cljs.tools.reader.impl.utils/namespace-keys","ns","keys","iter__4324__auto__","s__7940","cljs.core/LazySeq","temp__5457__auto__","cljs.core/chunked-seq?","c__4322__auto__","size__4323__auto__","b__7942","cljs.core/chunk-buffer","i__7941","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__7939","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","key","vec__7946","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__7950","key-ns","key-name","fexpr__7949","fexpr__7953","cljs.core.juxt.cljs$core$IFn$_invoke$arity$2","cljs.core/namespace","cljs.core/name","->key","cljs.core/symbol","cljs.core/keyword","p__7960","vec__7961","cljs.tools.reader.impl.utils/second'","a","b","cljs.tools.reader.impl.utils/char-code","base","code","js/parseInt","js/isNaN","cljs.core/chunk-first"],"sourcesContent":[";;   Copyright (c) Nicola Mometto, Rich Hickey & contributors.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.tools.reader.impl.utils\n  (:refer-clojure :exclude [char])\n  (:require\n   [clojure.string :as string]\n   [goog.string :as gstring]))\n\n(defn char [x]\n  (when-not (nil? x)\n    (cljs.core/char x)))\n\n(defn ^boolean ex-info? [ex]\n  (instance? cljs.core.ExceptionInfo ex))\n\n(defrecord ReaderConditional [splicing? form])\n\n(defn ^boolean reader-conditional?\n  \"Return true if the value is the data representation of a reader conditional\"\n  [value]\n  (instance? ReaderConditional value))\n\n(defn reader-conditional\n  \"Construct a data representation of a reader conditional.\n  If true, splicing? indicates read-cond-splicing.\"\n  [form splicing?]\n  (ReaderConditional. splicing? form))\n\n(extend-protocol IPrintWithWriter\n  ReaderConditional\n  (-pr-writer [coll writer opts]\n    (-write writer (str \"#?\" (when (:splicing? coll) \"@\")))\n    (pr-writer (:form coll) writer opts)))\n\n(def ws-rx #\"[\\s]\")\n\n(defn ^boolean whitespace?\n  \"Checks whether a given character is whitespace\"\n  [ch]\n  (when-not (nil? ch)\n    (if (identical? ch \\,)\n      true\n      (.test ws-rx ch))))\n\n(defn ^boolean numeric?\n  \"Checks whether a given character is numeric\"\n  [ch]\n  (when-not (nil? ch)\n    (gstring/isNumeric ch)))\n\n(defn ^boolean newline?\n  \"Checks whether the character is a newline\"\n  [c]\n  (or (identical? \\newline c)\n      (identical? \"\\n\" c)\n      (nil? c)))\n\n(defn desugar-meta\n  \"Resolves syntactical sugar in metadata\" ;; could be combined with some other desugar?\n  [f]\n  (cond\n    (keyword? f) {f true}\n    (symbol? f)  {:tag f}\n    (string? f)  {:tag f}\n    :else        f))\n\n(def last-id (atom 0))\n\n(defn next-id\n  []\n  (swap! last-id inc))\n\n(defn namespace-keys [ns keys]\n  (for [key keys]\n    (if (or (symbol? key)\n            (keyword? key))\n      (let [[key-ns key-name] ((juxt namespace name) key)\n            ->key (if (symbol? key) symbol keyword)]\n        (cond\n          (nil? key-ns)\n          (->key ns key-name)\n\n          (= \"_\" key-ns)\n          (->key key-name)\n\n          :else\n          key))\n      key)))\n\n(defn second' [[a b]]\n  (when-not a b))\n\n(defn char-code [ch base]\n  (let [code (js/parseInt ch base)]\n    (if (js/isNaN code)\n      -1\n      code)))\n"]}