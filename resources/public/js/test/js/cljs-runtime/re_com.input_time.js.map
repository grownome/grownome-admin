{"version":3,"file":"re_com.input_time.js","sources":["re_com/input_time.cljs"],"mappings":"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","names":["re-com.input-time/time->mins","time","cljs.core/rem","re-com.input-time/time->hrs","cljs.core/quot","re-com.input-time/to-int","s","val","js/parseInt","js/isNaN","p__8721","vec__8723","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","re-com.input-time/triple->time","hr","_","mi","re-com.input-time/triple-seeking-re","re-com.input-time/extract-triple-from-text","text","cljs.core/re-matches","cljs.core/rest","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/not","cljs.core/nil?","re-com.input-time/text->time","cljs.core.map.cljs$core$IFn$_invoke$arity$2","re-com.input-time/time->text","hrs","mins","re-com.util/pad-zero-number","re-com.input-time/valid-text?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","re-com.input-time/valid-time?","re-com.input-time/validate-arg-times","model","minimum","maximum","js/Error","and__3938__auto__","re-com.input-time/force-valid-time","min","max","previous","re-com.input-time/on-new-keypress","event","text-model","current-text","cljs.core/reset!","re-com.input-time/lose-focus-if-enter","ev","re-com.input-time/on-defocus","callback","previous-val","cljs.core/deref","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","re-com.input-time/input-time-args-desc","re-com.validate/number-or-string?","cljs.core/fn?","cljs.core/string?","re-com.validate/css-style?","re-com.validate/html-attr?","var_args","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","re-com.input-time/input-time","p__8797","map__8818","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.get.cljs$core$IFn$_invoke$arity$3","seq8792","self__4519__auto__","cljs.core/seq","args","js/goog.DEBUG","re_com.validate.validate_args.cljs$core$IFn$_invoke$arity$variadic","re-com.validate/extract-arg-data","re-com.util/deref-or-value","deref-model","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","previous-model","p__8834","map__8836","on-change","disabled?","show-icon?","hide-border?","width","height","class","style","attr","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","new-val","re-com.box/h-box"],"sourcesContent":["(ns re-com.input-time\r\n  (:require-macros [re-com.core :refer [handler-fn]])\r\n  (:require [reagent.core    :as    reagent]\r\n            [re-com.validate :refer [css-style? html-attr? number-or-string?] :refer-macros [validate-args-macro]]\r\n            [re-com.text     :refer [label]]\r\n            [re-com.box      :refer [h-box gap]]\r\n            [re-com.util     :refer [pad-zero-number deref-or-value]]))\r\n\r\n\r\n(defn- time->mins\r\n  [time]\r\n  (rem time 100))\r\n\r\n\r\n(defn- time->hrs\r\n  [time]\r\n  (quot time 100))\r\n\r\n(defn- to-int\r\n  \"Parse the string 's' to a valid int. On parse failure, return 0\"\r\n  [s]\r\n  (let [val (js/parseInt s)]\r\n    (if (js/isNaN val) 0 val)))\r\n\r\n(defn- triple->time\r\n  \"Return a time integer from a triple int vector of form  [H  _  M]\"\r\n  [[hr _ mi]]\r\n  (+ (* hr 100) mi))                                        ;; a four digit integer:  HHMM\r\n\r\n\r\n;; This regular expression matchs all valid forms of time entry, including partial\r\n;; forms which happen during user entry.\r\n;; It is composed of 3 'or' options, separated by '|',  and within each, is a sub-re which\r\n;; attempts to match the HH ':' MM parts.\r\n;; So any attempt to match against this re, using \"re-matches\" will return\r\n;; a vector of 10 items:\r\n;;   - the 1st item will be the entire string matched\r\n;;   - followed by 3 groups of 3.\r\n(def ^{:private true}\r\n  triple-seeking-re #\"^(\\d{0,2})()()$|^(\\d{0,1})(:{0,1})(\\d{0,2})$|^(\\d{0,2})(:{0,1})(\\d{0,2})$\")\r\n\r\n(defn- extract-triple-from-text\r\n  [text]\r\n  (->> text\r\n       (re-matches triple-seeking-re)                       ;; looks for different ways of matching triples   H : M\r\n       (rest)                                               ;; get rid of the first value. It is the entire matched string.\r\n       (filter (comp not nil?))))                           ;; of the 9 items, there should be only 3 non-nil matches coresponding to  H : M\r\n\r\n\r\n(defn- text->time\r\n  \"return as a time int, the contents of 'text'\"\r\n  [text]\r\n  (->> text\r\n       extract-triple-from-text\r\n       (map to-int)                                         ;; make them ints (or 0)\r\n       triple->time))                                       ;; turn the triple of values into a single int\r\n\r\n\r\n(defn- time->text\r\n  \"return a string of format HH:MM for 'time'\"\r\n  [time]\r\n  (let [hrs  (time->hrs  time)\r\n        mins (time->mins time)]\r\n    (str (pad-zero-number hrs 2) \":\" (pad-zero-number mins 2))))\r\n\r\n(defn- valid-text?\r\n  \"Return true if text passes basic time validation.\r\n   Can't do to much validation because user input might not be finished.\r\n   Why?  On the way to entering 6:30, you must pass through the invalid state of '63'.\r\n   So we only really check against the triple-extracting regular expression\"\r\n  [text]\r\n  (= 3 (count (extract-triple-from-text text))))\r\n\r\n(defn- valid-time?\r\n  [time]\r\n  (cond\r\n    (nil? time) false                                       ;; can't be nil\r\n    (> 0 time) false                                        ;; must be a poistive number\r\n    (< 60 (time->mins time)) false                          ;; too many mins\r\n    :else true))\r\n\r\n(defn- validate-arg-times\r\n  [model minimum maximum]\r\n  (assert (and (number? model) (valid-time? model)) (str \"[input-time] given an invalid :model - \" model))\r\n  (assert (and (number? minimum) (valid-time? minimum)) (str \"[input-time] given an invalid :minimum - \" minimum))\r\n  (assert (and (number? maximum) (valid-time? maximum)) (str \"[input-time] given an invalid :maximum - \" maximum))\r\n  (assert (<= minimum maximum) (str \"[input-time] :minimum \" minimum \" > :maximum  \" maximum))\r\n  true)\r\n\r\n(defn- force-valid-time\r\n  \"Validate the time supplied.\r\n   Return either the time or, if it is invalid, return something valid\"\r\n  [time min max previous]\r\n  (cond\r\n    (nil? time) previous\r\n    (not (valid-time? time)) previous\r\n    (< time min) min\r\n    (< max time) max\r\n    :else time))\r\n\r\n(defn- on-new-keypress\r\n  \"Called each time the <input> field gets a keypress, or paste operation.\r\n   Rests  the text-model only if the new text is valid\"\r\n  [event text-model]\r\n  (let [current-text (-> event .-target .-value)]           ;; gets the current input field text\r\n    (when (valid-text? current-text)\r\n      (reset! text-model current-text))))\r\n\r\n(defn- lose-focus-if-enter\r\n  \"When Enter is pressed, force the component to lose focus\"\r\n  [ev]\r\n  (when (= (.-keyCode ev) 13)\r\n    (-> ev .-target .blur)\r\n    true))\r\n\r\n(defn- on-defocus\r\n  \"Called when the field looses focus.\r\n   Re-validate what has been entered, comparing to mins and maxs.\r\n   Invoke the callback as necessary\"\r\n  [text-model min max callback previous-val]\r\n  (let [time (text->time @text-model)\r\n        time (force-valid-time time min max previous-val)]\r\n    (reset! text-model (time->text time))\r\n    (when (and callback (not= time previous-val))\r\n      (callback time))))\r\n\r\n(def input-time-args-desc\r\n  [{:name :model        :required true                   :type \"integer | string | atom\" :validate-fn number-or-string? :description \"a time in integer form. e.g. '09:30am' is 930\"}\r\n   {:name :on-change    :required true                   :type \"integer -> nil\"          :validate-fn fn?               :description \"called when user entry completes and value is new. Passed new value as integer\"}\r\n   {:name :minimum      :required false :default 0       :type \"integer | string\"        :validate-fn number-or-string? :description \"user can't enter a time less than this value\"}\r\n   {:name :maximum      :required false :default 2359    :type \"integer | string\"        :validate-fn number-or-string? :description \"user can't enter a time more than this value\"}\r\n   {:name :disabled?    :required false :default false   :type \"boolean | atom\"                                         :description \"when true, user input is disabled\"}\r\n   {:name :show-icon?   :required false :default false   :type \"boolean\"                                                :description \"when true, a clock icon will be displayed to the right of input field\"}\r\n   {:name :hide-border? :required false :default false   :type \"boolean\"                                                :description \"when true, input filed is displayed without a border\"}\r\n   {:name :width        :required false                  :type \"string\"                  :validate-fn string?           :description \"standard CSS width setting for width of the input box (excluding the icon if present)\"}\r\n   {:name :height       :required false                  :type \"string\"                  :validate-fn string?           :description \"standard CSS height setting\"}\r\n   {:name :class        :required false                  :type \"string\"                  :validate-fn string?           :description \"CSS class names, space separated\"}\r\n   {:name :style        :required false                  :type \"CSS style map\"           :validate-fn css-style?        :description \"CSS style. e.g. {:color \\\"red\\\" :width \\\"50px\\\"}\" }\r\n   {:name :attr         :required false                  :type \"HTML attr map\"           :validate-fn html-attr?        :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed\"]}])\r\n\r\n(defn input-time\r\n  \"I return the markup for an input box which will accept and validate times.\r\n   Parameters - refer input-time-args above\"\r\n  [& {:keys [model minimum maximum] :as args\r\n      :or   {minimum 0 maximum 2359}}]\r\n  {:pre [(validate-args-macro input-time-args-desc args \"input-time\")\r\n         (validate-arg-times (deref-or-value model) minimum maximum)]}\r\n  (let [deref-model    (deref-or-value model)\r\n        text-model     (reagent/atom (time->text deref-model))\r\n        previous-model (reagent/atom deref-model)]\r\n    (fn\r\n      [& {:keys [model on-change minimum maximum disabled? show-icon? hide-border? width height class style attr] :as args\r\n          :or   {minimum 0 maximum 2359}}]\r\n      {:pre [(validate-args-macro input-time-args-desc args \"input-time\")\r\n             (validate-arg-times (deref-or-value model) minimum maximum)]}\r\n      (let [style (merge (when hide-border? {:border \"none\"})\r\n                         style)\r\n            new-val (deref-or-value model)\r\n            new-val (if (< new-val minimum) minimum new-val)\r\n            new-val (if (> new-val maximum) maximum new-val)]\r\n        ;; if the model is different to that currently shown in text, then reset the text to match\r\n        ;; other than that we want to keep the current text, because the user is probably typing\r\n        (when (not= @previous-model new-val)\r\n          (reset! text-model (time->text new-val))\r\n          (reset! previous-model new-val))\r\n\r\n        [h-box\r\n         :class    \"rc-input-time\"\r\n         :style    (merge {:height height}\r\n                          style)\r\n         :children [[:input\r\n                     (merge\r\n                       {:type      \"text\"\r\n                        :class     (str \"time-entry \" class)\r\n                        :style     (merge {:width width}\r\n                                          style)\r\n                        :value     @text-model\r\n                        :disabled  (deref-or-value disabled?)\r\n                        :on-change (handler-fn (on-new-keypress event text-model))\r\n                        :on-blur   (handler-fn (on-defocus text-model minimum maximum on-change @previous-model))\r\n                        :on-key-up (handler-fn (lose-focus-if-enter event))}\r\n                       attr)]\r\n                    (when show-icon?\r\n                      #_[:div.time-icon ;; TODO: Remove\r\n                       [:span.glyphicon.glyphicon-time\r\n                        {:style {:position \"static\" :margin \"auto\"}}]]\r\n                      [:div.time-icon\r\n                       [:i.zmdi.zmdi-hc-fw-rc.zmdi-time\r\n                        {:style {:position \"static\" :margin \"auto\"}}]])]]))))\r\n"]}