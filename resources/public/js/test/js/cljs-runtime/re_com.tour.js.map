{"version":3,"file":"re_com.tour.js","sources":["re_com/tour.cljs"],"mappings":"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","names":["re-com.tour/make-tour","tour-spec","tour-map","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","p1__8862#","p2__8863#","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","re-com.tour/initialise-tour","tour","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","iter__4324__auto__","s__8878","cljs.core/LazySeq","temp__5457__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4322__auto__","size__4323__auto__","cljs.core/count","b__8880","cljs.core/chunk-buffer","i__8879","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__8877","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","step","cljs.core/reset!","re-com.tour/start-tour","fexpr__8903","re-com.tour/finish-tour","re-com.tour/next-tour-step","cljs.core/deref","steps","old-step","new-step","fexpr__8909","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","fexpr__8910","re-com.tour/prev-tour-step","fexpr__8921","fexpr__8923","re-com.tour/make-tour-nav","on-first-button","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","on-last-button","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","re-com.box/flex-child-style","re-com.buttons/button","event","cljs.core/chunk-first"],"sourcesContent":["(ns re-com.tour\r\n  (:require-macros [re-com.core :refer [handler-fn]])\r\n  (:require [reagent.core   :as    reagent]\r\n            [re-com.box     :refer [flex-child-style]]\r\n            [re-com.buttons :refer [button]]))\r\n\r\n\r\n;;--------------------------------------------------------------------------------------------------\r\n;; Component: tour\r\n;;\r\n;;   Strings together\r\n;;--------------------------------------------------------------------------------------------------\r\n\r\n(defn make-tour\r\n  \"Returns a map containing\r\n  - A reagent atom for each tour step controlling popover show/hide (boolean)\r\n  - A standard atom holding the current step (integer)\r\n  - A copy of the steps parameter passed in, to determine the order for prev/next functions\r\n  It sets the first step atom to true so that it will be initially shown\r\n  Sample return value:\r\n  {:steps [:step1 :step2 :step3]\r\n  :current-step (atom 0)\r\n  :step1 (reagent/atom true)\r\n  :step2 (reagent/atom false)\r\n  :step3 (reagent/atom false)}\"\r\n  [tour-spec]\r\n  (let [tour-map {:current-step (atom 0) :steps tour-spec}] ;; Only need normal atom\r\n\r\n    (reduce #(assoc %1 %2 (reagent/atom false)) tour-map tour-spec))) ;; Old way: (merge {} (map #(hash-map % (reagent/atom false)) tour-spec))\r\n\r\n\r\n(defn- initialise-tour\r\n  \"Resets all poover atoms to false\"\r\n  [tour]\r\n  (doall (for [step (:steps tour)] (reset! (step tour) false))))\r\n\r\n\r\n(defn start-tour\r\n  \"Sets the first popover atom in the tour to true\"\r\n  [tour]\r\n  (initialise-tour tour)\r\n  (reset! (:current-step tour) 0)\r\n  (reset! ((first (:steps tour)) tour) true))\r\n\r\n\r\n(defn finish-tour\r\n  \"Closes all tour popovers\"\r\n  [tour]\r\n  (initialise-tour tour))\r\n\r\n\r\n(defn- next-tour-step\r\n  [tour]\r\n  (let [steps     (:steps tour)\r\n        old-step  @(:current-step tour)\r\n        new-step  (inc old-step)]\r\n    (when (< new-step (count (:steps tour)))\r\n      (reset! (:current-step tour) new-step)\r\n      (reset! ((nth steps old-step) tour) false)\r\n      (reset! ((nth steps new-step) tour) true))))\r\n\r\n\r\n(defn- prev-tour-step\r\n  [tour]\r\n  (let [steps    (:steps tour)\r\n        old-step @(:current-step tour)\r\n        new-step (dec old-step)]\r\n    (when (>= new-step 0)\r\n      (reset! (:current-step tour) new-step)\r\n      (reset! ((nth steps old-step) tour) false)\r\n      (reset! ((nth steps new-step) tour) true))))\r\n\r\n\r\n(defn make-tour-nav\r\n  \"Generate the hr and previous/next buttons markup.\r\n  If first button in tour, don't generate a Previous button.\r\n  If last button in tour, change Next button to a Finish button\"\r\n  [tour]\r\n  (let [on-first-button (= @(:current-step tour) 0)\r\n        on-last-button  (= @(:current-step tour) (dec (count (:steps tour))))]\r\n    [:div\r\n     [:hr {:style (merge (flex-child-style \"none\")\r\n                         {:margin \"10px 0px 10px\"})}]\r\n      (when-not on-first-button\r\n        [button\r\n         :label    \"Previous\"\r\n         :on-click (handler-fn (prev-tour-step tour))\r\n         :style    {:margin-right \"15px\"}\r\n         :class     \"btn-default\"])\r\n      [button\r\n       :label    (if on-last-button \"Finish\" \"Next\")\r\n       :on-click (handler-fn (if on-last-button\r\n                               (finish-tour tour)\r\n                               (next-tour-step tour)))\r\n       :class     \"btn-default\"]]))\r\n"]}