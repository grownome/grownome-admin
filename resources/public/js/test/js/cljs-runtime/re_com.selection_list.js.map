{"version":3,"file":"re_com.selection_list.js","sources":["re_com/selection_list.cljs"],"mappings":"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","names":["var_args","G__8703","re-com.selection-list/label-style","js/Error","selected?","as-exclusions?","re_com.selection_list.label_style.cljs$core$IFn$_invoke$arity$3","selected-color","base-style","and__3938__auto__","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","re-com.selection-list/check-clicked","selections","item-id","ticked?","required?","num-selected","cljs.core/count","only-item","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/first","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.disj.cljs$core$IFn$_invoke$arity$2","re-com.selection-list/as-checked","item","id-fn","on-change","disabled?","label-fn","re-com.box/box","event","G__8738","cljs.core/not","re-com.misc/checkbox","re_com.selection_list.label_style.cljs$core$IFn$_invoke$arity$2","re-com.selection-list/radio-clicked","re-com.selection-list/as-radio","G__8749","re-com.misc/radio-button","re-com.selection-list/list-style","re-com.selection-list/spacing-bordered","re-com.selection-list/spacing-unbordered","re-com.selection-list/selection-list-args-desc","re-com.validate/vector-of-maps?","re-com.validate/set-or-atom?","cljs.core/fn?","cljs.core/ifn?","re-com.validate/string-or-atom?","p__8769","map__8770","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","re-com.selection-list/list-container","choices","model","multi-select?","width","height","max-height","hide-border?","item-renderer","args","js/goog.DEBUG","re_com.validate.validate_args.cljs$core$IFn$_invoke$arity$variadic","re-com.validate/extract-arg-data","selected","cljs.core/PersistentVector","cljs.core/set","items","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p1__8766#","p1__8767#","p1__8768#","bounds","cljs.core/select-keys","spacing","re-com.box/border","cljs.core.into.cljs$core$IFn$_invoke$arity$2","re-com.selection-list/configure","attributes","re-com.util/fmap","re-com.util/deref-or-value","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","re-com.selection-list/selection-list","p__8799","map__8801","seq8793","self__4519__auto__","cljs.core/seq","p__8812","map__8815"],"sourcesContent":["(ns re-com.selection-list\r\n  (:require-macros [re-com.core :refer [handler-fn]])\r\n  (:require\r\n    [re-com.text     :refer [label]]\r\n    [re-com.misc     :refer [checkbox radio-button]]\r\n    [re-com.box      :refer [box border h-box v-box]]\r\n    [re-com.validate :refer [vector-of-maps? string-or-atom? set-or-atom?] :refer-macros [validate-args-macro]]\r\n    [re-com.util     :refer [fmap deref-or-value]]))\r\n\r\n;; ----------------------------------------------------------------------------\r\n(defn label-style\r\n  ([selected? as-exclusions?]\r\n    (label-style selected? as-exclusions? nil))\r\n\r\n  ([selected? as-exclusions? selected-color]\r\n    ;;TODO: margin-top required because currently checkbox & radio-button don't center label\r\n    (let [base-style {:margin-top \"1px\"}\r\n          base-style (if (and selected? as-exclusions?)\r\n                       (merge base-style {:text-decoration \"line-through\"})\r\n                       base-style)\r\n          base-style (if (and selected? selected-color)\r\n                       (merge base-style {:color selected-color})\r\n                       base-style)]\r\n          base-style)))\r\n\r\n\r\n(defn- check-clicked\r\n  [selections item-id ticked? required?]\r\n  (let [num-selected (count selections)\r\n        only-item    (when (= 1 num-selected) (first selections))]\r\n    (if (and required? (= only-item item-id))\r\n      selections  ;; prevent unselect of last item\r\n      (if ticked? (conj selections item-id) (disj selections item-id)))))\r\n\r\n(defn- as-checked\r\n  [item id-fn selections on-change disabled? label-fn required? as-exclusions?]\r\n  ;;TODO: Do we really need an anchor now that bootstrap styles not realy being used ?\r\n  (let [item-id (id-fn item)]\r\n    [box\r\n     :class \"list-group-item compact\"\r\n     :attr {:on-click (handler-fn (when-not disabled?\r\n                                    (on-change (check-clicked selections item-id (not (selections item-id)) required?))))}\r\n     :child [checkbox\r\n             :model (some? (selections item-id))\r\n             :on-change #()                                 ;; handled by enclosing box\r\n             :disabled? disabled?\r\n             :label-style (label-style (selections item-id) as-exclusions?)\r\n             :label (label-fn item)]]))\r\n\r\n\r\n(defn- radio-clicked\r\n  [selections item-id required?]\r\n  (if (and required? (selections item-id))\r\n    selections  ;; prevent unselect of radio\r\n    (if (selections item-id) #{} #{item-id})))\r\n\r\n(defn- as-radio\r\n  [item id-fn selections on-change disabled? label-fn required? as-exclusions?]\r\n  (let [item-id (id-fn item)]\r\n    [box\r\n     :class \"list-group-item compact\"\r\n     :attr {:on-click (handler-fn (when-not disabled?\r\n                                    (on-change (radio-clicked selections item-id required?))))}\r\n     :child [radio-button\r\n             :model (first selections)\r\n             :value item-id\r\n             :on-change #()                                 ;; handled by enclosing box\r\n             :disabled? disabled?\r\n             :label-style (label-style (selections item-id) as-exclusions?)\r\n             :label (label-fn item)]]))\r\n\r\n\r\n(def ^:const list-style\r\n  ;;TODO: These should be in CSS resource\r\n  {:overflow-x     \"hidden\"\r\n   :overflow-y     \"auto\"}) ;;TODO this should be handled by scroller later\r\n\r\n(def ^:const spacing-bordered\r\n  {:padding-top    \"0px\"\r\n   :padding-bottom \"0px\"\r\n   :padding-left   \"5px\"\r\n   :padding-right  \"5px\"\r\n   :margin-top     \"5px\"\r\n   :margin-bottom  \"5px\"})\r\n\r\n(def ^:const spacing-unbordered\r\n  {:padding-left   \"0px\"\r\n   :padding-right  \"5px\"\r\n   :padding-top    \"0px\"\r\n   :padding-bottom \"0px\"\r\n   :margin-top     \"0px\"\r\n   :margin-bottom  \"0px\"})\r\n\r\n\r\n(def selection-list-args-desc\r\n  [{:name :choices        :required true                  :type \"vector of choices | atom\"           :validate-fn vector-of-maps? :description [:span \"the selectable items. Elements can be strings or more interesting data items like {:label \\\"some name\\\" :sort 5}. Also see \" [:code \":label-fn\"] \" below (list of maps also allowed)\"]}\r\n   {:name :model          :required true                  :type \"set of :ids within :choices | atom\" :validate-fn set-or-atom?    :description \"the currently selected items. Note: items are considered distinct\"}\r\n   {:name :on-change      :required true                  :type \"set of :ids -> nil | atom\"          :validate-fn fn?             :description [:span \"a callback which will be passed set of the ids (as defined by \" [:code \":id-fn\"] \") of the selected items\"]}\r\n   {:name :id-fn          :required false :default :id    :type \"choice -> anything\"                 :validate-fn ifn?            :description [:span \"given an element of \" [:code \":choices\"] \", returns its unique identifier (aka id)\"]}\r\n   {:name :label-fn       :required false :default :label :type \"choice -> anything\"                 :validate-fn ifn?            :description [:span \"given an element of \" [:code \":choices\"] \", returns its displayable label\"]}\r\n   {:name :multi-select?  :required false :default true   :type \"boolean | atom\"                                                  :description \"when true, use check boxes, otherwise radio buttons\"}\r\n   {:name :as-exclusions? :required false :default false  :type \"boolean | atom\"                                                  :description \"when true, selected items are shown with struck-out labels\"}\r\n   {:name :required?      :required false :default false  :type \"boolean | atom\"                                                  :description \"when true, at least one item must be selected. Note: being able to un-select a radio button is not a common use case, so this should probably be set to true when in single select mode\"}\r\n   {:name :width          :required false                 :type \"string | atom\"                      :validate-fn string-or-atom? :description \"a CSS style e.g. \\\"250px\\\". When specified, item labels may be clipped. Otherwise based on widest label\"}\r\n   {:name :height         :required false                 :type \"string | atom\"                      :validate-fn string-or-atom? :description \"a CSS style e.g. \\\"150px\\\". Size beyond which items will scroll\"}\r\n   {:name :max-height     :required false                 :type \"string | atom\"                      :validate-fn string-or-atom? :description \"a CSS style e.g. \\\"150px\\\". If there are less items then this height, box will shrink. If there are more, items will scroll\"}\r\n   {:name :disabled?      :required false :default false  :type \"boolean | atom\"                                                  :description \"when true, the time input will be disabled. Can be atom or value\"}\r\n   {:name :hide-border?   :required false :default false  :type \"boolean | atom\"                                                  :description \"when true, the list will be displayed without a border\"}\r\n   {:name :item-renderer  :required false                 :type \"-> nil | atom\"                      :validate-fn fn?             :description \"a function which takes no params and returns nothing. Called for each element during setup, the returned component renders the element, responds to clicks etc.\"}])\r\n\r\n;;TODO hide hover highlights for links when disabled\r\n(defn- list-container\r\n  [{:keys [choices model on-change id-fn label-fn multi-select? as-exclusions? required? width height max-height disabled? hide-border? item-renderer]\r\n    :as   args}]\r\n  {:pre [(validate-args-macro selection-list-args-desc args \"selection-list\")]}\r\n  (let [selected (if multi-select? model (-> model first vector set))\r\n        items    (map (if item-renderer\r\n                        #(item-renderer % id-fn selected on-change disabled? label-fn required? as-exclusions?)  ;; TODO do we need to pass id-fn?\r\n                        (if multi-select?\r\n                          #(as-checked % id-fn selected on-change disabled? label-fn required? as-exclusions?)\r\n                          #(as-radio % id-fn selected on-change disabled? label-fn required? as-exclusions?)))\r\n                      choices)\r\n        bounds   (select-keys args [:width :height :max-height])\r\n        spacing  (if hide-border? spacing-unbordered spacing-bordered)]\r\n    ;; In single select mode force selections to one. This causes a second render\r\n    ;; TODO: GR commented this out to fix the bug where #{nil} was being returned for an empty list. Remove when we're sure there are no ill effects.\r\n    #_(when-not (= selected model) (on-change selected))\r\n    [border\r\n     :radius \"4px\"\r\n     :border (when hide-border? \"none\")\r\n     :child  (into [:div {:class \"list-group noselect\" :style (merge list-style bounds spacing)}] items)]))\r\n\r\n\r\n(defn- configure\r\n  \"Augment passed attributes with defaults and deref any atoms\"\r\n  [attributes]\r\n  (merge {:multi-select?  true\r\n          :as-exclusions? false\r\n          :required?      false\r\n          :disabled?      false\r\n          :hide-border?   false\r\n          :id-fn          :id\r\n          :label-fn       :label}\r\n         (fmap deref-or-value attributes)))\r\n\r\n(defn selection-list\r\n  \"Produce a list box with items arranged vertically\"\r\n  [& {:as args}]\r\n  {:pre [(validate-args-macro selection-list-args-desc args \"selection-list\")]}\r\n  ;;NOTE: Consumer has complete control over what is selected or not. A current design tradeoff\r\n  ;;      causes all selection changes to trigger a complete list re-render as a result of on-change callback.\r\n  ;;      this approach may be not ideal for very large list choices.\r\n  (fn [& {:as args}]\r\n    [list-container (configure args)]))\r\n"]}