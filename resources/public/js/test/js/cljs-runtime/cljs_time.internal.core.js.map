{"version":3,"file":"cljs_time.internal.core.js","sources":["cljs_time/internal/core.cljs"],"mappings":"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","names":["cljs-time.internal.core/months","cljs-time.internal.core/days","cljs-time.internal.core/abbreviate","n","s","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","var_args","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","cljs-time.internal.core/=","seq6948","self__4519__auto__","cljs.core/seq","args","p1__6946#","cljs.core/every?","goog/date.Date","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/=","p1__6947#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs-time.internal.core/leap-year?","y","cljs.core/mod","cljs-time.internal.core/days-in-month","cljs-time.internal.core/corrected-dim","month","G__6955","cljs_time.internal.core._EQ_.cljs$core$IFn$_invoke$arity$variadic","cljs-time.internal.core/year-corrected-dim","year","G__6956","and__3938__auto__","p__6957","map__6958","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs-time.internal.core/valid-date?","years","months","days","hours","minutes","seconds","millis","weekyear","weekyear-week","day-of-week","d","months?","dim","days?","hours?","minutes?","seconds?","millis?","weekyear-week?","day-of-week?","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","cljs.core/true?","cljs.core/not","or__3949__auto__","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","G__6960","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs-time.internal.core/index-of","coll","x","cljs.core/first","p1__6967#","p2__6966#","cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2","cljs-time.internal.core/format","seq6971","G__6972","cljs.core/next","self__4518__auto__","fmt","cljs.core/Keyword","cljs.core/Symbol","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","goog.string/format","G__6986","cljs-time.internal.core/zero-pad","js/Error","zeros","clojure.string.join.cljs$core$IFn$_invoke$arity$1","cljs.core.take.cljs$core$IFn$_invoke$arity$2","cljs.core/count","cljs.core.repeat.cljs$core$IFn$_invoke$arity$1","cljs-time.internal.core/multiplied-by","period","scalar","field","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","scale-fn","cljs-time.internal.core/get-week-year","date","january","december","week-number","goog.date/getWeekNumber"],"sourcesContent":["(ns cljs-time.internal.core\n  (:refer-clojure :exclude [=])\n  (:require\n   [clojure.string :as string]\n   [goog.string :as gstring]\n   [goog.string.format]\n   [goog.date]))\n\n(def months\n  [\"January\" \"February\" \"March\" \"April\" \"May\" \"June\" \"July\" \"August\"\n   \"September\" \"October\" \"November\" \"December\"])\n\n(def days\n  [\"Sunday\" \"Monday\" \"Tuesday\" \"Wednesday\" \"Thursday\" \"Friday\" \"Saturday\"])\n\n(defn abbreviate [n s]\n  (subs s 0 n))\n\n(defn = [& args]\n  (cond (every? #(instance? goog.date.Date %) args)\n        (apply cljs.core/= (map #(.getTime %) args))\n        :default (apply cljs.core/= args)))\n\n(defn leap-year? [y]\n  (cond (zero? (mod y 400)) true\n        (zero? (mod y 100)) false\n        (zero? (mod y 4)) true\n        :else false))\n\n(def days-in-month [31 28 31 30 31 30 31 31 30 31 30 31])\n\n(defn corrected-dim [month]\n  (days-in-month (if (= month 1) 11 (dec month))))\n\n(defn year-corrected-dim [year month]\n  (cond-> (corrected-dim month)\n    (and (leap-year? year) (= month 2)) inc))\n\n(defn valid-date?\n  [{:keys [years months days hours minutes seconds millis\n           weekyear weekyear-week day-of-week] :as d}]\n  (let [months?  (when months (<= 1 months 12))\n        dim      (if years\n                   (and months months? (year-corrected-dim years months))\n                   (and months months? (corrected-dim months)))\n        days?    (when days (if dim (<= 1 days dim) (<= 1 days 31)))\n        hours?   (when hours (<= 0 hours 23))\n        minutes? (when minutes (<= 0 minutes 59))\n        seconds? (when seconds (<= 0 seconds 60))\n        millis?  (when millis (<= 0 millis 999))\n        weekyear-week? (when weekyear-week (<= 1 weekyear-week 53))\n        day-of-week? (when day-of-week (<= 1 day-of-week 7))]\n    (if (->> [months? days? hours? minutes? seconds? millis? \n              weekyear-week? day-of-week?]\n             (remove nil?)\n             (every? true?))\n      (if (not (and (or years months days)\n                    (or weekyear weekyear-week day-of-week)))\n        d\n        (throw \n         (ex-info \"Mixing year, month, day and week-year week-number fields\"\n                  {:type :invalid-date :date d\n                   :errors {}})))\n      (throw\n       (ex-info \"Date is not valid\"\n                {:type :invalid-date :date d\n                 :errors (cond-> {}\n                           (false? months?)  (assoc :months months)\n                           (false? days?)    (assoc :days days)\n                           (false? hours?)   (assoc :hours hours)\n                           (false? minutes?) (assoc :minutes minutes)\n                           (false? seconds?) (assoc :seconds seconds)\n                           (false? millis?)  (assoc :millis millis)\n                           (false? weekyear-week?) (assoc :weekyear-week weekyear-week)\n                           (false? day-of-week?) (assoc :day-of-week day-of-week))})))))\n\n(defn index-of [coll x]\n  (first (keep-indexed #(when (= %2 x) %1) coll)))\n\n(defn format\n  \"Formats a string using goog.string.format.\"\n  [fmt & args]\n  (let [args (map (fn [x]\n                    (if (or (keyword? x) (symbol? x))\n                      (str x)\n                      x))\n                  args)]\n    (apply gstring/format fmt args)))\n\n(defn zero-pad\n  \"Remove the need to pull in gstring/format code in advanced compilation\"\n  ([n] (if (<= 0 n 9) (str \"0\" n) (str n)))\n  ([n zeros]\n   ; No need to handle negative numbers\n   (if (< zeros 1)\n     (str n)\n     (str (string/join (take (- zeros (count (str n))) (repeat \"0\")))\n          n))))\n\n(defn multiplied-by [period scalar]\n  (letfn [(scale-fn [field]\n            (when field\n              (* field scalar)))]\n    (-> period\n        (update-in [:millis] scale-fn)\n        (update-in [:seconds] scale-fn)\n        (update-in [:minutes] scale-fn)\n        (update-in [:hours] scale-fn)\n        (update-in [:days] scale-fn)\n        (update-in [:weeks] scale-fn)\n        (update-in [:months] scale-fn)\n        (update-in [:years] scale-fn))))\n\n(defn get-week-year\n  \"Counterpart ot goog.date/getWeekNumber. \n  month 0 is jan per goog.date\"\n  [year month date]\n  (let [january (= month 0)\n        december (= month 11)\n        week-number (goog.date/getWeekNumber year month date)]\n    (cond \n      (and january (>= week-number 52)) (dec year)\n      (and december (= week-number 1))  (inc year)\n      :else year)))\n"]}