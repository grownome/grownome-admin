{"version":3,"file":"re_com.box.js","sources":["re_com/box.cljs"],"mappings":"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","names":["re-com.box/debug","re-com.box/flex-child-style","size","vec__6961","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","split-size","clojure.string.split.cljs$core$IFn$_invoke$arity$2","clojure.string/trim","split-count","cljs.core/count","_","js/Error","cljs.core/contains?","size-only","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/first","split-size-only","num","units","pass-through?","grow-ratio?","grow","shrink","basis","flex","and__3938__auto__","re-com.box/flex-flow-style","flex-flow","re-com.box/justify-style","justify","js","G__6965","cljs.core/Keyword","re-com.box/align-style","attribute","align","attribute-wk","cljs.core/name","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","as","G__6970","re-com.box/scroll-style","scroll","G__6975","var_args","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","re-com.box/box-base","p__6982","map__6983","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","seq6981","self__4519__auto__","cljs.core/seq","h-scroll","v-scroll","width","height","min-width","min-height","max-width","max-height","align-self","margin","padding","border","l-border","r-border","t-border","b-border","radius","bk-color","child","class-name","class","style","attr","s","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","re-com.box/gap-args-desc","cljs.core/string?","re-com.validate/css-style?","re-com.validate/html-attr?","re-com.box/gap","p__7002","map__7003","seq7001","args","js/goog.DEBUG","re_com.validate.validate_args.cljs$core$IFn$_invoke$arity$variadic","re-com.validate/extract-arg-data","re-com.box/line-args-desc","re-com.box/line","p__7041","map__7042","cljs.core.get.cljs$core$IFn$_invoke$arity$3","seq7033","color","re-com.box/h-box-args-desc","cljs.core/sequential?","re-com.validate/justify-style?","re-com.validate/justify-options-list","re-com.validate/align-style?","re-com.validate/align-options-list","re-com.box/h-box","p__7085","map__7086","seq7081","gap","children","gap-form","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","cljs.core.into.cljs$core$IFn$_invoke$arity$2","re-com.box/v-box-args-desc","re-com.box/v-box","p__7119","map__7120","seq7118","re-com.box/box-args-desc","re-com.validate/string-or-hiccup?","re-com.box/box","p__7161","map__7162","seq7159","re_com.box.box_base.cljs$core$IFn$_invoke$arity$variadic","re-com.box/scroller-args-desc","re-com.validate/scroll-style?","re-com.box/scroller","p__7217","map__7220","seq7211","not-v-or-h","re-com.box/border-args-desc","re-com.box/border","p__7282","map__7283","seq7275","no-border","cljs.core/every?","cljs.core/nil?","default-border"],"sourcesContent":["(ns re-com.box\r\n  (:require [clojure.string  :as    string]\r\n            [re-com.validate :refer [justify-style? justify-options-list align-style? align-options-list scroll-style?\r\n                                     scroll-options-list string-or-hiccup? css-style? html-attr?] :refer-macros [validate-args-macro]]))\r\n\r\n(def debug false)\r\n\r\n\r\n;; ------------------------------------------------------------------------------------\r\n;;  Private Helper functions\r\n;; ------------------------------------------------------------------------------------\r\n\r\n(defn flex-child-style\r\n  \"Determines the value for the 'flex' attribute (which has grow, shrink and basis), based on the :size parameter.\r\n   IMPORTANT: The term 'size' means width of the item in the case of flex-direction 'row' OR height of the item in the case of flex-direction 'column'.\r\n   Flex property explanation:\r\n    - grow    Integer ratio (used with other siblings) to determined how a flex item grows it's size if there is extra space to distribute. 0 for no growing.\r\n    - shrink  Integer ratio (used with other siblings) to determined how a flex item shrinks it's size if space needs to be removed. 0 for no shrinking.\r\n    - basis   Initial size (width, actually) of item before any growing or shrinking. Can be any size value, e.g. 60%, 100px, auto\r\n              Note: auto will cause the initial size to be calculated to take up as much space as possible, in conjunction with it's siblings :flex settings.\r\n   Supported values:\r\n    - initial            '0 1 auto'  - Use item's width/height for dimensions (or content dimensions if w/h not specifed). Never grow. Shrink (to min-size) if necessary.\r\n                                       Good for creating boxes with fixed maximum size, but that can shrink to a fixed smaller size (min-width/height) if space becomes tight.\r\n                                       NOTE: When using initial, you should also set a width/height value (depending on flex-direction) to specify it's default size\r\n                                             and an optional min-width/height value to specify the size it can shrink to.\r\n    - auto               '1 1 auto'  - Use item's width/height for dimensions. Grow if necessary. Shrink (to min-size) if necessary.\r\n                                       Good for creating really flexible boxes that will gobble as much available space as they are allowed or shrink as much as they are forced to.\r\n    - none               '0 0 auto'  - Use item's width/height for dimensions (or content dimensions if not specifed). Never grow. Never shrink.\r\n                                       Good for creating rigid boxes that stick to their width/height if specified, otherwise their content size.\r\n    - 100px              '0 0 100px' - Non flexible 100px size (in the flex direction) box.\r\n                                       Good for fixed headers/footers and side bars of an exact size.\r\n    - 60%                '60 1 0px'  - Set the item's size (it's width/height depending on flex-direction) to be 60% of the parent container's width/height.\r\n                                       NOTE: If you use this, then all siblings with percentage values must add up to 100%.\r\n    - 60                 '60 1 0px'  - Same as percentage above.\r\n    - grow shrink basis  'grow shrink basis' - If none of the above common valaues above meet your needs, this gives you precise control.\r\n   If number of words is not 1 or 3, an exception is thrown.\r\n   Reference: http://www.w3.org/TR/css3-flexbox/#flexibility\r\n   Diagram:   http://www.w3.org/TR/css3-flexbox/#flex-container\r\n   Regex101 testing: ^(initial|auto|none)|(\\\\d+)(px|%|em)|(\\\\d+)\\\\w(\\\\d+)\\\\w(.*) - remove double backslashes\"\r\n  [size]\r\n  ;; TODO: Could make initial/auto/none into keywords???\r\n  (let [split-size      (string/split (string/trim size) #\"\\s+\")                  ;; Split into words separated by whitespace\r\n        split-count     (count split-size)\r\n        _               (assert (contains? #{1 3} split-count) \"Must pass either 1 or 3 words to flex-child-style\")\r\n        size-only       (when (= split-count 1) (first split-size))         ;; Contains value when only one word passed (e.g. auto, 60px)\r\n        split-size-only (when size-only (string/split size-only #\"(\\d+)(.*)\")) ;; Split into number + string\r\n        [_ num units]   (when size-only split-size-only)                    ;; grab number and units\r\n        pass-through?   (nil? num)                                          ;; If we can't split, then we'll pass this straign through\r\n        grow-ratio?     (or (= units \"%\") (= units \"\") (nil? units))        ;; Determine case for using grow ratio\r\n        grow            (if grow-ratio? num \"0\")                            ;; Set grow based on percent or integer, otherwise no grow\r\n        shrink          (if grow-ratio? \"1\" \"0\")                            ;; If grow set, then set shrink to even shrinkage as well\r\n        basis           (if grow-ratio? \"0px\" size)                         ;; If grow set, then even growing, otherwise set basis size to the passed in size (e.g. 100px, 5em)\r\n        flex            (if (and size-only (not pass-through?))\r\n                          (str grow \" \" shrink \" \" basis)\r\n                          size)]\r\n    {:-webkit-flex flex\r\n             :flex flex}))\r\n\r\n\r\n(defn flex-flow-style\r\n  \"A cross-browser helper function to output flex-flow with all it's potential browser prefixes\"\r\n  [flex-flow]\r\n  {:-webkit-flex-flow flex-flow\r\n           :flex-flow flex-flow})\r\n\r\n(defn justify-style\r\n  \"Determines the value for the flex 'justify-content' attribute.\r\n   This parameter determines how children are aligned along the main axis.\r\n   The justify parameter is a keyword.\r\n   Reference: http://www.w3.org/TR/css3-flexbox/#justify-content-property\"\r\n  [justify]\r\n  (let [js (case justify\r\n             :start   \"flex-start\"\r\n             :end     \"flex-end\"\r\n             :center  \"center\"\r\n             :between \"space-between\"\r\n             :around  \"space-around\")]\r\n    {:-webkit-justify-content js\r\n             :justify-content js}))\r\n\r\n\r\n(defn align-style\r\n  \"Determines the value for the flex align type attributes.\r\n   This parameter determines how children are aligned on the cross axis.\r\n   The justify parameter is a keyword.\r\n   Reference: http://www.w3.org/TR/css3-flexbox/#align-items-property\"\r\n  [attribute align]\r\n  (let [attribute-wk (->> attribute name (str \"-webkit-\") keyword)\r\n        as           (case align\r\n                       :start    \"flex-start\"\r\n                       :end      \"flex-end\"\r\n                       :center   \"center\"\r\n                       :baseline \"baseline\"\r\n                       :stretch  \"stretch\")]\r\n    {attribute-wk as\r\n     attribute    as}))\r\n\r\n\r\n(defn scroll-style\r\n  \"Determines the value for the 'overflow' attribute.\r\n   The scroll parameter is a keyword.\r\n   Because we're translating scroll into overflow, the keyword doesn't appear to match the attribute value\"\r\n  [attribute scroll]\r\n  {attribute (case scroll\r\n                  :auto  \"auto\"\r\n                  :off   \"hidden\"\r\n                  :on    \"scroll\"\r\n                  :spill \"visible\")})\r\n\r\n\r\n;; ------------------------------------------------------------------------------------\r\n;;  Private Component: box-base (debug color: lightblue)\r\n;; ------------------------------------------------------------------------------------\r\n\r\n(defn- box-base\r\n  \"This should generally NOT be used as it is the basis for the box, scroller and border components\"\r\n  [& {:keys [size scroll h-scroll v-scroll width height min-width min-height max-width max-height justify align align-self\r\n             margin padding border l-border r-border t-border b-border radius bk-color child class-name class style attr]}]\r\n  (let [s (merge\r\n            (flex-flow-style \"inherit\")\r\n            (flex-child-style size)\r\n            (when scroll      (scroll-style   :overflow scroll))\r\n            (when h-scroll    (scroll-style   :overflow-x h-scroll))\r\n            (when v-scroll    (scroll-style   :overflow-y v-scroll))\r\n            (when width       {:width         width})\r\n            (when height      {:height        height})\r\n            (when min-width   {:min-width     min-width})\r\n            (when min-height  {:min-height    min-height})\r\n            (when max-width   {:max-width     max-width})\r\n            (when max-height  {:max-height    max-height})\r\n            (when justify     (justify-style  justify))\r\n            (when align       (align-style    :align-items align))\r\n            (when align-self  (align-style    :align-self align-self))\r\n            (when margin      {:margin        margin})       ;; margin and padding: \"all\" OR \"top&bottom right&left\" OR \"top right bottom left\"\r\n            (when padding     {:padding       padding})\r\n            (when border      {:border        border})\r\n            (when l-border    {:border-left   l-border})\r\n            (when r-border    {:border-right  r-border})\r\n            (when t-border    {:border-top    t-border})\r\n            (when b-border    {:border-bottom b-border})\r\n            (when radius      {:border-radius radius})\r\n            (if bk-color\r\n              {:background-color bk-color}\r\n              (if debug {:background-color \"lightblue\"} {}))\r\n            style)]\r\n    [:div\r\n     (merge\r\n       {:class (str class-name \"display-flex \" class) :style s}\r\n       attr)\r\n     child]))\r\n\r\n\r\n;; ------------------------------------------------------------------------------------\r\n;;  Component: gap (debug color: chocolate)\r\n;; ------------------------------------------------------------------------------------\r\n\r\n(def gap-args-desc\r\n  [{:name :size   :required true  :type \"string\"        :validate-fn string?    :description \"the length of the whitespace.  Typically, an absolute CSS length like 10px or 10em, but can be a stretchy proportional amount like 2\"}\r\n   {:name :width  :required false :type \"string\"        :validate-fn string?    :description \"a CSS width style\"}\r\n   {:name :height :required false :type \"string\"        :validate-fn string?    :description \"a CSS height style\"}\r\n   {:name :class  :required false :type \"string\"        :validate-fn string?    :description \"CSS class names, space separated\"}\r\n   {:name :style  :required false :type \"CSS style map\" :validate-fn css-style? :description \"CSS styles to add or override\"}\r\n   {:name :attr   :required false :type \"HTML attr map\" :validate-fn html-attr? :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed\"]}])\r\n\r\n(defn gap\r\n  \"Returns a component which produces a gap between children in a v-box/h-box along the main axis\"\r\n  [& {:keys [size width height class style attr]\r\n      :as   args}]\r\n  {:pre [(validate-args-macro gap-args-desc args \"gap\")]}\r\n  (let [s (merge\r\n            (when size   (flex-child-style size))\r\n            (when width  {:width width})\r\n            (when height {:height height})\r\n            (when debug  {:background-color \"chocolate\"})\r\n            style)]\r\n    [:div\r\n     (merge\r\n       {:class (str \"rc-gap \" class) :style s}\r\n       attr)]))\r\n\r\n\r\n;; ------------------------------------------------------------------------------------\r\n;;  Component: line\r\n;; ------------------------------------------------------------------------------------\r\n\r\n(def line-args-desc\r\n  [{:name :size  :required false :default \"1px\"       :type \"string\"        :validate-fn string?    :description \"a CSS style for the thickness of the line. Usually px, % or em\"}\r\n   {:name :color :required false :default \"lightgray\" :type \"string\"        :validate-fn string?    :description \"a CSS color\"}\r\n   {:name :class :required false                      :type \"string\"        :validate-fn string?    :description \"CSS class names, space separated\"}\r\n   {:name :style :required false                      :type \"CSS style map\" :validate-fn css-style? :description \"CSS styles to add or override\"}\r\n   {:name :attr  :required false                      :type \"HTML attr map\" :validate-fn html-attr? :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed\"]}])\r\n\r\n(defn line\r\n  \"Returns a component which produces a line between children in a v-box/h-box along the main axis.\r\n   Specify size in pixels and a stancard CSS color. Defaults to a 1px lightgray line\"\r\n  [& {:keys [size color class style attr]\r\n      :or   {size \"1px\" color \"lightgray\"}\r\n      :as   args}]\r\n  {:pre [(validate-args-macro line-args-desc args \"line\")]}\r\n  (let [s (merge\r\n            (flex-child-style (str \"0 0 \" size))\r\n            {:background-color color}\r\n            style)]\r\n    [:div\r\n     (merge\r\n       {:class (str \"rc-line \" class) :style s}\r\n       attr)]))\r\n\r\n\r\n;; ------------------------------------------------------------------------------------\r\n;;  Component: h-box (debug color: gold)\r\n;; ------------------------------------------------------------------------------------\r\n\r\n(def h-box-args-desc\r\n  [{:name :children   :required true                    :type \"vector\"        :validate-fn sequential?    :description \"a vector (or list) of components\"}\r\n   {:name :size       :required false :default \"none\"   :type \"string\"        :validate-fn string?        :description [:span \"equivalent to CSS style \" [:span.bold \"flex\"] \".\" [:br]  \"Examples: \" [:code \"initial\"] \", \" [:code \"auto\"] \", \" [:code \"none\"]\", \" [:code \"100px\"] \", \" [:code \"2\"] \" or a generic triple of \" [:code \"grow shrink basis\"]]}\r\n   {:name :width      :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS width style\"}\r\n   {:name :height     :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS height style\"}\r\n   {:name :min-width  :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS width style. The minimum width to which the box can shrink\"}\r\n   {:name :min-height :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS height style. The minimum height to which the box can shrink\"}\r\n   {:name :max-width  :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS width style. The maximum width to which the box can grow\"}\r\n   {:name :max-height :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS height style. The maximum height to which the box can grow\"}\r\n   {:name :justify    :required false :default :start   :type \"keyword\"       :validate-fn justify-style? :description [:span \"equivalent to CSS style \" [:span.bold \"justify-content\"] \".\" [:br] \"One of \" justify-options-list]}\r\n   {:name :align      :required false :default :stretch :type \"keyword\"       :validate-fn align-style?   :description [:span \"equivalent to CSS style \" [:span.bold \"align-items\"]  \".\" [:br] \" One of \" align-options-list]}\r\n   {:name :align-self :required false                   :type \"keyword\"       :validate-fn align-style?   :description [:span \"equivalent to CSS style \" [:span.bold \"align-self\"] \".\" [:br]  \"Used when a child must override the parent's align-items setting.\"]}\r\n   {:name :margin     :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS margin style\"}\r\n   {:name :padding    :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS padding style\"}\r\n   {:name :gap        :required false                   :type \"string\"        :validate-fn string?        :description \"the amount of whitespace to put between each child. Typically, an absolute CSS length like 10px or 10em, but can be a stretchy proportional amount like 2\"}\r\n   {:name :class      :required false                   :type \"string\"        :validate-fn string?        :description \"CSS class names, space separated\"}\r\n   {:name :style      :required false                   :type \"CSS style map\" :validate-fn css-style?     :description \"CSS styles to add or override\"}\r\n   {:name :attr       :required false                   :type \"HTML attr map\" :validate-fn html-attr?     :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed\"]}])\r\n\r\n(defn h-box\r\n  \"Returns hiccup which produces a horizontal box.\r\n   It's primary role is to act as a container for components and lays it's children from left to right.\r\n   By default, it also acts as a child under it's parent\"\r\n  [& {:keys [size width height min-width min-height max-width max-height justify align align-self margin padding gap children class style attr]\r\n      :or   {size \"none\" justify :start align :stretch}\r\n      :as   args}]\r\n  {:pre [(validate-args-macro h-box-args-desc args \"h-box\")]}\r\n  (let [s        (merge\r\n                   (flex-flow-style \"row nowrap\")\r\n                   (flex-child-style size)\r\n                   (when width      {:width      width})\r\n                   (when height     {:height     height})\r\n                   (when min-width  {:min-width  min-width})\r\n                   (when min-height {:min-height min-height})\r\n                   (when max-width  {:max-width  max-width})\r\n                   (when max-height {:max-height max-height})\r\n                   (justify-style justify)\r\n                   (align-style :align-items align)\r\n                   (when align-self (align-style :align-self align-self))\r\n                   (when margin     {:margin     margin})       ;; margin and padding: \"all\" OR \"top&bottom right&left\" OR \"top right bottom left\"\r\n                   (when padding    {:padding    padding})\r\n                   (when debug      {:background-color \"gold\"})\r\n                   style)\r\n        gap-form (when gap [re-com.box/gap\r\n                            :size  gap\r\n                            :width gap]) ;; TODO: required to get around a Chrome bug: https://code.google.com/p/chromium/issues/detail?id=423112. Remove once fixed.\r\n        children (if gap\r\n                   (interpose gap-form (filter identity children)) ;; filter is to remove possible nils so we don't add unwanted gaps\r\n                   children)]\r\n    (into [:div\r\n           (merge\r\n             {:class (str \"rc-h-box display-flex \" class) :style s}\r\n             attr)]\r\n          children)))\r\n\r\n\r\n;; ------------------------------------------------------------------------------------\r\n;;  Component: v-box (debug color: antiquewhite)\r\n;; ------------------------------------------------------------------------------------\r\n\r\n(def v-box-args-desc\r\n  [{:name :children   :required true                    :type \"vector\"        :validate-fn sequential?    :description \"a vector (or list) of components\"}\r\n   {:name :size       :required false :default \"none\"   :type \"string\"        :validate-fn string?        :description [:span \"equivalent to CSS style \" [:span.bold \"flex\"] \".\" [:br]  \"Examples: \" [:code \"initial\"] \", \" [:code \"auto\"] \", \" [:code \"none\"]\", \" [:code \"100px\"] \", \" [:code \"2\"] \" or a generic triple of \" [:code \"grow shrink basis\"]]}\r\n   {:name :width      :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS width style\"}\r\n   {:name :height     :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS height style\"}\r\n   {:name :min-width  :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS width style. The minimum width to which the box can shrink\"}\r\n   {:name :min-height :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS height style. The minimum height to which the box can shrink\"}\r\n   {:name :max-width  :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS width style. The maximum width to which the box can grow\"}\r\n   {:name :max-height :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS height style. The maximum height to which the box can grow\"}\r\n   {:name :justify    :required false :default :start   :type \"keyword\"       :validate-fn justify-style? :description [:span \"equivalent to CSS style \" [:span.bold \"justify-content\"] \".\" [:br] \"One of \" justify-options-list]}\r\n   {:name :align      :required false :default :stretch :type \"keyword\"       :validate-fn align-style?   :description [:span \"equivalent to CSS style \" [:span.bold \"align-items\"]  \".\" [:br] \" One of \" align-options-list]}\r\n   {:name :align-self :required false                   :type \"keyword\"       :validate-fn align-style?   :description [:span \"equivalent to CSS style \" [:span.bold \"align-self\"] \".\" [:br]  \"Used when a child must override the parent's align-items setting.\"]}\r\n   {:name :margin     :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS margin style\"}\r\n   {:name :padding    :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS padding style\"}\r\n   {:name :gap        :required false                   :type \"string\"        :validate-fn string?        :description \"the amount of whitespace to put between each child. Typically, an absolute CSS length like 10px or 10em, but can be a stretchy proportional amount like 2\"}\r\n   {:name :class      :required false                   :type \"string\"        :validate-fn string?        :description \"CSS class names, space separated\"}\r\n   {:name :style      :required false                   :type \"CSS style map\" :validate-fn css-style?     :description \"CSS styles to add or override\"}\r\n   {:name :attr       :required false                   :type \"HTML attr map\" :validate-fn html-attr?     :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed\"]}])\r\n\r\n(defn v-box\r\n  \"Returns hiccup which produces a vertical box.\r\n   It's primary role is to act as a container for components and lays it's children from top to bottom.\r\n   By default, it also acts as a child under it's parent\"\r\n  [& {:keys [size width height min-width min-height max-width max-height justify align align-self margin padding gap children class style attr]\r\n      :or   {size \"none\" justify :start align :stretch}\r\n      :as   args}]\r\n  {:pre [(validate-args-macro v-box-args-desc args \"v-box\")]}\r\n  (let [s        (merge\r\n                   (flex-flow-style  \"column nowrap\")\r\n                   (flex-child-style size)\r\n                   (when width       {:width      width})\r\n                   (when height      {:height     height})\r\n                   (when min-width   {:min-width  min-width})\r\n                   (when min-height  {:min-height min-height})\r\n                   (when max-width   {:max-width  max-width})\r\n                   (when max-height  {:max-height max-height})\r\n                   (justify-style    justify)\r\n                   (align-style      :align-items align)\r\n                   (when align-self  (align-style :align-self align-self))\r\n                   (when margin      {:margin     margin})       ;; margin and padding: \"all\" OR \"top&bottom right&left\" OR \"top right bottom left\"\r\n                   (when padding     {:padding    padding})\r\n                   (when debug       {:background-color \"antiquewhite\"})\r\n                   style)\r\n        gap-form (when gap [re-com.box/gap\r\n                            :size   gap\r\n                            :height gap]) ;; TODO: required to get around a Chrome bug: https://code.google.com/p/chromium/issues/detail?id=423112. Remove once fixed.\r\n        children (if gap\r\n                   (interpose gap-form (filter identity children)) ;; filter is to remove possible nils so we don't add unwanted gaps\r\n                   children)]\r\n    (into [:div\r\n           (merge\r\n             {:class (str \"rc-v-box display-flex \" class) :style s}\r\n             attr)]\r\n          children)))\r\n\r\n\r\n;; ------------------------------------------------------------------------------------\r\n;;  Component: box\r\n;; ------------------------------------------------------------------------------------\r\n\r\n(def box-args-desc\r\n  [{:name :child      :required true                    :type \"string | hiccup\" :validate-fn string-or-hiccup? :description \"a component (or string)\"}\r\n   {:name :size       :required false :default \"none\"   :type \"string\"          :validate-fn string?           :description [:span \"equivalent to CSS style \" [:span.bold \"flex\"] \".\" [:br]  \"Examples: \" [:code \"initial\"] \", \" [:code \"auto\"] \", \" [:code \"none\"]\", \" [:code \"100px\"] \", \" [:code \"2\"] \" or a generic triple of \" [:code \"grow shrink basis\"]]}\r\n   {:name :width      :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS width style\"}\r\n   {:name :height     :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS height style\"}\r\n   {:name :min-width  :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS width style. The minimum width to which the box can shrink\"}\r\n   {:name :min-height :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS height style. The minimum height to which the box can shrink\"}\r\n   {:name :max-width  :required false                   :type \"string\"          :validate-fn string?          :description \"a CSS width style. The maximum width to which the box can grow\"}\r\n   {:name :max-height :required false                   :type \"string\"          :validate-fn string?          :description \"a CSS height style. The maximum height to which the box can grow\"}\r\n   {:name :justify    :required false :default :start   :type \"keyword\"         :validate-fn justify-style?    :description [:span \"equivalent to CSS style \" [:span.bold \"justify-content\"] \".\" [:br] \"One of \" justify-options-list]}\r\n   {:name :align      :required false :default :stretch :type \"keyword\"         :validate-fn align-style?      :description [:span \"equivalent to CSS style \" [:span.bold \"align-items\"]  \".\" [:br] \" One of \" align-options-list]}\r\n   {:name :align-self :required false                   :type \"keyword\"         :validate-fn align-style?      :description [:span \"equivalent to CSS style \" [:span.bold \"align-self\"] \".\" [:br]  \"Used when a child must override the parent's align-items setting.\"]}\r\n   {:name :margin     :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS margin style\"}\r\n   {:name :padding    :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS padding style\"}\r\n   {:name :class      :required false                   :type \"string\"          :validate-fn string?           :description \"CSS class names, space separated\"}\r\n   {:name :style      :required false                   :type \"CSS style map\"   :validate-fn css-style?        :description \"CSS styles to add or override\"}\r\n   {:name :attr       :required false                   :type \"HTML attr map\"   :validate-fn html-attr?        :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed\"]}])\r\n\r\n(defn box\r\n  \"Returns hiccup which produces a box, which is generally used as a child of a v-box or an h-box.\r\n   By default, it also acts as a container for further child compenents, or another h-box or v-box\"\r\n  [& {:keys [size width height min-width min-height max-width max-height justify align align-self margin padding child class style attr]\r\n      :or   {size \"none\"}\r\n      :as   args}]\r\n  {:pre [(validate-args-macro box-args-desc args \"box\")]}\r\n  (box-base :size        size\r\n            :width       width\r\n            :height      height\r\n            :min-width   min-width\r\n            :min-height  min-height\r\n            :max-width   max-width\r\n            :max-height  max-height\r\n            :justify     justify\r\n            :align       align\r\n            :align-self  align-self\r\n            :margin      margin\r\n            :padding     padding\r\n            :child       child\r\n            :class-name  \"rc-box \"\r\n            :class       class\r\n            :style       style\r\n            :attr        attr))\r\n\r\n\r\n;; ------------------------------------------------------------------------------------\r\n;;  Component: scroller\r\n;; ------------------------------------------------------------------------------------\r\n\r\n(def scroller-args-desc\r\n  [{:name :child      :required true                    :type \"string | hiccup\" :validate-fn string-or-hiccup? :description \"a component (or string)\"}\r\n   {:name :size       :required false :default \"auto\"   :type \"string\"          :validate-fn string?           :description [:span \"equivalent to CSS style \" [:span.bold \"flex\"] \".\" [:br]  \"Examples: \" [:code \"initial\"] \", \" [:code \"auto\"] \", \" [:code \"none\"]\", \" [:code \"100px\"] \", \" [:code \"2\"] \" or a generic triple of \" [:code \"grow shrink basis\"]]}\r\n   {:name :scroll     :required false :default \"auto\"   :type \"keyword\"         :validate-fn scroll-style?     :description [:span \"Sets both h-scroll and v-scroll at once: \" [:br]\r\n                                                                                                                             [:code \":auto\"] \": only show scroll bar(s) if the content is larger than the scroller\" [:br]\r\n                                                                                                                             [:code \":on\"] \": always show scroll bars\" [:br]\r\n                                                                                                                             [:code \":off\"] \": never show scroll bar(s). Content which is not in the bounds of the scroller can not be seen\" [:br]\r\n                                                                                                                             [:code \":spill\"] \": never show scroll bar(s). Content which is not in the bounds of the scroller spills all over the place\"]}\r\n   {:name :h-scroll   :required false                   :type \"keyword\"         :validate-fn scroll-style?     :description [:span \"see \" [:code \":scroll\"] \". Overrides that setting\"]}\r\n   {:name :v-scroll   :required false                   :type \"keyword\"         :validate-fn scroll-style?     :description [:span \"see \" [:code \":scroll\"] \". Overrides that setting\"]}\r\n   {:name :width      :required false                   :type \"string\"          :validate-fn string?           :description \"initial width\"}\r\n   {:name :height     :required false                   :type \"string\"          :validate-fn string?           :description \"initial height\"}\r\n   {:name :min-width  :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS width style. The minimum width to which the box can shrink\"}\r\n   {:name :min-height :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS height style. The minimum height to which the box can shrink\"}\r\n   {:name :max-width  :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS width style. The maximum width to which the box can grow\"}\r\n   {:name :max-height :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS height style. The maximum height to which the box can grow\"}\r\n   {:name :justify    :required false :default :start   :type \"keyword\"         :validate-fn justify-style?    :description [:span \"equivalent to CSS style \" [:span.bold \"justify-content\"] \".\" [:br] \"One of \" justify-options-list]}\r\n   {:name :align      :required false :default :stretch :type \"keyword\"         :validate-fn align-style?      :description [:span \"equivalent to CSS style \" [:span.bold \"align-items\"]  \".\" [:br] \" One of \" align-options-list]}\r\n   {:name :align-self :required false                   :type \"keyword\"         :validate-fn align-style?      :description [:span \"equivalent to CSS style \" [:span.bold \"align-self\"] \".\" [:br]  \"Used when a child must override the parent's align-items setting.\"]}\r\n   {:name :margin     :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS margin style\"}\r\n   {:name :padding    :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS padding style\"}\r\n   {:name :class      :required false                   :type \"string\"          :validate-fn string?           :description \"CSS class names, space separated\"}\r\n   {:name :style      :required false                   :type \"CSS style map\"   :validate-fn css-style?        :description \"CSS styles to add or override\"}\r\n   {:name :attr       :required false                   :type \"HTML attr map\"   :validate-fn html-attr?        :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed\"]}])\r\n\r\n(defn scroller\r\n  \"Returns hiccup which produces a scoller component.\r\n   This is the way scroll bars are added to boxes, in favour of adding the scroll attributes directly to the boxes themselves.\r\n   IMPORTANT: Because this component becomes the flex child in place of the component it is wrapping, you must copy the size attibutes to this componenet.\r\n   There are three scroll types:\r\n    - h-scroll  Determines how the horizontal scroll bar will be displayed.\r\n    - v-scroll  Determines how the vertical scroll bar will be displayed.\r\n    - scroll    Sets both h-scroll and v-scroll at once.\r\n   Syntax: :auto   [DEFAULT] Only show scroll bar(s) if the content is larger than the scroller.\r\n           :on     Always show scroll bar(s).\r\n           :off    Never show scroll bar(s). Content which is not in the bounds of the scroller can not be seen.\r\n           :spill  Never show scroll bar(s). Content which is not in the bounds of the scroller spills all over the place.\r\n   Note:   If scroll is set, then setting h-scroll or v-scroll overrides the scroll value\"\r\n  [& {:keys [size scroll h-scroll v-scroll width height min-width min-height max-width max-height justify align align-self margin padding child class style attr]\r\n      :or   {size \"auto\"}\r\n      :as   args}]\r\n  {:pre [(validate-args-macro scroller-args-desc args \"scroller\")]}\r\n  (let [not-v-or-h (and (nil? v-scroll) (nil? h-scroll))\r\n        scroll     (if (and (nil? scroll) not-v-or-h) :auto scroll)]\r\n    (box-base :size       size\r\n              :scroll     scroll\r\n              :h-scroll   h-scroll\r\n              :v-scroll   v-scroll\r\n              :width      width\r\n              :height     height\r\n              :min-width  min-width\r\n              :min-height min-height\r\n              :max-width  max-width\r\n              :max-height max-height\r\n              :justify    justify\r\n              :align      align\r\n              :align-self align-self\r\n              :margin     margin\r\n              :padding    padding\r\n              :child      child\r\n              :class-name \"rc-scroller \"\r\n              :class      class\r\n              :style      style\r\n              :attr       attr)))\r\n\r\n\r\n;; ------------------------------------------------------------------------------------\r\n;;  Component: border\r\n;; ------------------------------------------------------------------------------------\r\n\r\n(def border-args-desc\r\n  [{:name :child      :required true                                 :type \"string | hiccup\" :validate-fn string-or-hiccup? :description \"a component (or string)\"}\r\n   {:name :border     :required false :default \"1px solid lightgrey\" :type \"string\"          :validate-fn string?           :description \"a CSS border style. A convenience to describe all borders in one parameter\"}\r\n   {:name :l-border   :required false                                :type \"string\"          :validate-fn string?           :description [:span \"a CSS border style for the left border. Overrides \" [:code \":border\"]]}\r\n   {:name :r-border   :required false                                :type \"string\"          :validate-fn string?           :description [:span \"a CSS border style for the right border. Overrides \" [:code \":border\"]]}\r\n   {:name :t-border   :required false                                :type \"string\"          :validate-fn string?           :description [:span \"a CSS border style for the top border. Overrides \" [:code \":border\"]]}\r\n   {:name :b-border   :required false                                :type \"string\"          :validate-fn string?           :description [:span \"a CSS border style for the bottom. Overrides \" [:code \":border\"]]}\r\n   {:name :radius     :required false                                :type \"string\"          :validate-fn string?           :description \"a CSS radius style eg.\\\"2px\\\"\"}\r\n   {:name :size       :required false :default \"none\"                :type \"string\"          :validate-fn string?           :description [:span \"equivalent to CSS style \" [:span.bold \"flex\"] \".\" [:br]  \"Examples: \" [:code \"initial\"] \", \" [:code \"auto\"] \", \" [:code \"none\"]\", \" [:code \"100px\"] \", \" [:code \"2\"] \" or a generic triple of \" [:code \"grow shrink basis\"]]}\r\n   {:name :width      :required false                                :type \"string\"          :validate-fn string?           :description \"a CSS style describing the initial width\"}\r\n   {:name :height     :required false                                :type \"string\"          :validate-fn string?           :description \"a CSS style describing the initial height\"}\r\n   {:name :min-width  :required false                                :type \"string\"          :validate-fn string?           :description \"a CSS width style. The minimum width to which the box can shrink\"}\r\n   {:name :min-height :required false                                :type \"string\"          :validate-fn string?           :description \"a CSS height style. The minimum height to which the box can shrink\"}\r\n   {:name :max-width  :required false                                :type \"string\"          :validate-fn string?           :description \"a CSS width style. The maximum width to which the box can grow\"}\r\n   {:name :max-height :required false                                :type \"string\"          :validate-fn string?           :description \"a CSS height style. The maximum height to which the box can grow\"}\r\n   {:name :margin     :required false                                :type \"string\"          :validate-fn string?           :description \"a CSS margin style\"}\r\n   {:name :padding    :required false                                :type \"string\"          :validate-fn string?           :description \"a CSS padding style\"}\r\n   {:name :class      :required false                                :type \"string\"          :validate-fn string?           :description \"CSS class names, space separated\"}\r\n   {:name :style      :required false                                :type \"CSS style map\"   :validate-fn css-style?        :description \"CSS styles to add or override\"}\r\n   {:name :attr       :required false                                :type \"HTML attr map\"   :validate-fn html-attr?        :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed\"]}])\r\n\r\n(defn border\r\n  \"Returns hiccup which produces a border component.\r\n   This is the way borders are added to boxes, in favour of adding the border attributes directly to the boxes themselves.\r\n   border property syntax: '<border-width> || <border-style> || <color>'\r\n    - border-width: thin, medium, thick or standard CSS size (e.g. 2px, 0.5em)\r\n    - border-style: none, hidden, dotted, dashed, solid, double, groove, ridge, inset, outset\r\n    - color:        standard CSS color (e.g. grey #88ffee)\"\r\n  [& {:keys [size width height min-width min-height max-width max-height margin padding border l-border r-border t-border b-border radius child class style attr]\r\n      :or   {size \"none\"}\r\n      :as   args}]\r\n  {:pre [(validate-args-macro border-args-desc args \"border\")]}\r\n  (let [no-border      (every? nil? [border l-border r-border t-border b-border])\r\n        default-border \"1px solid lightgrey\"]\r\n    (box-base :size        size\r\n              :width       width\r\n              :height      height\r\n              :min-width   min-width\r\n              :min-height  min-height\r\n              :max-width   max-width\r\n              :max-height  max-height\r\n              :margin      margin\r\n              :padding     padding\r\n              :border      (if no-border default-border border)\r\n              :l-border    l-border\r\n              :r-border    r-border\r\n              :t-border    t-border\r\n              :b-border    b-border\r\n              :radius      radius\r\n              :child       child\r\n              :class-name  \"rc-border \"\r\n              :class       class\r\n              :style       style\r\n              :attr        attr)))"]}