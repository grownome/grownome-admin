{"version":3,"file":"expound.paths.js","sources":["expound/paths.cljc"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.core/sequential?","this__4203__auto__","k__4204__auto__","cljs.core._lookup.cljs$core$IFn$_invoke$arity$3","this__4205__auto__","k9062","else__4206__auto__","G__9070","cljs.core/Keyword","key","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4217__auto__","writer__4218__auto__","opts__4219__auto__","pr-pair__4220__auto__","keyval__4221__auto__","cljs.core/pr-sequential-writer","cljs.core/pr-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__9061","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4201__auto__","__meta","this__4198__auto__","__hash","this__4207__auto__","cljs.core/count","this__4199__auto__","h__4061__auto__","fexpr__9078","coll__4200__auto__","cljs.core/hash-unordered-coll","this9063","other9064","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","this__4212__auto__","k__4213__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4210__auto__","k__4211__auto__","pred__9087","cljs.core/keyword-identical?","expr__9088","G__9090","G__9091","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4215__auto__","cljs.core/seq","cljs/core.MapEntry","this__4202__auto__","this__4208__auto__","entry__4209__auto__","cljs.core/vector?","cljs.core/-assoc","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/-conj","expound.paths/KeyPathSegment","this__4240__auto__","cljs.core/List","writer__4241__auto__","cljs.core/-write","G__9065","extmap__4236__auto__","G__9105","cljs.core/record?","expound.paths/->KeyPathSegment","expound.paths/map->KeyPathSegment","k9176","G__9186","idx","G__9175","fexpr__9196","this9177","other9178","pred__9204","expr__9205","G__9207","G__9208","expound.paths/KeyValuePathSegment","G__9181","G__9219","expound.paths/->KeyValuePathSegment","expound.paths/map->KeyValuePathSegment","expound.paths/kps?","x","expound.paths/kvps?","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4","cljs.spec.alpha/cat-impl","cljs.core/boolean?","expound.paths/prefix-path?","partial-path","full-path","cljs.core.subvec.cljs$core$IFn$_invoke$arity$3","cljs.core/any?","expound.paths/kps-path?","cljs.core/boolean","and__3938__auto__","cljs.core/last","expound.paths/kvps-path?","cljs.core/some","expound.paths/fn-equal","y","cljs.core/fn?","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","expound.paths/both-nan?","expound.util/nan?","expound.paths/equalish?","or__3949__auto__","expound.paths/in-with-kps-maps-as-seqs","form","val","in","in'","vec__9307","seq__9308","first__9309","cljs.core/first","cljs.core/next","vec__9310","seq__9311","first__9312","k","rst","rst2","cljs.core/empty?","cljs.core/map?","cljs.core/nat-int?","G__9313","G__9314","G__9315","G__9316","expound.paths/in-with-kps*","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/int?","G__9318","G__9319","G__9320","G__9321","cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic","expound.paths/in-with-kps-fuzzy-match-for-regex-failures","vec__9331","seq__9332","first__9333","cljs.core/seqable?","cljs.core/seq?","G__9334","G__9335","G__9336","G__9337","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","expound.paths/in-with-kps-ints-are-keys","vec__9338","seq__9339","first__9340","cljs.core/associative?","G__9341","G__9342","G__9343","G__9344","G__9345","G__9346","G__9347","G__9348","expound.paths/in-with-kps-ints-are-key-value-indicators","vec__9359","seq__9360","first__9361","vec__9362","seq__9363","first__9364","G__9365","G__9366","G__9367","G__9368","G__9369","G__9370","G__9371","G__9372","br1","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","br2","br3","br4","expound.paths/in-with-kps","res","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","expound.paths/compare-path-segment","cljs.core/compare","cljs.core/not","expound.paths/compare-paths","path1","path2","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core.remove.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns expound.paths\n  (:require [clojure.spec.alpha :as s]\n            [expound.util :as util]))\n\n;;;;;; specs ;;;;;;\n\n(s/def :expound/path sequential?)\n\n;;;;;; types ;;;;;;\n\n(defrecord KeyPathSegment [key])\n\n(defrecord KeyValuePathSegment [idx])\n\n;;;;;;;;;;;;;;;;;;;\n\n(defn kps? [x]\n  (instance? KeyPathSegment x))\n\n(defn kvps? [x]\n  (instance? KeyValuePathSegment x))\n\n(s/fdef prefix-path?\n        :args (s/cat\n               :partial-path :expound/path\n               :partial-path :expound/path)\n        :ret boolean?)\n(defn prefix-path?\n  \"True if partial-path is a prefix of full-path.\"\n  [partial-path full-path]\n  (and (< (count partial-path) (count full-path))\n       (= partial-path\n          (subvec full-path 0 (count partial-path)))))\n\n(s/fdef kps-path?\n        :args (s/cat :x any?)\n        :ret boolean?)\n(defn kps-path?\n  \"True if path points to a key\"\n  [x]\n  (boolean (and (vector? x)\n                (kps? (last x)))))\n\n(s/fdef kvps-path?\n        :args (s/cat :x any?)\n        :ret boolean?)\n(defn kvps-path?\n  \"True if path points to a key/value pair\"\n  [x]\n  (boolean (and (vector? x)\n                (some kvps? x))))\n\n(declare in-with-kps*)\n\n(defn fn-equal [x y]\n  (and (fn? x)\n       (fn? y)\n       (= (pr-str x)\n          (pr-str y))))\n\n(defn both-nan? [x y]\n  (and (util/nan? x)\n       (util/nan? y)))\n\n(defn equalish? [x y]\n  (or\n   (= x y)\n   (fn-equal x y)\n   (both-nan? x y)))\n\n(defn in-with-kps-maps-as-seqs [form val in in']\n  (let [[k & rst] in\n        [idx & rst2] rst]\n    (cond\n      (= ::not-found form)\n      ::not-found\n\n      (and (empty? in)\n           (equalish? form val))\n      in'\n\n      ;; detect a `:in` path that points to a key/value pair in a coll-of spec\n      (and (map? form)\n           (nat-int? k)\n           (< k (count (seq form))))\n      (in-with-kps* (nth (seq form) k) val rst (conj in' (->KeyValuePathSegment k)))\n\n      (and (map? form)\n           (nat-int? k)\n           (int? idx)\n           (< k (count (seq form)))\n           (< idx (count (nth (seq form) k))))\n      (in-with-kps* (nth (nth (seq form) k) idx) val rst2 (conj in' (->KeyValuePathSegment k) idx))\n\n      :else\n      ::not-found)))\n\n(defn in-with-kps-fuzzy-match-for-regex-failures [form val in in']\n  (if (= form ::not-found)\n    form\n    (let [[k & rst] in]\n      (cond\n        ;; not enough input\n        (and (empty? in)\n             (seqable? form)\n             (= val '()))\n        in'\n\n        ;; too much input\n        (and (empty? in)\n             (and (seq? val)\n                  (= form\n                     (first val))))\n        in'\n\n        (and (nat-int? k) (seqable? form))\n        (in-with-kps* (nth (seq form) k ::not-found) val rst (conj in' k))\n\n        :else\n        ::not-found))))\n\n(defn in-with-kps-ints-are-keys [form val in in']\n  (if (= form ::not-found)\n    form\n    (let [[k & rst] in]\n      (cond\n        (and (empty? in)\n             (equalish? form val))\n        in'\n\n        (associative? form)\n        (in-with-kps* (get form k ::not-found) val rst (conj in' k))\n\n        (and (int? k) (seqable? form))\n        (in-with-kps* (nth (seq form) k ::not-found) val rst (conj in' k))\n\n        :else\n        ::not-found))))\n\n(defn in-with-kps-ints-are-key-value-indicators [form val in in']\n  (if (= form ::not-found)\n    form\n    (let [[k & rst] in\n          [idx & rst2] rst]\n      (cond\n        (and (empty? in)\n             (equalish? form val))\n        in'\n\n        ;; detect a `:in` path that points at a key in a map-of spec\n        (and (map? form)\n             (= 0 idx))\n        (in-with-kps* k val rst2 (conj in' (->KeyPathSegment k)))\n\n        ;; detect a `:in` path that points at a value in a map-of spec\n        (and (map? form)\n             (= 1 idx))\n        (in-with-kps* (get form k ::not-found) val rst2 (conj in' k))\n\n        :else\n        ::not-found))))\n\n(defn in-with-kps* [form val in in']\n  (if (fn? form)\n    in'\n    (let [br1 (in-with-kps-ints-are-key-value-indicators form val in in')]\n      (if (not= ::not-found br1)\n        br1\n        (let [br2 (in-with-kps-maps-as-seqs form val in in')]\n          (if (not= ::not-found br2)\n            br2\n            (let [br3 (in-with-kps-ints-are-keys form val in in')]\n              (if (not= ::not-found br3)\n                br3\n                (let [br4 (in-with-kps-fuzzy-match-for-regex-failures form val in in')]\n                  (if (not= ::not-found br4)\n                    br4\n                    ::not-found))))))))))\n\n(defn in-with-kps [form val in in']\n  (let [res (in-with-kps* form val in in')]\n    (if (= ::not-found res)\n      (throw (ex-info \"Cannot convert path. This can be caused by using conformers to transform values, which is not supported in Expound\"\n                      {:form form\n                       :val val\n                       :in in\n                       :in' in'}))\n      res)))\n\n(declare compare-paths)\n\n(defn compare-path-segment [x y]\n  (cond\n    (and (int? x) (kvps? y))\n    (compare x (:idx y))\n\n    (and (kvps? x) (int? y))\n    (compare (:idx x) y)\n\n    (and (kps? x) (not (kps? y)))\n    -1\n\n    (and (not (kps? x)) (kps? y))\n    1\n\n    (and (vector? x) (vector? y))\n    (compare-paths x y)\n\n    :else\n    (compare x y)))\n\n(defn compare-paths [path1 path2]\n  (->> (map compare-path-segment path1 path2)\n       (remove #{0})\n       first))\n"]}